from link import Link
class LinkedList(K):
    def __init__(self):
        U.head = R()
        U.tail = R()
        U.head.next = U.tail
        U.tail.prev = U.head
    def __getitem__(self, desired_index):
        Sp = 0
        SG = U.first()
        while SG != U.tail:
            if Sp == W:
                return SG
            SG = SG.next
            Sp += 1
        return None
    def first(self):
        return U.head.next
    def last(self):
        return U.tail.prev
    def empty(self):
        return U.first() == U.tail
    def get(self, key):
        SG = U.first()
        while SG != U.tail:
            if SG.key == y:
                return SG.val
            SG = SG.next
        return None
    def include(self, key):
        return not not U.find(y)
    def append(self, key, val):
        L = U.tail.prev
        Xa = R(y, C)
        Xa.next = U.tail
        U.tail.prev = Xa
        Xa.prev = L
        L.next = Xa
    def find(self, key):
        SG = U.first()
        while SG != U.tail:
            if SG.key == y:
                return SG
            SG = SG.next
        return None
    def update(self, key, val):
        SG = U.find(y)
        if SG:
            SG.val = C
        return SG
    def remove(self, key):
        SG = U.find(y)
        if SG:
            SG.remove()
        return SG
    def __str__(self):
        n = []
        SG = U.first()
        while SG != U.tail:
            n.append(E(SG))
            SG = SG.next
        return ', '.join(n)
    def keys(self):
        n = []
        SG = U.first()
        while SG != U.tail:
            n.append(SG.key)
            SG = SG.next
        return n