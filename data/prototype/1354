class Hash_Table:
    def __init__(self):
        self.num = 0
        self.size = 8
        self.marked = 0
        self.num_min = 1
        self.size_min = 8
        self.marked_max = 4
        self.h1 = lambda k: k % self.size
        self.h2 = lambda k: 1 + 2*(k % self.marked_max)
        self.table = [None for _ in range(self.size)]
    def probing_sequence(self, key):
        slot = self.h1(key)
        step = self.h2(key)
        for access in range(self.size):
            yield (slot, self.table[slot])
            slot = self.h1(slot + step)
    def find(self, key):
        for (slot, element) in self.probing_sequence(key):
            if element == None or element[0] == key:
                return element
        return None
    def insert(self, key, value):
        probing_sequence = self.probing_sequence(key)
        for (slot, element) in probing_sequence:
            if element == None:
                if element == None:
                    self.num += 1
                    self.marked += 1
                    self.table[slot] = (key, value)
                    if self.marked > self.marked_max:
                        self.expand()
                return
            elif element == "D":
                self.table[slot] = (key, value)
                for (slot, element) in probing_sequence:
                    if element == None:
                        self.num += 1
                        return
                    elif element[0] == key:
                        self.table[slot] = "D"
                        return
                return
            elif element[0] == key:
                self.table[slot][1] = value
                return
    def delete(self, key):
        for (slot, element) in self.probing_sequence(key):
            if element == None:
                return
            elif element[0] == key:
                self.num -= 1
                self.table[slot] = "D"
                if self.num <= self.num_min and self.size > self.size_min:
                    self.contract()
                return
    def rehash(self):
        self.num = 0
        self.marked = 0
        table = self.table
        self.table = [None for slot in range(self.size)]
        for element in table:
            if element and element != "D":
                self.insert(*element)
    def expand(self):
        self.size *= 2
        self.num_min *= 2
        self.marked_max *= 2
        self.rehash()
    def contract(self):
        self.size //= 2
        self.num_min //= 2
        self.marked_max //= 2
        self.rehash()
    def __repr__(self):
        def showItem(item):
            return "" if item == None else "DELETED" if item == "D" else item
        return "\n".join("  {}: [{}]".format(key, showItem(item)) for (key, item) in enumerate(self.table))