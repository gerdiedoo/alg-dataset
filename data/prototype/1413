class HashTable:
    def __init__(self, buckets = 11):
        self.buckets = buckets
        self.table = [[] for i in range(self.buckets)]
    def buckets_str(self):
        buckets_index = ""
        counter = 0
        for bucket in self.table:
            buckets_index += "%04d->" % counter
            pairs = []
            for key_value in bucket:
                pairs.append(":".join([str(key_value[0]), str(key_value[1])]))
            buckets_index += ", ".join(pairs) + '\n'
            counter += 1
        return buckets_index
    def __str__(self):
        b = []
        if len(self.table) == 0:
            return "{}"
        for buck in self.table:
            for key_value in buck:
                pairs = str(key_value[0]) + ":" + str(key_value[1])
                b.append(pairs)
        result = ', '.join(b)
        result = "{" + result + "}"
        if result == "":
            return "{" + result + "}"
        return result
    def get(self, key):
        index, exists, buck_num = self.bucket_indexof(key)
        if exists is False:
            return set()
        else:
            return self.table[buck_num][index][1]
    def put(self, key, value):
        index, exists, buck_num = self.bucket_indexof(key)
        if exists is True:
            index, exists, buck_num = self.bucket_indexof(key)
            self.table[buck_num][index] = (key, set([value]))
            return None
        elif exists is False:
            self.table[buck_num].append((key, value))
            return None
    def bucket_indexof(self, key):
        tuple_index = 0
        if type(key) == int:
            hashcode = key
        elif type(key) == str:
            hashcode = 0
            for i in key:
                hashcode = hashcode * 31 + ord(i)
        else:
            hashcode = None
        buck_number = hashcode % len(self.table)
        buck = self.table[buck_number]
        exists = False
        for elem in buck:
            if key == elem[0]:
                tuple_index = buck.index(elem)
                exists = True
        return tuple_index, exists, buck_number
    def __setitem__(self, key, item):
        self.put(key, item)
    def __getitem__(self, key):
        return self.get(key)