package dev.jeffreybender.sort;
import java.util.Comparator;
public final class QuickSort {
    private QuickSort() {
    }
    public static <T> void sort(T[] array, Comparator<? super T> comparator) {
        if (array.length <= 1) {
            return;
        }
        if (comparator == null) {
            comparator = SortUtils.getDefaultComparator();
        }
        quickSort(array, 0, array.length - 1, comparator);
    }
    public static <T extends Comparable<? super T>> void sort(T[] array) {
        sort(array, null);
    }
    private static <T> void quickSort(T[] array, int low, int high, Comparator<T> comparator) {
        if (low < high) {
            int partitionIndex = partition(array, low, high, comparator);
            quickSort(array, low, partitionIndex, comparator);
            quickSort(array, partitionIndex + 1, high, comparator);
        }
    }
    private static <T> int partition(T[] array, int low, int high, Comparator<T> comparator) {
        T pivot = array[low + ((high - low) / 2)];
        int left = low - 1;
        int right = high + 1;
        while (left < right) {
            do {
                left++;
            } while (comparator.compare(array[left], pivot) < 0);
            do {
                right--;
            } while (comparator.compare(array[right], pivot) > 0);
            if (left < right) {
                SortUtils.swap(array, left, right);
            }
        }
        return right;
    }
}