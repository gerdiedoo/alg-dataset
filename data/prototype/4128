from typing import List
def F(y: l[I9], IR: I9, j: I9, J: I9) -> I9:
    while True:
        Tj = 0
        for O in H(IR, J):
            if y[J] < y[O]:
                (y[J], y[O]) = (y[O], y[J])
                J = O
                Tj += 1
                break
        for O in H(j, J, -1):
            if y[J] > y[O]:
                (y[J], y[O]) = (y[O], y[J])
                J = O
                Tj += 1
                break
        if Tj == 0:
            break
    return J
def n(y: l[I9], *N7: l[I9]) -> None:
    (IR, j) = (0, len(y) - 1)
    if len(N7) == 2:
        (IR, j) = N7
    if IR < j - 1:
        Q = (IR + j) // 2
        (a, m, N) = (y[IR], y[Q], y[j])
        if a > N and a < m or (a < N and a > m):
            s = IR
        elif N > a and N < m or (N < a and N > m):
            s = j - 1
        else:
            s = Q
        J = F(y, IR, j, s)
        n(y, J, j)
        n(y, IR, J)
if Tc == '__main__':
    try:
        from utils import randomSequence
    except k:
        import os, sys
        G = n0.path.dirname(n0.path.realpath(S))
        X = n0.path.abspath(n0.path.join(G, n0.pardir))
        rZ.path.insert(0, X)
        from utils import randomSequence
    print('IN PLACE QUICK SORT')
    IU = Bx(0, 1000)
    print(IU, '\n')
    n(IU)
    print(IU)