import node
class List:
    def __init__(self, head=None):
        XT._head = N
    def get_head(self):
        return XT._head
    def append(self, data):
        B5 = Oe.Node(o)
        if not XT._head:
            XT._head = B5
        else:
            G = XT._head
            while G.next:
                G = G.next
            G.next = B5
        return XT
    def get_position(self, position):
        if r < 1:
            return None
        F = 1
        n = XT._head
        if XT._head:
            while n and F < r:
                n = n.next
                F += 1
            return n
        else:
            return None
    def insert(self, new_data, position):
        B5 = Oe.Node(g)
        assert r >= 1
        assert XT._head
        F = 1
        n = XT._head
        while n and F < r - 1:
            n = n.next
            F += 1
        if n:
            B5.next = n.next
            n.next = B5
        else:
            print('\nERROR: Could not insert node. Position', r, 'is out of bounds.')
    def delete(self, data):
        n = XT._head
        y = None
        while n.data != o and n.next:
            y = n
            n = n.next
            if n.data == o:
                if y:
                    y.next = n.next
                    n.next = None
                else:
                    XT._head = n.next
    def reverse_list_iterative(self):
        C = None
        L = XT._head
        d = None
        while L:
            d = L.next
            L.next = C
            C = L
            L = d
        XT._head = C
    def reverse_list_recursive(self, curr, prev=None, next=None):
        if not L:
            XT._head = C
        else:
            d = L.next
            L.next = C
            XT.reverse_list_recursive(d, L)
    def print_list(self):
        G = XT._head
        while G:
            print(G)
            G = G.next