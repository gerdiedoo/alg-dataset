import java.util.*;
public class Dijkstra {
    public static Integer[] dijkstra(int[][] adj, int source) {
        int n = adj.length;
        Integer[] dist = new Integer[n];
        boolean[] visited = new boolean[n];
        PriorityQueue<Node> pq = new PriorityQueue<>(n, new NodeComparator());
        for (int i = 0; i < n; i++) {
            dist[i] = Integer.MAX_VALUE;
        }
        dist[source] = 0;
        pq.add(new Node(source, 0));
        while (!pq.isEmpty()) {
            Node min = pq.poll();
            visited[min.node] = true;
            if (dist[min.node] == Integer.MAX_VALUE) break;
            for (int j = 0; j < n; j++) {
                if (adj[min.node][j] != 0) {
                    int possibleDist = dist[min.node] + adj[min.node][j];
                    if (possibleDist < dist[j]) {
                        dist[j] = possibleDist;
                        if (!visited[j])
                            pq.add(new Node(j, possibleDist));
                    }
                }
            }
        }
        return dist;
    }
    private static Integer[] dijkn2(int[][] adj, int source) {
        int n = adj.length;
        boolean[] visited = new boolean[n];
        Integer[] distance = new Integer[n];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[source] = 0;
        for (int ia = 0; ia < n; ia++) {
            int curr = Integer.MAX_VALUE; 
            int index = 0;
            for (int i = 0; i < distance.length; i++) {
                if (distance[i] < curr && !visited[i]) {
                    curr = distance[i];
                    index = i;
                }
            }
            int[] adjToCurr = new int[n];  
            for (int j = 0; j < adj[index].length; j++) { 
                if (adj[index][j] != 0) {
                    adjToCurr[j] = adj[index][j];
                }
            }
            for (int b = 0; b < adjToCurr.length; b++) { 
                if (adjToCurr[b] != 0) {
                    int idx = b;
                    int dist = adjToCurr[b];
                    distance[idx] = Math.min(distance[idx], dist + distance[index]);
                }
            }
            visited[index] = true;
        }
        return distance;
    }
    private static class Node {
        public int node;
        public int cost;
        public Node(int node, int cost) {
            this.node = node;
            this.cost = cost;
        }
    }
    private static class NodeComparator implements Comparator<Node> {
        @Override
        public int compare(Node node1, Node node2) {
            return node1.cost - node2.cost;
        }
    }
}