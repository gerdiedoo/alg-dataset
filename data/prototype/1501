class Node:
	def __init__(self, data=None):
		self.data = data
  self.next = None
  self.prev = None
 def getData(self):
		return self.data
 def getNext(self):
		return self.next
 def getPrev(self):
		return self.prev
 def setData(self, data):
		self.data = data
 def setNext(self, next):
		self.next = next
 def setPrev(self, prev):
		self.prev = prev
class DoublyLinkedList:
	def __init__(self):
		self.head = None
 def print(self):
		if self.head is None:
			print("linked list is empty, nothing to print")
   return
  current = self.head
  while current:
			print(current.data)
   current = current.next
 def reverse_print(self):
		if self.head is None:
			print("linked list is empty, nothing to print")
   return
  current = self.head
  while current.next != None:
			current = current.next
  while current !=None:
			print(current.data)
   current = current.prev
 def add_at_the_begining(self, data):
		node = Node(data)
  if self.head is None: 
			self.head = node
   return
  else:
			node.next = self.head
   self.head.prev = node
   self.head = node
 def add_at_the_end(self, data):
		node = Node(data)
  if self.head is None: 
			self.head = node
   return
  else:
			current = self.head
   while current.next != None:
				current = current.next
   current.next = node
   node.prev = current
 def add_at_nth_position(self, data, pos):
		node = Node(data)
  if pos <= 0:
			print("Invalid position, it can not be less than or equal to 0")
   return
  elif pos == 1: 
				self.add_at_the_begining(data)
  else:
			current = self.head
   i=1
   while i < pos-1 and current != None: 
				current = current.next
    i = i+1
   if current is None: 
				print("Invalid position!!!")
    return
   elif current.next is None:
				self.add_at_the_end(data)
   else:
				node.next = current.next
    node.prev = current
    current.next.prev = node
    current.next = node
 def remove_at_the_begining(self):
		if self.head is None:
			print("List is empty, nothing to remove.")
  elif self.head.next is None: 
			temp = self.head
   self.head = None
   print("Last node of the list has been removed. List is empty now!!!")
  else:
			temp = self.head
   self.head = self.head.next 
   self.head.prev = None 
   temp.next = None 
   print("Node has been removed")
 def remove_at_the_end(self):
		if self.head is None:
			print("List is empty, nothing to remove.")
  elif self.head.next == None: 
			temp = self.head
   self.head = None
   print("Last node of the list has been removed. List is empty now!!!")
  else:
			temp = self.head
   while temp.next != None: 
				temp = temp.next
   temp.prev.next = None 
   temp.prev = None 
   print("Node has been removed")
 def remove_at_nth_position(self, pos):
		if pos == 0:
			print("Invalid postion")
   return
  elif pos == 1: 
			self.remove_at_the_begining()
  else:
			current = self.head
   i=1
   while i < pos and current != None:
				current = current.next
    i = i+1
   if current is None:
				print("Invalid position!!!")
   elif current.next is None: 
				self.remove_at_the_end()
   else:
				current.prev.next = current.next
    current.next.prev = current.prev
    current.prev = None 
    current.next = None 
    print("Node has been removed")
 def print_recursion(self, p):
		if p == None:
			return
  print(p.data)
  self.print_recursion(p.next)
 def reverse_print_recursion(self, p):
		if p == None:
			return
  self.reverse_print_recursion(p.next)
  print(p.data)
 def reverse_using_recursion(self,p): 
		if p.next == None: 
			self.head = p
   return
  self.reverse_using_recursion(p.next) 
  q = p.next
  q.prev = q.next 
  q.next = p
  p.next = None
mylist = DoublyLinkedList()
mylist.add_at_the_end(2)
mylist.add_at_the_end(4)
mylist.add_at_the_end(6)
mylist.add_at_the_end(8)
mylist.add_at_the_end(10)
mylist.print()
print("Reverse print:")
mylist.reverse_print()