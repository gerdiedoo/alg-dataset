package com.roche.andy.datastructures;
import java.util.ArrayList;
public class HashTable<K, V> {
    private class HashNode {
        K key;
        V value;
        HashNode next;
        HashNode(K key, V value) {
            this.key = key;
            this.value = value;
        }
    }
    @SuppressWarnings("FieldCanBeLocal")
    private static final double loadThreshold = 0.7;
    private ArrayList<HashNode> bucketArray;
    private int numBuckets;
    private int size;
    public HashTable() {
        bucketArray = new ArrayList<>();
        numBuckets = 10;
        size = 0;
        for (int i = 0; i < numBuckets; i++) {
            bucketArray.add(null);
        }
    }
    public int size() {
        return size;
    }
    public boolean isEmpty() {
        return size() == 0;
    }
    public V get(K key) {
        int bucketIndex = getBucketIndex(key);
        HashNode head = bucketArray.get(bucketIndex);
        while (head != null) {
            if (head.key.equals(key)) {
                return head.value;
            }
            head = head.next;
        }
        return null;
    }
    public void add(K key, V value) {
        int bucketIndex = getBucketIndex(key);
        HashNode head = bucketArray.get(bucketIndex);
        while (head != null) {
            if (head.key.equals(key)) {
                head.value = value;
                return;
            }
            head = head.next;
        }
        size++;
        head = bucketArray.get(bucketIndex);
        HashNode newNode = new HashNode(key, value);
        newNode.next = head;
        bucketArray.set(bucketIndex, newNode);
        if ((1.0 * size) / numBuckets >= loadThreshold) {
            ArrayList<HashNode> temp = bucketArray;
            bucketArray = new ArrayList<>();
            numBuckets = 2 * numBuckets;
            size = 0;
            for (int i = 0; i < numBuckets; i++) {
                bucketArray.add(null);
            }
            for (HashNode headNode : temp) {
                while (headNode != null) {
                    add(headNode.key, headNode.value);
                    headNode = headNode.next;
                }
            }
        }
    }
    public V remove(K key) {
        int bucketIndex = getBucketIndex(key);
        HashNode head = bucketArray.get(bucketIndex);
        HashNode prev = null;
        while (head != null) {
            if (head.key.equals(key)) {
                break;
            }
            prev = head;
            head = head.next;
        }
        if (head == null) {
            return null;
        }
        size--;
        if (prev != null) {
            prev.next = head.next;
        } else {
            bucketArray.set(bucketIndex, head.next);
        }
        return head.value;
    }
    private int getBucketIndex(K key) {
        int hashCode = key.hashCode();
        return hashCode % numBuckets;
    }
}
class HTTest {
    public static void main(String[] args) {
        HashTable<String, Integer> hashTable = new HashTable<>();
        hashTable.add("this", 1);
        hashTable.add("coder", 2);
        hashTable.add("this", 4);
        hashTable.add("hi", 5);
        System.out.println("Hash table size: " + hashTable.size());
        System.out.println("Key for \"this\": " + hashTable.get("this"));
        System.out.println("Remove \"this\": " + hashTable.remove("this"));
        System.out.println("Remove \"this\": " + hashTable.remove("this"));
        System.out.println("Hash table size: " + hashTable.size());
        System.out.println("Is hash table empty: " + hashTable.isEmpty());
    }
}