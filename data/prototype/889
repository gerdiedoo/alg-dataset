package mergesort;
public class MergeSort<T extends Comparable>
{
    private final T[] items, aux;
    public MergeSort(T[] items)
    {
        this.items = items;
        this.aux = (T[]) new Comparable[items.length];
    }
    public void sort()
    {
        this.sort(0, this.items.length - 1);
    }
    private void sort(int low, int high)
    {
        if (low >= high)
        {
            return;
        }
        int mid = low + ((high - low) / 2);
        this.sort(low, mid);
        this.sort(mid + 1, high);
        this.merge(low, mid, high);
    }
    private void merge(int low, int mid, int high)
    {
        int i = low;         
        int j = low;         
        int k = mid + 1;     
        for (int x = low; x <= high; x++)
        {
            this.aux[x] = this.items[x];
        }
        while (j <= mid || k <= high)
        {
            if (j > mid)
            {
                this.items[i] = this.aux[k++];
            }
            else if (k > high)
            {
                this.items[i] = this.aux[j++];
            }
            else if (this.aux[j].compareTo(this.aux[k]) > 0)
            {
                this.items[i] = this.aux[k++];
            }
            else
            {
                this.items[i] = this.aux[j++];
            }
            i++;     
        }
    }
    public T[] getSortedItems()
    {
        return this.items;
    }
}