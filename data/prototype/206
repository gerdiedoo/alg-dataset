class NodeIterator:
      def __init__(self,listHead):
          self._currNode = listHead
      def __iter__(self):
          return self
      def next(self):
          if self._currNode is None:
             raise StopIteration
          else:
             item = self._currNode.info
             self._currNode = self._currNode.next
          return item  
class Node:
      def __init__(self,info):
          self.info = info 
          self.next = None 
class LinkedList:
      def __init__(self):
          self._head = None
          self._size = 0
      def __len__(self):
          return self._size
      def add(self,item):
          newNode = Node(item)
          newNode.next = self._head
          self._head = newNode
          self._size += 1   
          return None
      def remove(self,what):
          predNode = None
          currNode = self._head
          while currNode is not None and currNode.info != what:
                predNode = currNode
                currNode = currNode.next
          assert currNode is not None, "The item must be in the list"
          self._size -=1
          if currNode == self._head:
             self._head = currNode.next
          else:
             predNode.next = currNode.next
          return currNode.info
      def __contains__(self,search):
          currNode = self._head
          while currNode is not None and currNode.info != search:
                currNode = currNode.next
          return currNode is not None
      def __iter__(self):
          return NodeIterator(self._head) 
      def __str__(self): 
          out = '[LinkedList: '
          curr = self._head
          while curr != None:
               out += str(curr.info) + " "
               curr = curr.next
          out += ']' 
          return out
      def reverse(self):
          curr, prev = self._head, None
          while curr:
               next, curr.next = curr.next, prev
               prev, curr = curr, next
          self._head = prev
l = LinkedList()
l.add(1);         
l.add(2);
l.add(3);
l.add(5);
l.add(7);
l.add(8);
l.add(41);
for i in l:
    print i
if 12 in l:
   print '12 exits'
else:
   print '12 not exist' 
print '-----------'
print '-----------'
for i in l:
    print i
print "Length of list:", len(l)
l.reverse()
print l