from typing import List
def h(s: q[z], W: z, L: z, j: z) -> None:
    TZ = L + 1
    if s[L] <= s[TZ]:
        return
    while W <= L and TZ <= j:
        if s[W] <= s[TZ]:
            W += 1
        else:
            e = s[TZ]
            O = TZ
            while O != W:
                s[O] = s[O - 1]
                O -= 1
            s[W] = e
            W += 1
            L += 1
            TZ += 1
def X(s: q[z], *Re: q[z]) -> None:
    if len(Re) == 2:
        (Sk, F) = Re
    else:
        (Sk, F) = (0, len(s) - 1)
    if F > Sk:
        G = Sk + (F - Sk) // 2
        X(s, Sk, G)
        X(s, G + 1, F)
        h(s, Sk, G, F)
if o == '__main__':
    try:
        from utils import randomSequence
    except ML:
        import os, sys
        R = f.path.dirname(f.path.realpath(w))
        T = f.path.abspath(f.path.join(R, f.pardir))
        D.path.insert(0, T)
        from utils import randomSequence
    print('MERGE SORT')
    pi = [7, 3, 6, 9, 4, 8, 1, 0, 5, 2]
    print(pi, '\n')
    X(pi)
    print(pi)