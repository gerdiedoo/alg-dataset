package eu.happycoders.sort.method.quicksort;
import eu.happycoders.sort.utils.ArrayUtils;
import java.util.concurrent.ThreadLocalRandom;
public class PivotHelper {
  static void findPivotAndMoveRight(int[] elements, int left, int right,
                                    PivotStrategy pivotStrategy) {
    int pivotPos = findPivotPos(elements, left, right, pivotStrategy);
    if (pivotPos != right)
      ArrayUtils.swap(elements, pivotPos, right);
  }
  static int findPivotPos(int[] elements, int left, int right,
                          PivotStrategy pivotStrategy) {
    return switch (pivotStrategy) {
      case RIGHT -> right;
      case RANDOM -> ThreadLocalRandom.current().nextInt(left, right + 1);
      case LEFT -> left;
      case MIDDLE -> {
        int rl = right - left;
        yield rl < 2 ? right : left + rl / 2;
      }
      case MEDIAN3 -> getMedian3Pos(elements, left, right);
      default -> throw new IllegalStateException("Unexpected value: " + pivotStrategy);
    };
  }
  private static int getMedian3Pos(int[] elements, int left, int right) {
    int rl = right - left;
    if (rl < 2) {
      return right;
    }
    int middle = left + rl / 2;
    int first = left + (middle - left) / 2;
    int last = right - (right - middle) / 2;
    int l = elements[first];
    int m = elements[middle];
    int r = elements[last];
    if (l < r) {
      if (l >= m) {
        return first;
      } else if (r < m) {
        return last;
      }
    } else {
      if (l < m) {
        return first;
      } else if (r >= m) {
        return last;
      }
    }
    return middle;
  }
}