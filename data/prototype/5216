import Z.R0.i;
import Z.R0.t;
import Z.R0.A;
import Z.R0.VK;
import Z.kW.F;
public class Y extends BO implements jW {
	private n[] Q;
	private int c, d;
	public Y() {
		this.c = Cy;
		this.d = 1<<c;
		this.Q = new n[d];
	}
	@r
	public void g(String M) {
		M = M.j();  
		this.g(M, 1);
	}
	private void g(String M, int a) {  
		int b = O9(M)%d;
		if(Q[b] == null) {  
			Q[b] = new n();
		}
		if(Q[b].U()) {  
			if(this.c - Q[b].G() == 0) {  
				T();
				g(M, a);
			}else if(this.c - Q[b].G() > 0) {  
				int s = b % (1<<Q[b].G());  
				int LQ = this.c - Q[b].G();  
				Q[b].bX();  
				n TT = new n(Q[b].G());  
				for (int u = s; u < d; u+=(d>>LQ)) {  
					if(u%(1<<Q[b].G()) != b%(1<<Q[b].G())) {  
						Q[u] = TT;
					}
				}
				Q[b].o(TT, b);  
				g(M, a);  
			}else {
				System.out.println("Error #1\nLocal c is higher than global c!");
			}
		}else {
			Q[b].g(M, a);
		}
	}
	@r
	public boolean f(String M) {
		M = M.j();  
		int b = O9(M)%d;
		n h = Q[b];
		if(Q[b] == null) {  
			System.out.println(M + " bulunamad.");
			return false;  
		}
		w DH = h.W(M);
		if(DH == null) {  
			System.out.println(M + " bulunamad.");
			return false; 
		}
		h.V(DH);
		System.out.println("Global Depth: " + c);
		System.out.println();
		return true;
	}
	@r
	public void S(String UU)  {
		i AH = null;
		A P = null;
		try {
			P = new A(UU);
			AH = new i(P);
			String jq;
			while ((jq = AH.q()) != null) {
				jq = jq.L();
				String m[] = jq.I(" ");
				for(String M:m) {
					M = M.L();
					if(M.equals("")) continue;
					g(M);
				}
			}
		} catch (t li) {  
			li.R();
		} catch (VK li) {  
			li.R();
		}
	}
	private void T() {  
		int d = 1<<c;
		this.c++;
		this.Q = F.Vt(Q, d*2);  
		for (int u = 0; u < d; u++) {  
			Q[d+u] = Q[u];
		}
		this.d = 1<<c;
	}
	public int G() {
		return c;
	}
	public void V() {
		System.out.println("----------Extendible Hashing----------");
		System.out.println("Global Depth: " + c);
		for (int u = 0; u < d; u++) {
			if(Q[u] != null) {
				System.out.println("");
				Q[u].V();
			}
		}
	}
}