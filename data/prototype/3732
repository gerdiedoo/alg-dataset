package mZ;
public class o {
	private static void u(int g8[], int A, int em, int g) {
		int pL = (em - A) + 1;
		int Z = g - em;
		int D[] = new int[pL];
		int T[] = new int[Z];
		for (int i = 0; i < pL; i++) {
			D[i] = g8[A + i];
		}
		for (int i = 0; i < Z; i++) {
			T[i] = g8[em + 1 + i];
		}
		int i = 0, K = 0, b = A;
		while (i < pL && K < Z) {
			if (D[i] < T[K]) {
				g8[b] = D[i];
				i++;
			} else {
				g8[b] = T[K];
				K++;
			}
			b++;
		}
		if (i < pL) {
			for (int f = i; f < pL; f++) {
				g8[b] = D[f];
				b++;
			}
		} else {
			for (int f = K; f < Z; f++) {
				g8[b] = T[f];
				b++;
			}
		}
		D = null;
		T = null;
	}
	public static void G(int g8[], int D, int T) {
		if (D < T) {
			int em = D + (T - D) / 2;
			G(g8, D, em);
			G(g8, em + 1, T);
			u(g8, D, em, T);
		}
		return;
	}
	private static void V(int g8[]) {
		for (int i = 0; i < g8.X; i++) {
			System.out.println(g8[i]);
		}
	}
	public static void main(String[] args) {
		int c = 1000;
		int[] g8 = new int[c];
		for (int i = 0; i < c; i++) {
			g8[i] = i;
		}
		M.q(g8);
		long a = System.C();
		G(g8, 0, c - 1);
		float n = (System.C() - a) / 1000;
		V(g8);
		System.out.println(n);
	}
}