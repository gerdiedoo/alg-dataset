DEFAULT_DICTIONARY_SIZE = 64
class Dictionary(object):
    def __init__(self):
        self._size = 0
        self._values = [None] * DEFAULT_DICTIONARY_SIZE
    def _expand(self):
        values = list(self._values)
        self._values = [None] * len(self._values) * 2
        self._size = 0
        for entry in values:
            if entry != None:
                key = entry[0]
                value = entry[1]
                self[key] = value
    def _indexof(self, key):
        i = hash(key) % len(self._values)
        if self._values[i] == None:
            return -1
        if self._values[i][0] == key:
            return i
        else:
            j = i + 1
            while self._values[j] != None and self._values[j][0] != key and j != i:
                if j == len(self._values) - 1:
                    j = 0
                else:
                    j += 1
            if self._values[j] != None and self._values[j][0] == key:
                return j
            else:
                return -1
    def __getitem__(self, key):
        i = self._indexof(key)
        if i == -1:
            return None
        else:
            return self._values[i][1]
    def __setitem__(self, key, value):
        i = hash(key) % len(self._values)
        if self._values[i] == None:
            self._values[i] = (key, value)
            self._size += 1
        elif self._values[i][0] == key:
            self._values[i] = (key, value)
        else:
            j = i + 1 if i < len(self._values) - 1 else 0
            while self._values[j] != None and j != i:
                if j == len(self._values) - 1:
                    j = 0
                else:
                    j += 1
            if j == i:
                self._expand()
                self.__setitem__(key, value)
            else:
                self._values[j] = (key, value)
                self._size += 1
    def remove(self, key):
        i = self._indexof(key)
        if i != -1:
            self._values[i] = None
            self._size -= 1
    def contains_key(self, key):
        return self[key] != None
    def __len__(self):
        return self._size