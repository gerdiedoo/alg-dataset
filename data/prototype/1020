import time
numbers = []
def partition(list, start, end):
    pivot = list[end]                          
    bottom = start-1                           
    top = end                                  
    done = 0
    while not done:                            
        while not done:                        
            bottom = bottom+1                  
            if bottom == top:                  
                done = 1                       
                break
            if list[bottom] > pivot:           
                list[top] = list[bottom]       
                break                          
        while not done:                        
            top = top-1                        
            if top == bottom:                  
                done = 1                       
                break
            if list[top] < pivot:              
                list[bottom] = list[top]       
                break                          
    list[top] = pivot                          
    return top                                 
def quicksort(list, start, end):
    if start < end:                            
        split = partition(list, start, end)    
        quicksort(list, start, split-1)        
        quicksort(list, split+1, end)
    else:
        return
def read_from_file(filepath):
    del numbers[:] 
    file = open(filepath, "r")
    for i in file:
        numbers.append(int(i))
def print_first_ten_number():
    print numbers[0:9]
def print_last_ten_number():
    print numbers[len(numbers)-10:len(numbers)]
def append_result_to_file(str):
    with open("results.txt", "a") as result:
        result.write(str+"\n")
        result.close()
if __name__=="__main__":                       
    read_from_file("../1k.lst")
    start = time.clock()
    quicksort(numbers,0,len(numbers)-1)
    end = time.clock()
    append_result_to_file("1k = " + str(end-start))
    read_from_file("../10k.lst")
    start = time.clock()
    quicksort(numbers,0,len(numbers)-1)
    end = time.clock()
    append_result_to_file("10k = " + str(end-start))
    read_from_file("../100k.lst")
    start = time.clock()
    quicksort(numbers,0,len(numbers)-1)
    end = time.clock()
    append_result_to_file("100k = " + str(end-start))
    read_from_file("../1m.lst")
    start = time.clock()
    quicksort(numbers,0,len(numbers)-1)
    end = time.clock()
    append_result_to_file("1m = " + str(end-start))
    read_from_file("../2m.lst")
    start = time.clock()
    quicksort(numbers,0,len(numbers)-1)
    end = time.clock()
    append_result_to_file("2m = " + str(end-start))     
    read_from_file("../4m.lst")
    start = time.clock()
    quicksort(numbers,0,len(numbers)-1)
    end = time.clock()
    append_result_to_file("4m = " + str(end-start))
    read_from_file("../8m.lst")
    start = time.clock()
    quicksort(numbers,0,len(numbers)-1)
    end = time.clock()
    append_result_to_file("8m = " + str(end-start))
    read_from_file("../10m.lst")
    start = time.clock()
    quicksort(numbers,0,len(numbers)-1)
    end = time.clock()
    append_result_to_file("10m = " + str(end-start))    