from bisect import bisect_left
def o(L, u):
    B = Fb(L, u)
    if B != len(L) and L[B] == u:
        return B
    return -1
def f(L, u, l, w):
    assert 0 <= l <= w < len(L)
    if w == l:
        if L[l] == u:
            return l
        return -1
    r = (l + w) // 2
    P = L[r]
    if P == u:
        return r
    if P < u:
        if w > r:
            return f(L, u, r + 1, w)
        return -1
    if P > u:
        if l < r:
            return f(L, u, l, r - 1)
        return -1
def W():
    m = [1, 2, 3, 4, 6, 7, 9]
    assert f(m, 5, 0, 5) == -1
    assert o(m, 5) == -1
    D = [-1, 0, 1, 5, 6, 9, 15, 15]
    assert o(D, 15) == 6
    assert f(D, 15, 0, 7) != -1
    F = [-1, 0, 0, 0, 0, 1]
    assert o(F, 0) == 1
    assert f(F, 0, 0, 5) != -1
if N == '__main__':
    W()