import copy
import sort_tools
def g(I, D, V):
    z = I[D]
    I[D] = I[V]
    I[V] = z
def f(I, u, y):
    n = (y - u) // 2 + u
    if I[u] > I[n]:
        g(I, u, n)
    if I[u] > I[y]:
        g(I, u, y)
    if I[n] > I[y]:
        g(I, n, y)
    g(I, n, y - 1)
    return y - 1
def gc(I, u, y):
    M = f(I, u, y)
    while u < M:
        if I[u] > I[M]:
            z = I[u]
            I[u] = I[M - 1]
            I[M - 1] = I[M]
            I[M] = z
            M -= 1
        else:
            u += 1
    return M
def S(I, u, y):
    if u < y:
        n = gc(I, u, y)
        S(I, u, n - 1)
        S(I, n + 1, y)
@E.timeit('quick')
def v(I):
    S(I, 0, len(I) - 1)
def R():
    I = E.build_data_set(5)
    r = L.deepcopy(I)
    v(r)
if W == '__main__':
    R()