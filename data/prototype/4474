def l(Fd, yC, f):
    assert 0 <= yC <= f < len(Fd)
    if yC == f:
        return
    A = Fd[yC]
    (Fd[yC], Fd[f]) = (Fd[f], Fd[yC])
    I = yC
    tP = yC
    while tP < f:
        if Fd[tP] <= A:
            (Fd[I], Fd[tP]) = (Fd[tP], Fd[I])
            I += 1
        tP += 1
    (Fd[I], Fd[f]) = (Fd[f], Fd[I])
    if I > yC:
        l(Fd, yC, I - 1)
    if f > I + 1:
        l(Fd, I + 1, f)
def JG():
    T = [4, 1, 2, 3, 9]
    K = [1]
    d4 = [2, 2, 1, -1, 0, 4, 5, 2]
    l(T, 0, 4)
    assert T == [1, 2, 3, 4, 9]
    l(K, 0, 0)
    assert K == [1]
    l(d4, 0, 7)
    assert d4 == [-1, 0, 1, 2, 2, 2, 4, 5]
if i3 == '__main__':
    JG()