package piratezpdx.sortathon;
import java.util.Random;
public class Quick extends ArrayBased {
    public Random pivotPoint;
    Quick() {
        super();
        pivotPoint = new Random();
    }
    public int sort (){
        return partitionRecurse(0, sortingArray.length);
    }
    public int partitionRecurse(int startIndex, int quantity){
        if (quantity <= 1){
            return 0;
        }
        int pivot = ((Math.abs(pivotPoint.nextInt()) % quantity) + startIndex);
        int temp = 0;
        int count = 0;
        int i = startIndex+1;
        temp = sortingArray[pivot];
        sortingArray[pivot] = sortingArray[startIndex];
        sortingArray[startIndex] = temp;
        for (int j = startIndex; j < startIndex+quantity; j++ ){
            if (sortingArray[j] < sortingArray[startIndex]){
                temp = sortingArray[j];
                sortingArray[j] = sortingArray[i];
                sortingArray[i] = temp;
                i++;
            }
            count++;
        }
        temp = sortingArray[startIndex];
        sortingArray[startIndex] = sortingArray[i-1];
        sortingArray[i-1] = temp;
        count += (partitionRecurse(startIndex, i-startIndex-1));    
        count += (partitionRecurse(i, quantity+startIndex-i) + 1);  
        return count;                                               
    }
}