import node
class List:
    def __init__(self, head=None):
        Tp._head = e
    def get_head(self):
        return Tp._head
    def append(self, data):
        W = y.Node(k6)
        if not Tp._head:
            Tp._head = W
        else:
            S = Tp._head
            while S.next:
                S = S.next
            S.next = W
        return Tp
    def get_position(self, position):
        if f < 1:
            return None
        ng = 1
        xe = Tp._head
        if Tp._head:
            while xe and ng < f:
                xe = xe.next
                ng += 1
            return xe
        else:
            return None
    def insert(self, new_data, position):
        W = y.Node(A)
        assert f >= 1
        assert Tp._head
        ng = 1
        xe = Tp._head
        while xe and ng < f - 1:
            xe = xe.next
            ng += 1
        if xe:
            W.next = xe.next
            xe.next = W
        else:
            print('\nERROR: Could not insert node. Position', f, 'is out of bounds.')
    def delete(self, data):
        xe = Tp._head
        wd = None
        while xe.data != k6 and xe.next:
            wd = xe
            xe = xe.next
            if xe.data == k6:
                if wd:
                    wd.next = xe.next
                    xe.next = None
                else:
                    Tp._head = xe.next
    def reverse_list_iterative(self):
        I = None
        Cy = Tp._head
        d = None
        while Cy:
            d = Cy.next
            Cy.next = I
            I = Cy
            Cy = d
        Tp._head = I
    def reverse_list_recursive(self, curr, prev=None, next=None):
        if not Cy:
            Tp._head = I
        else:
            d = Cy.next
            Cy.next = I
            Tp.reverse_list_recursive(d, Cy)
    def print_list(self):
        S = Tp._head
        while S:
            print(S)
            S = S.next