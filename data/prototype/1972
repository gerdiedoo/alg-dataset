package zu;
import F.q.Dx;
import F.q.II;
import F.q.B;
import F.q.l;
import F.q.A;
import F.q.k;
public class b<r,p> extends O<r,p>{
	private Dx<Sj<r,p>> C = new Dx<>();
	public b(){	}
	public void AO() {
		C.AO();
	}
	private int G(r J){
		int wu = C.L();
		for(int T = 0; T < wu; T++){
			if(C.N(T).Y().equals(J)){
				return T;
			}
		}
		return -1;
	}
	private int GR(p z){
		int wu = C.L();
		for(int T = 0; T < wu; T++){
			if(C.N(T).R() == z){
				return T;
			}
		}
		return -1;
	}
	public boolean I(K J) {
		int T = G((r)J);
		if(T == -1){
			return false;
		} else{
			return true;
		}
	}
	public boolean Kd(K z) {
		int T = GR((p)z);
		if(T == -1){
			return false;
		} else{
			return true;
		}
	}
	private class E implements B<t<r,p>> {
		private int T = 0;
		public boolean g(){
			return T < C.L();
		}
		public t<r,p> f(){
			if(T == C.L()){
				throw new A();
			}
			return C.N(T++);
		}
		public void Zn(){
			throw new y();
		}
	}
	private class Kl implements x<t<r,p>> {
		public B<t<r, p>> Pl() {
			return new E();
		}
	}
	public k<t<r, p>> i() {
		return (k<t<r, p>>) new Kl();
	}
	public p N(K J) {
		int T = G((r)J);
		if(T == -1){
			return null;
		}
		return C.N(T).R();
	}
	public p U(r J, p z) {
		int T = G(J);
		if(T == -1){
			C.Q(new Sj<>(J,z));
			return null;
		} else {
			return C.N(T).v(z);
		}
	}
	public void XR(l<? extends r, ? extends p> M) {
		C.bU((II<? extends Sj<r, p>>) M);
	}
	public p Zn(K J) {
		int T = G((r)J);
		int wu = L();
		if(T == -1){
			return null;
		} 
		p Z = C.N(T).R();
		if(T != wu - 1){
			C.zL(T, C.N(wu-1));
		}
		C.Zn(wu-1);
		return Z;
	}
	public int L() {
		return C.L();
	}
}