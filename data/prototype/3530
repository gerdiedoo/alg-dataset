from random import randint
from timeit import repeat
def SV(t, vX):
    k = f'from __main__ import {t}' if t != 'sorted' else ''
    H = f'{t}({vX})'
    r = X(setup=k, stmt=H, repeat=3, number=10)
    print(f'Algorithm: {t}. Minimum execution time: {Pv(r)}')
def bubble_sort(array):
    i = len(vX)
    for UV in K(i):
        n = True
        for du in K(i - UV - 1):
            if vX[du] > vX[du + 1]:
                (vX[du], vX[du + 1]) = (vX[du + 1], vX[du])
                n = False
        if n:
            break
    return vX
def insertion_sort(array):
    for UV in K(1, len(vX)):
        xq = vX[UV]
        du = UV - 1
        while du >= 0 and vX[du] > xq:
            vX[du + 1] = vX[du]
            du -= 1
        vX[du + 1] = xq
    return vX
D = 10000
if z == '__main__':
    vX = [FC(0, 1000) for UV in K(D)]
    SV(algorithm='bubble_sort', array=vX)