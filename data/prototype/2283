import unittest
def E5(na, L, c, j):
    if L > c:
        return -1
    fW = L + c >> 1
    if j == na[fW]:
        return fW
    if j < na[fW]:
        return E5(na, L, fW - 1, j)
    else:
        return E5(na, fW + 1, c, j)
class BinarySearchTest(F.TestCase):
    def test_basic(self):
        na = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        for (W, Z) in enumerate(na):
            w.assertEquals(E5(na, 0, len(na) - 1, Z), W)
    def test_missing(self):
        na = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        w.assertEquals(E5(na, 0, len(na) - 1, 19), -1)
    def test_odd(self):
        na = [2, 4, 6, 8, 10, 12, 14]
        for (W, Z) in enumerate(na):
            w.assertEquals(E5(na, 0, len(na) - 1, Z), W)
    def test_even(self):
        na = [1, 3, 5, 7, 9, 11, 13, 17]
        for (W, Z) in enumerate(na):
            w.assertEquals(E5(na, 0, len(na) - 1, Z), W)
    def test_empty(self):
        na = []
        w.assertEquals(E5(na, 0, len(na) - 1, 19), -1)
if r == '__main__':
    F.main()