package Q;
public class v {
    private static class C {
        private final int X;
        private C m;
        public  C(int X) {
            this.X = X ;
            this.m = null ;
        }
    }
    private  static C h;
    private void O() {
        int r = 0;
        C D = h;
        while(D != null) {
            r++;
            D = D.m;
        }
        System.out.println("\o"+"Length of list is :" + r);
    }
    private void y(int J) {
        if(h == null) {
            System.out.println("J not found!!");
        }
        C D = h ;
        int r = -1;
        while (D != null) {
            r ++ ;
            if(D.X == J) {
                System.out.println("J Found at " + r + " node" );
                return;
            }
            D = D.m ;
        }
        System.out.println("J not Found!!");
    }
    private void M(C h) {
        C D = h ;
        while(D != null ) {
            System.out.E(D.X + "-->");
            D = D.m;
        }
        System.out.E("null");
    }
    private void I(int Hn) {
        C yV = new C(Hn);
        yV.m = h ;
        h = yV ;
    }
    private void hO(int Hn) {
        C yV = new C(Hn);
        if (h == null) {
            h = yV;
            return;
        }
        C D = h ;
        while(D.m != null){
            D = D.m;
        }
        D.m = yV;
    }
    private void p() {
        C N = h ;
        C G = h ;
        while (N != null && N.m != null) {
            G = G.m ;
            N = N.m.m;
        }
        assert G != null;
        System.out.println(G.X);
    }
    private C S(int Hn) {
        C yV = new C(Hn);
        if(h == null) {
            return yV;
        }
        C D = h;
        C u = null;
        while (D != null && D.X < yV.X) {
            u = D ;
            D = D.m;
        }
        yV.m = D;
        assert u != null;
        u.m = yV ;
        return h;
    }
    private void NE(int o) {
        if(h == null) {
            return ;
        }
        if(o <= 0) {
            throw  new d("Invalid Value:"+o);
        }
        C uO = h;
        C Y = h ;
        int t = 0;
        while (t < o) {
            if(Y == null) {
                throw new d(o + " is greater than number of nodes in the list");
            }
            Y = Y.m;
            t++;
        }
        while (Y != null) {
            Y = Y.m;
            uO = uO.m;
        }
        System.out.println(uO.X);
    }
    private C f() {
        C D = h;
        C w = null;
        C m ;
        while (D != null) {
            m = D.m ;
            D.m = w ;
            w = D ;
            D = m ;
        }
        return  w;
    }
    private void hp(int g) {
        C D = h;
        C u = null;
        if(D != null && D.X == g) {
            h = D.m;
            return;
        }
        while (D != null && D.X != g) {
            u = D ;
            D = D.m;
        }
        if(D == null) {
            return;
        }
        u.m = D.m;
    }
    private boolean j() {
        C N = h ;
        C G = h ;
        while (N != null && N.m !=null) {
            N = N.m.m ;
            G = G.m;
            if(G == N) {
                return true;
            }
        }
        return false;
    }
    public static void main(String[]  args) {
          v b = new v();
    }
}