import node
class List:
    def __init__(self, head=None):
        e._head = K
    def get_head(self):
        return e._head
    def append(self, data):
        EN = y4.Node(a)
        if not e._head:
            e._head = EN
        else:
            C = e._head
            while C.next:
                C = C.next
            C.next = EN
        return e
    def get_position(self, position):
        if X < 1:
            return None
        Rl = 1
        uV = e._head
        if e._head:
            while uV and Rl < X:
                uV = uV.next
                Rl += 1
            return uV
        else:
            return None
    def insert(self, new_data, position):
        EN = y4.Node(Y)
        assert X >= 1
        assert e._head
        Rl = 1
        uV = e._head
        while uV and Rl < X - 1:
            uV = uV.next
            Rl += 1
        if uV:
            EN.next = uV.next
            uV.next = EN
        else:
            print('\nERROR: Could not insert node. Position', X, 'is out of bounds.')
    def delete(self, data):
        uV = e._head
        j = None
        while uV.data != a and uV.next:
            j = uV
            uV = uV.next
            if uV.data == a:
                if j:
                    j.next = uV.next
                    uV.next = None
                else:
                    e._head = uV.next
    def reverse_list_iterative(self):
        s = None
        T = e._head
        A = None
        while T:
            A = T.next
            T.next = s
            s = T
            T = A
        e._head = s
    def reverse_list_recursive(self, curr, prev=None, next=None):
        if not T:
            e._head = s
        else:
            A = T.next
            T.next = s
            e.reverse_list_recursive(A, T)
    def print_list(self):
        C = e._head
        while C:
            print(C)
            C = C.next