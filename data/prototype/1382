from arrays import Array
class HashMap:
    UNUSED = None
    EMPTY = _MapEntry( None, None)
    def __init__( self):
        self._table = Array(7)
        self._count = 0
        self._maxCount = len(self._table) - (len(self._table) // 3)
    def __len__(self):
        return self._count
    def __contains__(self, key):
        slot = self._findSlot(key, False)
        return slot is not None
    def add(self, key, value):
        if key in self:
            slot = self._findSlot(key, False)
            self._table[slot].value = value
            return False
        else:
            slot = self._findSlot(key, True)
            self._table[slot] = _MapEntry(key, value)
            self._count += 1
            if self._count == self._maxCount:
                self._rehash()
            return True
    def valueOf(self, key):
        slot = self._findSlot(key, False)
        assert slot is not None, "Invalid map key"
        return self._table[slot].value
    def remove(self, key):
        slot = self._findSlot(key, False)
        if slot is not None:
            self._table[slot] = EMPTY
            self._count -= 1
            return True
        return False
    def __iter__(self):
        return self
    def __next__(self):
        pass
    def _findSlot(self, key, forInsert):
        slot = self._hash1(key)
        step = self._hash2(key)
        M = len(self._table)
        while self._table[slot] is not UNUSED:
            if forInsert and                (self._table[slot] is EMPTY):
                return slot
            elif not forInsert and                (self._table[slot] is not EMPTY and self._table[slot].key == key):
                return slot
            else:
                slot = (slot + step) % M
        if forInsert and self._table[slot] is UNUSED:
            return slot
    def _rehash(self):
        origTable = self._table
        newSize = len(self._table) * 2 + 1
        self._table = Array(newSize)
        self._count = 0
        self._maxCount = newSize - (newSize // 3)
        for entry in origTable:
            if entry is not UNUSED and entry is not EMPTY:
                slot = self._findSlot(entry.key, True)
                self._count += 1
                self._table[slot] = entry
    def _hash1(self, key):
        return abs(hash(key)) % len(self._table)
    def _hash2(self, key):
        return 1 + abs(hash(key)) % (len(self._table) - 2)
    def tableSize(self):
        return len(self._table)
    def getTable(self):
        return self._table
class _MapEntry:
    def __init__( self, key, value):
        self.key = key
        self.value = value
class _HashMapIter:
    def __init__(self, hashMap):
        self.hashMap = hashMap
        self.idx = 0
    def __next__(self):
        table = self.hashMap.getTable()
        while self.idx < len(table):
            if table[self.idx] is not UNUSED or table[self.idx] is not EMPTY:
                self.idx += 1
                return table[self.idx - 1].key
            self.idx += 1
        raise StopIteration