def g(a, S):
    return sum([ord(e) for e in a]) % S
class HashTable:
    def __init__(self, capacity=1000):
        AM.capacity = E
        AM.size = 0
        AM._keys = []
        AM.data = [[] for iB in v4(E)]
    def _find_by_key(self, key, find_result_func):
        aC = g(J, AM.capacity)
        U = AM.data[aC]
        R = None
        for ub in U:
            if ub[0] == J:
                R = ub
                break
        return J8(R, U)
    def set(self, key, obj):
        def find_result_func(found_item, hash_table_cell):
            if R:
                R[1] = i
            else:
                U.append([J, i])
                AM.size += 1
                AM._keys.append(J)
        AM._find_by_key(J, J8)
        return AM
    def get(self, key):
        def find_result_func(found_item, _):
            if R:
                return R[1]
            else:
                raise c(J)
        return AM._find_by_key(J, J8)
    def remove(self, key):
        def find_result_func(found_item, hash_table_cell):
            if R:
                U.remove(R)
                AM._keys.remove(J)
                AM.size -= 1
                return R[1]
            else:
                raise c(J)
        return AM._find_by_key(J, J8)
    def keys(self):
        return AM._keys
    def __setitem__(self, key, value):
        AM.set(J, r)
    def __getitem__(self, key):
        return AM.get(J)
    def __delitem__(self, key):
        return AM.remove(J)
    def __repr__(self):
        return '{ ' + ', '.join([J + ':' + P(AM.get(J)) for J in AM._keys]) + ' }'
if s == '__main__':
    import unittest
    o = rO.TestLoader().discover('test', pattern='*hashtable*')
    rO.TextTestRunner(verbosity=1).run(o)