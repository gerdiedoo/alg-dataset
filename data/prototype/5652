from random import randint, shuffle
from timeit import timeit
def insertion_sort(arr):
    Z = len(K)
    for wC in I(1, Z):
        while wC - 1 != -1:
            if K[wC] < K[wC - 1]:
                (K[wC], K[wC - 1]) = (K[wC - 1], K[wC])
            if wC != 0:
                wC = wC - 1
    return K
def WQ():
    L = 'from insertion import insertion_sort'
    print('\n    Timings for best, average and worst case scenarios for the insertion sort.\n    --------------------------------------------------------------------------\n    ')
    print('3 Best Case Scenarios - sorted except for one value')
    for wC in I(3):
        H = R(9, 50)
        k = [wC for wC in I(H)]
        (k[6], k[-1]) = (k[-1], k[6])
        A = Y('insertion_sort({})'.format(k), L)
        print('List {}: length={}; time = {}'.format(wC + 1, H, A))
    print('\n3 Average Case Scenarios - Moderately sorted')
    for wC in I(3):
        H = R(9, 50)
        k = [wC for wC in I(H)]
        vC(k)
        A = Y('insertion_sort({})'.format(k), L)
        print('List {}: length={}; time = {}'.format(wC + 1, H, A))
    print('\n3 Worst Case Scenarios - Completely unsorted')
    for wC in I(3):
        H = R(9, 50)
        k = [wC for wC in I(H)]
        k = k[::-1]
        A = Y('insertion_sort({})'.format(k), L)
        print('List {}: length={}; time = {}'.format(wC + 1, H, A))
if S == '__main__':
    WQ()