import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
public class Controller{
	private BrentHashMap<Key, Integer> hashTable;
	private Scanner scan;
	private BufferedReader read;
	private FileReader fileRead;
	private View view; 
	private Key key;
	private static final String DEFAULTFILE = "story.txt";
	public static void main(String[] args) {
		new Controller();
	}
	public Controller() {
		this(DEFAULTFILE);
	}
	public Controller(String fileName) {
		try {
			 hashTable = new BrentHashMap<Key,Integer>();
			 view = new View();
			 fileRead = new FileReader(fileName);
			 read = new BufferedReader(fileRead);
			 scan = new Scanner(System.in);
			 readFile();
			 run();
		}catch(IOException e) { view.printTxtReadError();}
	}
	private void readFile() throws IOException {
		String line = null;
		String[] words = null;
		while((line = read.readLine()) != null) {
			words = line.split(" ");
			for(String s : words) {
				if(!s.equals("")) {
					s = s.toLowerCase();
					if(s.contains("覺")) {
						s = s.replace("覺", "i");
					}
					key = new Key(s);
					hashTable.put(key, 1);
				}		
			}
		}
	}
	private void run() {
		Key key = null;
		String input = null;
		do {
			view.printNewSearch();
			input = scan.nextLine().toLowerCase();
			if(input.contains("覺"))
				input = input.replace("覺", "i");
			if(!"-exit".equals(input) && !"-show".equals(input)) {
				key = new Key(input);
				if(hashTable.get(key) != null) {
					view.printResults(key.hashCode(), 
										hashTable.getCount(key), 
											hashTable.getIndex(key));
				}
				else 
					view.printNotFound(key.toString());
			}
		}while(!"-exit".equals(input) && !"-show".equals(input));
		if("-show".equals(input)) {
			show();
		}
		view.printClosedMessage();
	}
	private void show(){
		int totalWords = 0;
		int i = 0;
		for(Entry<Key,Integer> entry : hashTable.entrySet()) {
			if(entry != null) {
				view.printTableLine(i, entry.getKey(), entry.getKey().hashCode(), entry.getCount());
				totalWords += entry.getCount();
			}
			i++;
		}
		view.printTotalValues(totalWords, hashTable.size());
	}
}