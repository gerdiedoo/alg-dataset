package I.Z.D.u;
public final class Y {
	public static void D(int[] zV, int C, int v) {
		if (v - C < 2) {
			return;
		}
		final int S = (C + v) / 2;
		D(zV, C, S);
		D(zV, S, v);
		bC(zV, C, S, v);
	}
	private static void bC(int[] zV, int C, int S, int v) {
		if (zV[S - 1] <= zV[S]) {
			return;
		}
		int Rw = C;
		int Xg = S;
		int E = 0;
		int[] f = new int[v - C];
		while (Rw < S && Xg < v) {
			f[E++] = zV[Rw] <= zV[Xg] ? zV[Rw++] : zV[Xg++];
		}
		System.Fp(zV, Rw, zV, C + E, S - Rw);
		System.Fp(f, 0, zV, C, E);
	}
}