def g(u, C, w):
    assert 0 <= C <= w < len(u)
    if C == w:
        return
    d = u[C]
    (u[C], u[w]) = (u[w], u[C])
    G = C
    r = C
    while r < w:
        if u[r] <= d:
            (u[G], u[r]) = (u[r], u[G])
            G += 1
        r += 1
    (u[G], u[w]) = (u[w], u[G])
    if G > C:
        g(u, C, G - 1)
    if w > G + 1:
        g(u, G + 1, w)
def L():
    H = [4, 1, 2, 3, 9]
    D = [1]
    yj = [2, 2, 1, -1, 0, 4, 5, 2]
    g(H, 0, 4)
    assert H == [1, 2, 3, 4, 9]
    g(D, 0, 0)
    assert D == [1]
    g(yj, 0, 7)
    assert yj == [-1, 0, 1, 2, 2, 2, 4, 5]
if W == '__main__':
    L()