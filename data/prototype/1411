package Hashtables.HashTable;
public class Hashtable<Key, Value> {
    public class Node {
        private Key key;
        private Value value;
        private Node next;
        private int hash;
        public Node(Key key, Value value, Node next, int hash){
            this.key = key;
            this.value = value;
            this.next = next;
            this.hash = hash;
        }
    }
    private Node[] nodes;
    @SuppressWarnings("unchecked")
	public Hashtable(int size){
        nodes = new Hashtable.Node[size];
    }
    private int getIndex(Key key){
        int hash = key.hashCode() % nodes.length;
        if(hash < 0){
            hash += nodes.length;
        }
        return hash;
    }
    public Value insert(Key key, Value value){
        int hash = getIndex(key);
        for(Node node = nodes[hash]; node != null; node = node.next){
            if((hash == node.hash) && key.equals(node.key)){
                Value oldData = node.value;
                node.value = value;
                return oldData;
            }
        }
        Node node = new Node(key, value, nodes[hash], hash);
        nodes[hash] = node;
        return value;
    }
    public boolean remove(Key key){
        int hash = getIndex(key);
        Node previous = null;
        for(Node node = nodes[hash]; node != null; node = node.next){
            if((hash == node.hash) && key.equals(node.key)){
                if(previous != null)
                    previous.next = node.next;
                else
                    nodes[hash] = node.next;
                return true;
            }
            previous = node;
        }
        return false;
    }
    public Value get(Key key){
        int hash = getIndex(key);
        Node node = nodes[hash];
        while (node != null) {
            if(key.equals(node.key))
                return node.value;
            node = node.next;
        }
        return null;
    }
    public void resize(int size){
    	Hashtable<Key, Value> tbl = new Hashtable<Key, Value>(size);
        for(Node node : nodes){
            while (node != null) {
                tbl.insert(node.key, node.value);
                remove(node.key);
                node = node.next;
            }
        }
        nodes = tbl.nodes;
    }
}