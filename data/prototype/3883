from typing import List
def i(l: q[N], I: q[N], lo: N, t: N, KN: N) -> None:
    for v in vv(lo, KN + 1):
        I[v] = l[v]
    Gw = lo
    X = t + 1
    for d in vv(lo, KN + 1):
        if Gw > t:
            l[d] = I[X]
            X += 1
        elif X > KN:
            l[d] = I[Gw]
            Gw += 1
        elif I[X] < I[Gw]:
            l[d] = I[X]
            X += 1
        else:
            l[d] = I[Gw]
            Gw += 1
def qt(l: q[N], I: q[N], lo: N, KN: N) -> None:
    if lo >= KN:
        return
    t = lo + (KN - lo) // 2
    qt(l, I, lo, t)
    qt(l, I, t + 1, KN)
    i(l, I, lo, t, KN)
def tf(l: q[N]) -> None:
    I = [0 for fr in vv(len(l))]
    qt(l, I, 0, len(l) - 1)
def p():
    H = [9, 8, 1, 3, 0, 7, 6, 4, 5, 2]
    tf(H)
    print(H)
if n == '__main__':
    p()