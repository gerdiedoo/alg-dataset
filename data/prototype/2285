import unittest
def i(Bm, b, t, c):
    if b > t:
        return -1
    f = b + t >> 1
    if c == Bm[f]:
        return f
    if c < Bm[f]:
        return i(Bm, b, f - 1, c)
    else:
        return i(Bm, f + 1, t, c)
class BinarySearchTest(Tt.TestCase):
    def test_basic(self):
        Bm = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        for (n, U) in enumerate(Bm):
            A.assertEquals(i(Bm, 0, len(Bm) - 1, U), n)
    def test_missing(self):
        Bm = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        A.assertEquals(i(Bm, 0, len(Bm) - 1, 19), -1)
    def test_odd(self):
        Bm = [2, 4, 6, 8, 10, 12, 14]
        for (n, U) in enumerate(Bm):
            A.assertEquals(i(Bm, 0, len(Bm) - 1, U), n)
    def test_even(self):
        Bm = [1, 3, 5, 7, 9, 11, 13, 17]
        for (n, U) in enumerate(Bm):
            A.assertEquals(i(Bm, 0, len(Bm) - 1, U), n)
    def test_empty(self):
        Bm = []
        A.assertEquals(i(Bm, 0, len(Bm) - 1, 19), -1)
if SI == '__main__':
    Tt.main()