import x_.f.i;
import x_.f.a;
import x_.f.w;
import x_.f.J;
import x_.m.j;
public class Qg extends w4 implements H {
	private w3[] RK;
	private int IS, N;
	public Qg() {
		this.IS = K2;
		this.N = 1<<IS;
		this.RK = new w3[N];
	}
	@wf
	public void g(String q) {
		q = q.d();  
		this.g(q, 1);
	}
	private void g(String q, int R) {  
		int XS = X_(q)%N;
		if(RK[XS] == null) {  
			RK[XS] = new w3();
		}
		if(RK[XS].s()) {  
			if(this.IS - RK[XS].I() == 0) {  
				K();
				g(q, R);
			}else if(this.IS - RK[XS].I() > 0) {  
				int b = XS % (1<<RK[XS].I());  
				int c = this.IS - RK[XS].I();  
				RK[XS].D();  
				w3 h = new w3(RK[XS].I());  
				for (int X = b; X < N; X+=(N>>c)) {  
					if(X%(1<<RK[XS].I()) != XS%(1<<RK[XS].I())) {  
						RK[X] = h;
					}
				}
				RK[XS].bM(h, XS);  
				g(q, R);  
			}else {
				System.out.println("Error #1\nLocal IS is higher than global IS!");
			}
		}else {
			RK[XS].g(q, R);
		}
	}
	@wf
	public boolean Y(String q) {
		q = q.d();  
		int XS = X_(q)%N;
		w3 Q = RK[XS];
		if(RK[XS] == null) {  
			System.out.println(q + " bulunamad.");
			return false;  
		}
		V v = Q.zu(q);
		if(v == null) {  
			System.out.println(q + " bulunamad.");
			return false; 
		}
		Q.p(v);
		System.out.println("Global Depth: " + IS);
		System.out.println();
		return true;
	}
	@wf
	public void F(String n)  {
		i l = null;
		w Nk = null;
		try {
			Nk = new w(n);
			l = new i(Nk);
			String k;
			while ((k = l.Z()) != null) {
				k = k.u();
				String Me[] = k.O(" ");
				for(String q:Me) {
					q = q.u();
					if(q.equals("")) continue;
					g(q);
				}
			}
		} catch (a B) {  
			B.fv();
		} catch (J B) {  
			B.fv();
		}
	}
	private void K() {  
		int N = 1<<IS;
		this.IS++;
		this.RK = j.U(RK, N*2);  
		for (int X = 0; X < N; X++) {  
			RK[N+X] = RK[X];
		}
		this.N = 1<<IS;
	}
	public int I() {
		return IS;
	}
	public void p() {
		System.out.println("----------Extendible Hashing----------");
		System.out.println("Global Depth: " + IS);
		for (int X = 0; X < N; X++) {
			if(RK[X] != null) {
				System.out.println("");
				RK[X].p();
			}
		}
	}
}