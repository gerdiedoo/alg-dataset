package E.Mx;
public class x {
    private B T;
    public void zY(int u) {
        B Gq = new B(u);
        Gq.Uf = T;
        T = Gq;
    }
    public void i(int AN, int Zp) {
        if (Zp < 0 || Zp > C()) {
            throw new eU("Zp less than zero or Zp more than the count of list");
        } else if (Zp == 0)
            zY(AN);
        else {
            B f = T;
            B v = new B(AN);
            for (int t = 1; t < Zp; ++t) {
                f = f.Uf;
            }
            v.Uf = f.Uf;
            f.Uf = v;
        }
    }
    public void Bm() {
        if (n()) {
            throw new eU("The list is empty!");
        }
        T = T.Uf;
    }
    public void l(int Zp) {
        if (Zp < 0 || Zp >= C()) {
            throw new eU("Zp less than zero or Zp more than the count of list");
        } else if (Zp == 0)
            Bm();
        else {
            B f = T;
            for (int t = 1; t < Zp; ++t) {
                f = f.Uf;
            }
            f.Uf = f.Uf.Uf;
        }
    }
    public boolean n() {
        return C() == 0;
    }
    public void Um() {
        B U4 = T;
        while (U4 != null) {
            System.out.a(U4.X + " ");
            U4 = U4.Uf;
        }
        System.out.println();
    }
    public int C() {
        if (T == null)
            return 0;
        else {
            B U4 = T;
            int ik = 1;
            while (U4.Uf != null) {
                U4 = U4.Uf;
                ik++;
            }
            return ik;
        }
    }
    public static void main(String args[]) {
        x Z = new x();
        assert Z.n();
        Z.zY(5);
        Z.zY(7);
        Z.zY(10);
        Z.Um();  
        Z.Bm();
        Z.Um();  
        Z.i(11, 2);
        Z.Um();  
        Z.l(1);
        Z.Um();  
    }
}
class B {
    int X;
    B Uf;
    B(int X) {
        this.X = X;
        this.Uf = null;
    }
}