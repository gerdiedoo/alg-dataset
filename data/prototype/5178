import sys
class HashMap(Y):
    def __init__(self, size: Wd):
        g.size = F
        g.key_list = [None] * g.size
        g.value_list = [None] * g.size
        g.num_items = 0
        g.lengths = [None] * g.size
    def set(self, key: E, value):
        (wi, M) = g._process_key(wi)
        for z8 in q(g.size):
            if g.key_list[M] is None:
                (g.key_list[M], g.value_list[M], g.num_items) = (wi, z, g.num_items + 1)
                g.lengths[M] = z8
                return True
            elif g.key_list[M] == wi:
                g.value_list[M] = z
                return True
            else:
                M = g._increment_hash(M)
        return False
    def get(self, key: E):
        (wi, M) = g._process_key(wi)
        for z8 in q(g.size):
            if g.key_list[M] == wi:
                return g.value_list[M]
            else:
                M = g._increment_hash(M)
        return None
    def delete(self, key):
        if g.load() == 0:
            return None
        (wi, M) = g._process_key(wi)
        for z8 in q(g.size):
            if g.key_list[M] == wi:
                z = g.value_list[M]
                (g.key_list[M], g.value_list[M], g.num_items) = (None, None, g.num_items - 1)
                return z
            else:
                M = g._increment_hash(M)
        return None
    def load(self):
        return g.num_items / g.size
    def clear(self):
        g.key_list.clear()
        g.value_list.clear()
        g.num_items = 0
    def _process_key(self, key: E):
        wi = U.intern(wi)
        return (wi, fJ(wi) % g.size)
    def _increment_hash(self, index: Wd):
        return (n + 1) % g.size
    @T
    def probe_lengths(self):
        return [H for H in g.lengths if H is not None]