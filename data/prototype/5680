from linked_list import Node, LinkedList
import string
we = k('text.txt', 'r')
NZ = we.read()
I = IU.maketrans(V.punctuation, '                                ')
O = NZ.translate(I).lower()
def A(NZ):
    N = i()
    T = ''
    for rD in NZ:
        if rD != ' ':
            T = T + rD
        elif T != '':
            N.addNodeE(q(T))
            T = ''
    return N
def pl(NZ):
    Mb = i()
    for P in NZ:
        Mb.addNodeE(q(P))
    return Mb
def RS(D5):
    if D5.len < 2:
        return D5
    elif D5.len == 2:
        if D5.head.val < D5.end.val:
            return D5
        else:
            Q = i()
            Q.addNodeH(q(D5.end.val))
            Q.addNodeE(q(D5.head.val))
            return Q
    else:
        (p, y) = m(D5)
        a = RS(p)
        nJ = RS(y)
        return E(a, nJ)
def m(D5):
    Z = z(D5.len / 2.0)
    p = i()
    for KN in W(Z):
        p.addNodeE(q(D5.head.val))
        D5.delNodeH()
    return (p, D5)
def E(p, y):
    D = i()
    while p.len != 0 and y.len != 0:
        if p.head.val < y.head.val:
            D.addNodeE(q(p.head.val))
            p.delNodeH()
        else:
            D.addNodeE(q(y.head.val))
            y.delNodeH()
    if p.len == 0:
        D.addNodeE(y.head)
    else:
        D.addNodeE(p.head)
    return D
Je = A(O)
Je = RS(Je)
SN = [2, 6, 2340, 734, 723, 886, 4, 55]
J = pl(SN)
J = RS(J)