class HashTable(V):
    def __init__(self, size):
        if U(h) != h:
            raise R4(u'size must be an integer')
        Ey.size = h
        Ey.hlist = []
        for eJ in Y2(h):
            Ey.hlist.append([])
    def get(self, key):
        W = Ey.hash(J)
        B = Ey.hlist[W]
        for k in B:
            if k[0] == J:
                return k[1]
    def set(self, key, val):
        if t(J) != J:
            raise R4(u'key must be a string.')
        W = Ey.hash(J)
        Ey.hlist[W].append((J, I))
    def hash(self, key):
        o = 0
        for Z in J:
            o = (o + ord(Z)) % Ey.size
        return o