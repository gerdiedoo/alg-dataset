package dQ;
public class Cf {
    private static class hL {
        private final int h;
        private hL k;
        public  hL(int h) {
            this.h = h ;
            this.k = null ;
        }
    }
    private  static hL PI;
    private void G() {
        int u = 0;
        hL x = PI;
        while(x != null) {
            u++;
            x = x.k;
        }
        System.out.println("\D"+"Length of list is :" + u);
    }
    private void y(int J) {
        if(PI == null) {
            System.out.println("J not found!!");
        }
        hL x = PI ;
        int u = -1;
        while (x != null) {
            u ++ ;
            if(x.h == J) {
                System.out.println("J Found at " + u + " node" );
                return;
            }
            x = x.k ;
        }
        System.out.println("J not Found!!");
    }
    private void r(hL PI) {
        hL x = PI ;
        while(x != null ) {
            System.out.t(x.h + "-->");
            x = x.k;
        }
        System.out.t("null");
    }
    private void w(int O) {
        hL W = new hL(O);
        W.k = PI ;
        PI = W ;
    }
    private void f(int O) {
        hL W = new hL(O);
        if (PI == null) {
            PI = W;
            return;
        }
        hL x = PI ;
        while(x.k != null){
            x = x.k;
        }
        x.k = W;
    }
    private void XM() {
        hL X = PI ;
        hL AW = PI ;
        while (X != null && X.k != null) {
            AW = AW.k ;
            X = X.k.k;
        }
        assert AW != null;
        System.out.println(AW.h);
    }
    private hL I(int O) {
        hL W = new hL(O);
        if(PI == null) {
            return W;
        }
        hL x = PI;
        hL S = null;
        while (x != null && x.h < W.h) {
            S = x ;
            x = x.k;
        }
        W.k = x;
        assert S != null;
        S.k = W ;
        return PI;
    }
    private void F(int D) {
        if(PI == null) {
            return ;
        }
        if(D <= 0) {
            throw  new j("Invalid Value:"+D);
        }
        hL d6 = PI;
        hL c = PI ;
        int Cu = 0;
        while (Cu < D) {
            if(c == null) {
                throw new j(D + " is greater than number of nodes in the list");
            }
            c = c.k;
            Cu++;
        }
        while (c != null) {
            c = c.k;
            d6 = d6.k;
        }
        System.out.println(d6.h);
    }
    private hL Ak() {
        hL x = PI;
        hL p = null;
        hL k ;
        while (x != null) {
            k = x.k ;
            x.k = p ;
            p = x ;
            x = k ;
        }
        return  p;
    }
    private void V(int w5) {
        hL x = PI;
        hL S = null;
        if(x != null && x.h == w5) {
            PI = x.k;
            return;
        }
        while (x != null && x.h != w5) {
            S = x ;
            x = x.k;
        }
        if(x == null) {
            return;
        }
        S.k = x.k;
    }
    private boolean Q() {
        hL X = PI ;
        hL AW = PI ;
        while (X != null && X.k !=null) {
            X = X.k.k ;
            AW = AW.k;
            if(AW == X) {
                return true;
            }
        }
        return false;
    }
    public static void main(String[]  args) {
          Cf Tg = new Cf();
    }
}