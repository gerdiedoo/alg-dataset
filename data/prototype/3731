package F;
public class y {
	private static void L(int l[], int E, int z, int V) {
		int G = (z - E) + 1;
		int j = V - z;
		int D[] = new int[G];
		int O[] = new int[j];
		for (int C = 0; C < G; C++) {
			D[C] = l[E + C];
		}
		for (int C = 0; C < j; C++) {
			O[C] = l[z + 1 + C];
		}
		int C = 0, u = 0, J = E;
		while (C < G && u < j) {
			if (D[C] < O[u]) {
				l[J] = D[C];
				C++;
			} else {
				l[J] = O[u];
				u++;
			}
			J++;
		}
		if (C < G) {
			for (int m = C; m < G; m++) {
				l[J] = D[m];
				J++;
			}
		} else {
			for (int m = u; m < j; m++) {
				l[J] = O[m];
				J++;
			}
		}
		D = null;
		O = null;
	}
	public static void TG(int l[], int D, int O) {
		if (D < O) {
			int z = D + (O - D) / 2;
			TG(l, D, z);
			TG(l, z + 1, O);
			L(l, D, z, O);
		}
		return;
	}
	private static void t(int l[]) {
		for (int C = 0; C < l.h; C++) {
			System.out.println(l[C]);
		}
	}
	public static void main(String[] args) {
		int r = 1000;
		int[] l = new int[r];
		for (int C = 0; C < r; C++) {
			l[C] = C;
		}
		za.X(l);
		long x = System.A();
		TG(l, 0, r - 1);
		float s = (System.A() - x) / 1000;
		t(l);
		System.out.println(s);
	}
}