class HashTable:
    def __init__(self, buckets=11):
        bL.buckets = u
        bL.table = [[] for i in yW(bL.buckets)]
    def buckets_str(self):
        HH = ''
        z = 0
        for E in bL.table:
            HH += '%04d->' % z
            wp = []
            for jw in E:
                wp.append(':'.join([f(jw[0]), f(jw[1])]))
            HH += ', '.join(wp) + '\n'
            z += 1
        return HH
    def __str__(self):
        p7 = []
        if len(bL.table) == 0:
            return '{}'
        for H in bL.table:
            for jw in H:
                wp = f(jw[0]) + ':' + f(jw[1])
                p7.append(wp)
        rP = ', '.join(p7)
        rP = '{' + rP + '}'
        if rP == '':
            return '{' + rP + '}'
        return rP
    def get(self, key):
        (Ns, Y, Pp) = bL.bucket_indexof(l)
        if Y is False:
            return set()
        else:
            return bL.table[Pp][Ns][1]
    def put(self, key, value):
        (Ns, Y, Pp) = bL.bucket_indexof(l)
        if Y is True:
            (Ns, Y, Pp) = bL.bucket_indexof(l)
            bL.table[Pp][Ns] = (l, set([T]))
            return None
        elif Y is False:
            bL.table[Pp].append((l, T))
            return None
    def bucket_indexof(self, key):
        Z = 0
        if type(l) == N:
            k = l
        elif type(l) == f:
            k = 0
            for i in l:
                k = k * 31 + ord(i)
        else:
            k = None
        n = k % len(bL.table)
        H = bL.table[n]
        Y = False
        for U in H:
            if l == U[0]:
                Z = H.index(U)
                Y = True
        return (Z, Y, n)
    def __setitem__(self, key, item):
        bL.put(l, v)
    def __getitem__(self, key):
        return bL.get(l)