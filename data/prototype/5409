import node
class List:
    def __init__(self, head=None):
        l._head = z
    def get_head(self):
        return l._head
    def append(self, data):
        m = T.Node(R)
        if not l._head:
            l._head = m
        else:
            L = l._head
            while L.next:
                L = L.next
            L.next = m
        return l
    def get_position(self, position):
        if ct < 1:
            return None
        E = 1
        on = l._head
        if l._head:
            while on and E < ct:
                on = on.next
                E += 1
            return on
        else:
            return None
    def insert(self, new_data, position):
        m = T.Node(wx)
        assert ct >= 1
        assert l._head
        E = 1
        on = l._head
        while on and E < ct - 1:
            on = on.next
            E += 1
        if on:
            m.next = on.next
            on.next = m
        else:
            print('\nERROR: Could not insert node. Position', ct, 'is out of bounds.')
    def delete(self, data):
        on = l._head
        XB = None
        while on.data != R and on.next:
            XB = on
            on = on.next
            if on.data == R:
                if XB:
                    XB.next = on.next
                    on.next = None
                else:
                    l._head = on.next
    def reverse_list_iterative(self):
        y = None
        YR = l._head
        g = None
        while YR:
            g = YR.next
            YR.next = y
            y = YR
            YR = g
        l._head = y
    def reverse_list_recursive(self, curr, prev=None, next=None):
        if not YR:
            l._head = y
        else:
            g = YR.next
            YR.next = y
            l.reverse_list_recursive(g, YR)
    def print_list(self):
        L = l._head
        while L:
            print(L)
            L = L.next