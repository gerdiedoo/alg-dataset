class EmptyLinkedList(Exception):
	pass
class SingleLinkedList:
	class _Node:
		__slots__ = '_element', '_next'               
  def __init__(self, element=None, next=None):    
			self._element = element                     
   self._next = next                           
 def __init__(self):
		self._head = self._tail = self._Node()
  self._size = 0
 def __len__(self):
		return self._size        
 def isEmpty(self):
		return self._size==0  
 def addFirst(self, element):   
		self._head._element=element
  self._head=self._Node(None,self._head)
  self._size+=1
 def addLast(self, element):    
		self._tail._next=self._Node(element,None)
  self._tail=self._tail._next
  self._size+=1
 def removeFirst(self):  
		if self.isEmpty():
			raise EmptyLinkedList()
  e=self._head._next._element
  self._head=self._head._next
  self._head._element=None
  self._size-=1
  return e
 def removeLast(self):   
		if self.isEmpty():
			raise EmptyLinkedList()
  e=self._tail._element
  n=self._head
  while n._next!=self._tail:
			n=n._next
  self._tail=n
  self._tail._next=None
  self._size-=1
  return e
 def makeEmpty(self):
		self._head = self._tail = self._Node()
  self._size = 0
 def getContent(self):
		l=[]
  n=self._head
  while n._next!= None:
			n=n._next
   l.append(n._element)
  return l