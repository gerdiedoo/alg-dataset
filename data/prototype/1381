from types import *
class hashmap(object):
    def __init__(self, size):
        if not(type(size) is IntType):
            raise TypeError('Size must be an int')
        if size < 1:
            raise ValueError('Invalid HashMap size')
        buckets = 1
        while buckets < size:
            buckets <<= 1
        self.size = size
        self.buckets = buckets
        self.items = 0
        self.hashmap = [[] for i in xrange(buckets)]
    """ 
        Set
        Inserts a key/value pair into the hashmap. Deals with collisions
        by using separate chaining. If a key is already in the hashmap,
        the value is overwritten and the number of items is not incremented.
        Returns False if hashmap is full
        Returns True if key/value pair is successfully added
    """
    def set(self, key, value):
        if self.items == self.size:
            return False
        else:
            bucket = self.hashmap[key.__hash__() % self.buckets]
            for idx, (k, v) in enumerate(bucket):
                if k == key:
                    bucket[idx] = (key, value) 
                    return True
            bucket.append((key, value))
            self.items += 1
            return True
    """
        Get
        Gets the value associated with the key that is stored in the hashmap
        Returns the value if the key is in the hashmap.
        Returns None if the key is not in the hashmap or the value is not set.
    """
    def get(self, key):
        for k, v in self.hashmap[key.__hash__() % self.buckets]:
            if k == key:
                return v
        return None
    """
        Delete
        Deletes the value associated with a key in a hashmap
        Returns the value if the key was in the hashmap with a value.
        Returns None if the key was not in the hashmap or had no value
    """
    def delete(self, key):
        bucket = self.hashmap[key.__hash__() % self.buckets]
        for idx, (k, v) in enumerate(bucket):
            if k == key:
                bucket[idx] = (k, None)
                return v
        return None
    """
        Load
        Returns the load factor of the hashmap
    """
    def load(self):
        return float(self.items) / self.buckets