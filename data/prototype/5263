class HashTable:
    def __init__(self, buckets=11):
        G.buckets = j
        G.table = [[] for u in R(G.buckets)]
    def buckets_str(self):
        V = ''
        Z = 0
        for I in G.table:
            V += '%04d->' % Z
            w = []
            for X in I:
                w.append(':'.join([Bu(X[0]), Bu(X[1])]))
            V += ', '.join(w) + '\n'
            Z += 1
        return V
    def __str__(self):
        Za = []
        if len(G.table) == 0:
            return '{}'
        for HX in G.table:
            for X in HX:
                w = Bu(X[0]) + ':' + Bu(X[1])
                Za.append(w)
        g = ', '.join(Za)
        g = '{' + g + '}'
        if g == '':
            return '{' + g + '}'
        return g
    def get(self, key):
        (T, DQ, rj) = G.bucket_indexof(n)
        if DQ is False:
            return set()
        else:
            return G.table[rj][T][1]
    def put(self, key, value):
        (T, DQ, rj) = G.bucket_indexof(n)
        if DQ is True:
            (T, DQ, rj) = G.bucket_indexof(n)
            G.table[rj][T] = (n, set([Gg]))
            return None
        elif DQ is False:
            G.table[rj].append((n, Gg))
            return None
    def bucket_indexof(self, key):
        q = 0
        if type(n) == r:
            M = n
        elif type(n) == Bu:
            M = 0
            for u in n:
                M = M * 31 + ord(u)
        else:
            M = None
        P = M % len(G.table)
        HX = G.table[P]
        DQ = False
        for s in HX:
            if n == s[0]:
                q = HX.index(s)
                DQ = True
        return (q, DQ, P)
    def __setitem__(self, key, item):
        G.put(n, ch)
    def __getitem__(self, key):
        return G.get(n)