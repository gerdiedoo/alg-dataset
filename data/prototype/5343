S = 'Elias Haroun'
from List_ADT.list.Node import *
class DoublyLinkedList(N):
    def __init__(self):
        q.head = None
        q.tail = None
        q.size = 0
    def isEmpty(self):
        return q.size == 0
    def getSize(self):
        return q.size
    def getHead(self):
        return q.head
    def getTail(self):
        return q.tail
    def setHead(self, aNode):
        q.head = j
    def setTail(self, aNode):
        q.tail = j
    def insertLast(self, data):
        P = Wl(L, None, None)
        if q.isEmpty():
            q.setHead(P)
            q.setTail(P)
        else:
            P.setPrevious(q.tail)
            q.getTail().setNext(P)
            q.setTail(P)
        q.size += 1
    def insertFirst(self, data):
        P = Wl(L, None, None)
        if q.isEmpty():
            q.setHead(P)
            q.setTail(P)
        else:
            P.setNext(q.head)
            q.getHead().setPrevious(P)
            q.setHead(P)
        q.size += 1
    def deleteLast(self):
        if q.isEmpty() is not True:
            q.getTail().getPrevious().setNext(None)
            q.getTail().setPrevious(None)
            q.setTail(q.getTail().getPrevious())
            q.size -= 1
    def deleteFirst(self):
        if q.isEmpty() is not True:
            q.setHead(q.getHead().getNext())
            q.getHead().setPrevious(None)
            q.size -= 1
    def getContent(self):
        eD = []
        Qi = q.getHead()
        while Qi:
            eD.append(Qi.getValue())
            Qi = Qi.getNext()
        print(eD)
    def find(self, data):
        y = 0
        Qi = q.getHead()
        while Qi:
            if Qi.getValue() == L:
                return y
            y += 1
            Qi = Qi.getNext()
        return -1