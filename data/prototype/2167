from bisect import bisect_left
def s(H, J):
    cB = n(H, J)
    if cB != len(H) and H[cB] == J:
        return cB
    return -1
def l(H, J, z, V):
    assert 0 <= z <= V < len(H)
    if V == z:
        if H[z] == J:
            return z
        return -1
    U = (z + V) // 2
    h = H[U]
    if h == J:
        return U
    if h < J:
        if V > U:
            return l(H, J, U + 1, V)
        return -1
    if h > J:
        if z < U:
            return l(H, J, z, U - 1)
        return -1
def S():
    P = [1, 2, 3, 4, 6, 7, 9]
    assert l(P, 5, 0, 5) == -1
    assert s(P, 5) == -1
    iV = [-1, 0, 1, 5, 6, 9, 15, 15]
    assert s(iV, 15) == 6
    assert l(iV, 15, 0, 7) != -1
    u = [-1, 0, 0, 0, 0, 1]
    assert s(u, 0) == 1
    assert l(u, 0, 0, 5) != -1
if W == '__main__':
    S()