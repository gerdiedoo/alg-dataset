require('../../../common/array-extensions');
const { isEmpty, isFunction } = require('../../../common/utils');
const mergeSort = function(list) {
    if (isEmpty(list)) {
        return list;
    }
    if (list.length < 2) {
        return list;
    }
    sort(list, [], 0, list.length - 1);
    return list;
};
function sort(list, tempList, leftStart, rightEnd) {
    if (leftStart >= rightEnd) {
        return;
    }
    var middle = Math.floor((leftStart + rightEnd) / 2);
    sort(list, tempList, leftStart, middle);
    sort(list, tempList, middle + 1, rightEnd);
    merge(list, tempList, leftStart, rightEnd);
}
function merge(list, tempList, leftStart, rightEnd) {
    var leftEnd = Math.floor((leftStart + rightEnd) / 2);
    var rightStart = leftEnd + 1;
    var size = rightEnd - leftStart + 1;
    var leftIndex = leftStart;
    var rightIndex = rightStart;
    var tempIndex = leftStart;
    const allItemsComparable = list.reduce(
        (acc, item) => (acc &= isFunction(item.compareTo)),
        true
    );
    while (leftIndex <= leftEnd && rightIndex <= rightEnd) {
        if (allItemsComparable) {
            tempList[tempIndex++] =
                list[leftIndex].compareTo(list[rightIndex]) < 0
                    ? list[leftIndex++]
                    : list[rightIndex++];
        } else {
            tempList[tempIndex++] =
                list[leftIndex] < list[rightIndex] ? list[leftIndex++] : list[rightIndex++];
        }
    }
    list.copy(leftIndex, tempList, tempIndex, leftEnd - leftIndex + 1);
    list.copy(rightIndex, tempList, tempIndex, rightEnd - rightIndex + 1);
    tempList.copy(leftStart, list, leftStart, size);
}
module.exports = { mergeSort };