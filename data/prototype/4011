package MC;
public class o extends L{
	public static void main(String[] args){
		int[] Z = bN(5);
		h(new o(), Z);
	}
	public o(){ super("Merge"); }
	private int[] G(int[] Z, int QT, int T, int k){
		int se = 0; 		 
		int Q = 0; 		 
		int d = QT; 	 
		int M = T - QT + 1;
		int B = k - T;
		int[] D = new int[M];
		int[] W = new int[B];
		for (int Tv = 0; Tv < M; Tv++)
			D[Tv] = Z[QT + Tv];
		for (int Tv = 0; Tv < B; Tv++)
			W[Tv] = Z[T + Tv + 1];
		while ( se < M && Q < B )
		{
			if ( D[se] < W[Q] )
				Z[d++] = D[se++];
			else
				Z[d++] = W[Q++];
		}
		while ( se < D.i )
			Z[d++] = D[se++];
		while ( Q < W.i )
			Z[d++] = W[Q++];
		return Z;
	}
	private void u(int[] Z, int QT, int k){
		if ( QT < k )
		{
			int T = (k - QT) / 2 + QT;
			u(Z, QT, T);
			u(Z, T + 1, k);
			G(Z, QT, T, k);
		}
	}
	@qB
	public void x(int[] Z){
		u(Z, 0, Z.i - 1);
	}
}