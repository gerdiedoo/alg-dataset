package L;
public class EW {
    private static class I {
        private final int r;
        private I FN;
        public  I(int r) {
            this.r = r ;
            this.FN = null ;
        }
    }
    private  static I u;
    private void Q() {
        int N = 0;
        I x = u;
        while(x != null) {
            N++;
            x = x.FN;
        }
        System.out.println("\DP"+"Length of list is :" + N);
    }
    private void b(int CN) {
        if(u == null) {
            System.out.println("CN not found!!");
        }
        I x = u ;
        int N = -1;
        while (x != null) {
            N ++ ;
            if(x.r == CN) {
                System.out.println("CN Found at " + N + " node" );
                return;
            }
            x = x.FN ;
        }
        System.out.println("CN not Found!!");
    }
    private void m(I u) {
        I x = u ;
        while(x != null ) {
            System.out.H(x.r + "-->");
            x = x.FN;
        }
        System.out.H("null");
    }
    private void w(int K) {
        I Ou = new I(K);
        Ou.FN = u ;
        u = Ou ;
    }
    private void l(int K) {
        I Ou = new I(K);
        if (u == null) {
            u = Ou;
            return;
        }
        I x = u ;
        while(x.FN != null){
            x = x.FN;
        }
        x.FN = Ou;
    }
    private void t() {
        I k = u ;
        I A = u ;
        while (k != null && k.FN != null) {
            A = A.FN ;
            k = k.FN.FN;
        }
        assert A != null;
        System.out.println(A.r);
    }
    private I eL(int K) {
        I Ou = new I(K);
        if(u == null) {
            return Ou;
        }
        I x = u;
        I T = null;
        while (x != null && x.r < Ou.r) {
            T = x ;
            x = x.FN;
        }
        Ou.FN = x;
        assert T != null;
        T.FN = Ou ;
        return u;
    }
    private void VY(int DP) {
        if(u == null) {
            return ;
        }
        if(DP <= 0) {
            throw  new M("Invalid Value:"+DP);
        }
        I hr = u;
        I Y = u ;
        int W = 0;
        while (W < DP) {
            if(Y == null) {
                throw new M(DP + " is greater than number of nodes in the list");
            }
            Y = Y.FN;
            W++;
        }
        while (Y != null) {
            Y = Y.FN;
            hr = hr.FN;
        }
        System.out.println(hr.r);
    }
    private I so() {
        I x = u;
        I a = null;
        I FN ;
        while (x != null) {
            FN = x.FN ;
            x.FN = a ;
            a = x ;
            x = FN ;
        }
        return  a;
    }
    private void p(int E) {
        I x = u;
        I T = null;
        if(x != null && x.r == E) {
            u = x.FN;
            return;
        }
        while (x != null && x.r != E) {
            T = x ;
            x = x.FN;
        }
        if(x == null) {
            return;
        }
        T.FN = x.FN;
    }
    private boolean j() {
        I k = u ;
        I A = u ;
        while (k != null && k.FN !=null) {
            k = k.FN.FN ;
            A = A.FN;
            if(A == k) {
                return true;
            }
        }
        return false;
    }
    public static void main(String[]  args) {
          EW n = new EW();
    }
}