__author__ = "streethacker"
class _BagIterator:
    def __init__(self, theHead):
        self._curNode = theHead
    def __iter__(self):
        return self
    def next(self):
        if self._curNode is None:
            raise StopIteration
        else:
            item = self._curNode.data
            self._curNode = self._curNode.next
            return item
class _BagListNode:
    def __init__(self, data):
        self.data = data
        self.next = None
class Bag:
    def __init__(self):
        self._head = None
        self._size = 0
    def __len__(self):
        return self._size
    def __iter__(self):
        return _BagIterator(self._head)
    def __contains__(self, target):
        curNode = self._head
        while curNode is not None and curNode.data != target:
            curNode = curNode.next
        return curNode is not None
    def add(self, data):
        newNode = _BagListNode(data)
        newNode.next = self._head
        self._head = newNode
        self._size += 1
    def remove(self, data):
        preNode = None
        curNode = self._head
        while curNode is not None and curNode.data != data:
            preNode = curNode
            curNode = curNode.next
        assert curNode is not None, "The item must be in the bag."
        self._size -= 1
        if curNode is self._head:
            self._head = curNode.next
        else:
            preNode.next = curNode.next
        return curNode.data
    def printBagElements(self):
        for b in self:
            print b
if __name__ == "__main__":
    bag = Bag()
    bag.add(10)
    bag.add(12)
    bag.add(36)
    bag.add(77)
    bag.printBagElements()
    bag.remove(12)
    print
    bag.printBagElements()