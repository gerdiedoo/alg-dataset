from typing import List
def partition(array: List[int], left: int, right: int, pt: int) -> int:
    while True:
        swaps = 0  
        for i in range(
            left, pt
        ):  
            if array[pt] < array[i]:  
                array[pt], array[i] = array[i], array[pt]
                pt = i
                swaps += 1
                break
        for i in range(right, pt, -1):  
            if array[pt] > array[i]:  
                array[pt], array[i] = array[i], array[pt]
                pt = i
                swaps += 1
                break
        if swaps == 0:
            break  
    return pt
def quickSort(array: List[int], *args: List[int]) -> None:
    left, right = 0, len(array) - 1
    if len(args) == 2:
        left, right = args
    if left < right - 1:
        half = (left + right) // 2  
        start, middle, end = array[left], array[half], array[right]
        if (start > end and start < middle) or (start < end and start > middle):
            pivotPt = left
        elif (end > start and end < middle) or (end < start and end > middle):
            pivotPt = right - 1
        else:
            pivotPt = half
        pt = partition(array, left, right, pivotPt)
        quickSort(array, pt, right)
        quickSort(array, left, pt)
if __name__ == "__main__":
    try:
        from utils import randomSequence
    except ModuleNotFoundError:
        import os, sys  
        dir_path = os.path.dirname(os.path.realpath(__file__))
        parent_dir_path = os.path.abspath(os.path.join(dir_path, os.pardir))
        sys.path.insert(0, parent_dir_path)
        from utils import randomSequence
    print("IN PLACE QUICK SORT")
    shuffledArray = randomSequence(0, 1000)
    print(shuffledArray, "\n")
    quickSort(shuffledArray)
    print(shuffledArray)