from __future__ import print_function
try:
    raw_input          
except NameError:
    raw_input = input  
def interpolation_search(sorted_collection, item):
    left = 0
    right = len(sorted_collection) - 1
    while left <= right:
        point = left + ((item - sorted_collection[left]) * (right - left)) // (sorted_collection[right] - sorted_collection[left])
        if point<0 or point>=len(sorted_collection):
            return None
        current_item = sorted_collection[point]
        if current_item == item:
            return point
        else:
            if item < current_item:
                right = point - 1
            else:
                left = point + 1
    return None
def interpolation_search_by_recursion(sorted_collection, item, left, right):
    point = left + ((item - sorted_collection[left]) * (right - left)) // (sorted_collection[right] - sorted_collection[left])
    if point<0 or point>=len(sorted_collection):
        return None
    if sorted_collection[point] == item:
        return point
    elif sorted_collection[point] > item:
        return interpolation_search_by_recursion(sorted_collection, item, left, point-1)
    else:
        return interpolation_search_by_recursion(sorted_collection, item, point+1, right)
def __assert_sorted(collection):
    if collection != sorted(collection):
        raise ValueError('Collection must be sorted')
    return True
if __name__ == '__main__':
    import sys
    user_input = raw_input('Enter numbers separated by comma:\n').strip()
    collection = [int(item) for item in user_input.split(',')]
    try:
        __assert_sorted(collection)
    except ValueError:
        sys.exit('Sequence must be sorted to apply interpolation search')
    target_input = raw_input('Enter a single number to be found in the list:\n')
    target = int(target_input)
    result = interpolation_search(collection, target)
    if result is not None:
        print('{} found at positions: {}'.format(target, result))
    else:
        print('Not found')