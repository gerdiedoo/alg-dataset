export default function KahnsTopologicalSort(nodes) {
  const ordering = [];
  const dfsQueue = [];
  const indegrees = new Array(nodes).fill(0);
  for (const outdegrees of Object.values(nodes)) {
    for (const outdegree of outdegrees) {
      indegrees[outdegree]++;
    }
  }
  if (!indegrees.includes(0)) {
    throw new Error('Cycle in graph');
  }
  for (let i = 0; i < indegrees.length; i++) {
    if (indegrees[i] === 0) {
      dfsQueue.push(nodes[i]);
    }
  }
  while (dfsQueue.length) {
    const node = dfsQueue.shift();
    ordering.push(node);
    for (const child of nodes[node]) {
      indegrees[child]--;
      if (indegrees[child] === 0) {
        dfsQueue.push(child);
      }
    }
  }
  if (ordering.length !== nodes.length) {
    throw new Error('Cycle in graph');
  }
  return ordering;
}