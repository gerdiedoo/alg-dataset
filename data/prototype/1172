package com.sorting;
import java.util.Comparator;
public class Heap {
    private Heap() {
    }
    public static void sort(Comparable[] array) {
        if (array == null)
            throw new NullPointerException();
        heapify(array);
        for (int k = array.length; k >= 1; k--) {
            exch(array, 1, k);
            sink(array, 1, k - 1);
        }
    }
    public static void sort(Comparable[] array, Comparator c) {
        if (array == null)
            throw new NullPointerException();
        heapify(array, c);
        for (int k = array.length; k >= 1; k--) {
            exch(array, 1, k);
            sink(array, 1, k - 1, c);
        }
    }
    private static void heapify(Comparable[] A) {
        for (int k = A.length / 2; k >= 1; k--)
            sink(A, k, A.length);
    }
    private static void heapify(Comparable[] A, Comparator c) {
        for (int k = A.length / 2; k >= 1; k--)
            sink(A, k, A.length, c);
    }
    private static void sink(Comparable[] A, int indice, int len) {
        int j;
        while (indice <= len / 2) {
            j = 2 * indice;
            if ((j < len) && (less(A, j, j + 1, null)))
                j++;
            if (!less(A, indice, j, null))
                break;
            exch(A, indice, j);
            indice = j;
        }
    }
    private static void sink(Comparable[] A, int indice, int len, Comparator c) {
        int j;
        while (indice <= len / 2) {
            j = 2 * indice;
            if ((j < len) && (less(A, j, j + 1, c)))
                j++;
            if (!less(A, indice, j, c))
                break;
            exch(A, indice, j);
            indice = j;
        }
    }
    private static void exch(Object[] A, int i, int j) {
        i = getArrayIndex(i);
        j = getArrayIndex(j);
        Object k = A[i];
        A[i] = A[j];
        A[j] = k;
    }
    private static boolean less(Comparable[] A, int i, int j, Comparator c) {
        i = getArrayIndex(i);
        j = getArrayIndex(j);
        int compareValue;
        if (c == null)
            compareValue = A[i].compareTo(A[j]);
        else
            compareValue = c.compare(A[i], A[j]);
        if (compareValue < 0)
            return true;
        return false;
    }
    private static int getArrayIndex(int indice) {
        return --indice;
    }
    public static void show(Comparable[] array) {
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + ",");
        }
    }
}