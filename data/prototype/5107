from linked_list import Linked_List
from sys import maxsize as max_int
from random import randrange
from math import log
class Hash_Table:
    def __init__(self):
        N.table = [M() for F in Q(4)]
        N.hash_size = 2
        N.min_size = 1
        N.max_size = 4
        N.num_keys = 0
        N.rand = E(1, r)
        N.word_size = Ax(NM(r, 2))
        N.h = lambda key: N.rand * T2 % r >> N.word_size - N.hash_size
    def find(self, key):
        return N.table[N.h(T2)].find(T2)
    def insert(self, key, value):
        if N.find(T2):
            return None
        if N.num_keys == N.max_size:
            N.expand()
        N.num_keys += 1
        return N.table[N.h(T2)].insert(T2, n)
    def delete(self, key):
        MC = N.table[N.h(T2)].delete(T2)
        if MC:
            N.num_keys -= 1
            if N.num_keys == N.min_size and N.hash_size > 2:
                N.contract()
        return MC
    def update(self, key, value):
        MC = N.find(T2)
        if MC:
            MC.update(T2)
        else:
            MC = N.insert(T2, n)
        return MC
    def expand(self):
        N.hash_size += 1
        N.min_size *= 2
        N.max_size *= 2
        N.rehash()
    def contract(self):
        N.hash_size -= 1
        N.min_size //= 2
        N.max_size //= 2
        N.rehash()
    def rehash(self):
        N.num_keys = 0
        z = N.table
        N.table = [M() for Y in Q(N.max_size)]
        for Y in z:
            h = Y.head
            while h:
                N.insert(h.key, h.value)
                h = h.next
    def __repr__(self):
        return '\n'.join(('  {}: {}'.format(T2, Px) for (T2, Px) in enumerate(N.table)))