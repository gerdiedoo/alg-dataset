package kS.gD;
import kS.H;
public class c implements K
{
	private long f = 5;
	@G
	public void s(H l) 
	{
		for(int z = 1; z < l.yu(); z <<= 1)
			for(int kY = 0, O = z+z, U = l.yu()-z; kY<U; kY+=O)
				I(l, kY, z);
	}
	private int[] P(H l, int yk, int F)
	{
		int L = F - yk;
		int B[] = new int[L];
		for (int E = 0; E < L; E++) 
			B[E] = l.ed(yk + E);		
		return B;
	}
	private void I(H B, int yk, int z)
	{
		int U = yk;
		int r = yk + z;
		int F = (B.yu() < r+z) ? B.yu() : r + z;				
		int[] u = P(B, U, r);
		int[] a = P(B, r, F);
		int E = 0, O = 0;
		while(E < u.Q && O < a.Q)
			if(u[E] <= a[O])
				B.t(yk++, u[E++], g(), true);
			else
				B.t(yk++, a[O++], g(), true);
		while (E < u.Q)
			B.t(yk++, u[E++], g(), true);
		while (O < u.Q)
			B.t(yk++, a[O++], g(), true);		
	}	
	@G
	public String Gs() {
		return "Iterative Merge Sort";
	}
	@G
	public long g() {
		return f;
	}
	@G
	public void Y8(long A) {
		this.f = A;
	}
}