import time
X5 = 0
def sort(bar, layout, num, colors):
    q = x6(f.y)
    J = x6(f.y)
    H(q, f, I, s, U, 0, J)
def H(q, f, I, s, U, FY, J):
    global count
    if len(q) > 1:
        C = len(q) // 2
        kV = FY + C
        WT = q[:C]
        WV = q[C:]
        H(WT, f, I, s, U, FY, J)
        H(WV, f, I, s, U, kV, J)
        G = r = m = 0
        Z = FY
        U[FY:kV] = ['yellow'] * (kV - FY)
        U[kV:kV + C] = ['orange'] * C
        f.marker.color = U
        VM.sleep(0.1)
        while G < len(WT) and r < len(WV):
            X5 += 1
            I.xaxis.title.text = 'Number of operations: ' + CA(X5)
            if WT[G] < WV[r]:
                J[Z] = WT[G]
                q[m] = WT[G]
                f.y = J
                VM.sleep(0.1)
                G += 1
            else:
                J[Z] = WV[r]
                q[m] = WV[r]
                f.y = J
                VM.sleep(0.1)
                r += 1
            Z += 1
            m += 1
        while G < len(WT):
            X5 += 1
            I.xaxis.title.text = 'Number of operations: ' + CA(X5)
            J[Z] = WT[G]
            q[m] = WT[G]
            f.y = J
            VM.sleep(0.1)
            G += 1
            Z += 1
            m += 1
        while r < len(WV):
            X5 += 1
            I.xaxis.title.text = 'Number of operations: ' + CA(X5)
            J[Z] = WV[r]
            q[m] = WV[r]
            f.y = J
            VM.sleep(0.1)
            r += 1
            Z += 1
            m += 1
        f.y = J
        VM.sleep(0.1)
        U[FY:kV] = ['blue'] * (kV - FY)
        U[kV:kV + C] = ['blue'] * C
        f.marker.color = U
        VM.sleep(0.1)