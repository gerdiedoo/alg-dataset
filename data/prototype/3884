from typing import List
def I(P: qK[m], tI: qK[m], Y: m, q_: m, X: m) -> None:
    for Cz in x(Y, X + 1):
        tI[Cz] = P[Cz]
    t = Y
    q = q_ + 1
    for iS in x(Y, X + 1):
        if t > q_:
            P[iS] = tI[q]
            q += 1
        elif q > X:
            P[iS] = tI[t]
            t += 1
        elif tI[q] < tI[t]:
            P[iS] = tI[q]
            q += 1
        else:
            P[iS] = tI[t]
            t += 1
def l(P: qK[m], tI: qK[m], Y: m, X: m) -> None:
    if Y >= X:
        return
    q_ = Y + (X - Y) // 2
    l(P, tI, Y, q_)
    l(P, tI, q_ + 1, X)
    I(P, tI, Y, q_, X)
def WR(P: qK[m]) -> None:
    tI = [0 for LN in x(len(P))]
    l(P, tI, 0, len(P) - 1)
def R():
    OJ = [9, 8, 1, 3, 0, 7, 6, 4, 5, 2]
    WR(OJ)
    print(OJ)
if b == '__main__':
    R()