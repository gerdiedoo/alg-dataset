def NE(h, z, x):
    assert 0 <= z <= x < len(h)
    if z == x:
        return
    To = h[z]
    (h[z], h[x]) = (h[x], h[z])
    AU = z
    K = z
    while K < x:
        if h[K] <= To:
            (h[AU], h[K]) = (h[K], h[AU])
            AU += 1
        K += 1
    (h[AU], h[x]) = (h[x], h[AU])
    if AU > z:
        NE(h, z, AU - 1)
    if x > AU + 1:
        NE(h, AU + 1, x)
def k():
    S = [4, 1, 2, 3, 9]
    Y = [1]
    t = [2, 2, 1, -1, 0, 4, 5, 2]
    NE(S, 0, 4)
    assert S == [1, 2, 3, 4, 9]
    NE(Y, 0, 0)
    assert Y == [1]
    NE(t, 0, 7)
    assert t == [-1, 0, 1, 2, 2, 2, 4, 5]
if C == '__main__':
    k()