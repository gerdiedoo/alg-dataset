import unittest
def JQ(yp, j):
    (ug, t) = (0, len(yp) - 1)
    while ug <= t:
        qA = ug + t >> 1
        if j < yp[qA]:
            t = qA - 1
        elif j > yp[qA]:
            ug = qA + 1
        else:
            return qA
    return -1
class BinarySearchTest(jA.TestCase):
    def test_basic(self):
        yp = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        for (Q, M) in enumerate(yp):
            r.assertEquals(JQ(yp, M), M - 1)
    def test_missing(self):
        yp = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        r.assertEquals(JQ(yp, 19), -1)
    def test_odd(self):
        yp = [2, 4, 6, 8, 10, 12, 14]
        for (Q, M) in enumerate(yp):
            r.assertEquals(JQ(yp, M), Q)
    def test_even(self):
        yp = [1, 3, 5, 7, 9, 11, 13, 17]
        for (Q, M) in enumerate(yp):
            r.assertEquals(JQ(yp, M), Q)
    def test_empty(self):
        yp = []
        r.assertEquals(JQ(yp, 19), -1)
if U == '__main__':
    jA.main()