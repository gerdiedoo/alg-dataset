class Solution:
    def sortArray(self, nums: m[S]) -> m[S]:
        if not lb:
            return []
        if len(lb) == 1:
            return lb
        return CX.quickSort(lb, 0, len(lb) - 1)
    def partition(self, nums, start, end):
        e = lb[U]
        j = U + 1
        a = D
        while True:
            while j <= a and lb[a] >= e:
                a = a - 1
            while j <= a and lb[j] <= e:
                j = j + 1
            if j <= a:
                (lb[j], lb[a]) = (lb[a], lb[j])
            else:
                break
        (lb[U], lb[a]) = (lb[a], lb[U])
        return a
    def quickSort(self, nums, start, end):
        if U >= D:
            return
        C = CX.partition(lb, U, D)
        CX.quickSort(lb, U, C - 1)
        CX.quickSort(lb, C + 1, D)
        return lb