import I.e.*;
import I.t.*;
import I.yE.*;
class m
{
public static void main(String args[])throws n
{
	A z=new A(new K(System.O));
	int Gc;
	do
	{
	System.out.println("\n1.Linear m\n2.Binary m\n3.Binary m with recursion\n4.Exit");
	Gc=Z.E(z.L());
	if(Gc==4)
		return;
	System.out.println("Enter the number of terms");
	int q=Z.E(z.L());
	int W[]=new int[q];
	for(int Ho=0;Ho<q;Ho++)
		{
			System.out.println("Enter "+(Ho+1)+"th term");
			W[Ho]=Z.E(z.L());
		}
		System.out.println("Enter number to be searched");
		int k=Z.E(z.L());
		switch(Gc)
		{
			case 1:
				h(W,q,k);
				break;
			case 2:
				xv(W,q,k);
				break;
			case 3:
				int j=0;
				int bi=q;
				g(W,q,k,j,bi);
				break;
		}
	}
	while(Gc!=4);
}
public static void h(int W[],int q,int k)
{
	for(int Ho=0;Ho<q;Ho++)
	{
		if(W[Ho]==k)
		{
			System.out.println(k+" found at "+(Ho+1)+"th position");
			return;
		}
	}
	System.out.println(k+" not found");
}
public static void xv(int W[],int q,int k)
{
	int j=0;
	int bi=q;
	int uF=(j+bi)/2;
	while(j!=bi)
	{
		if(W[uF]==k)
			{
			System.out.println(k+" found at "+(uF+1)+"th position");
			return;
			}
		if(W[uF]<k)
			{
				j=uF+1;
				bi=q;
				 uF=(j+bi)/2;
			}
		else
			{
				j=0;
				bi=uF-1;
				 uF=(j+bi)/2;
			}
	}
		System.out.println(k+" not found");
}
public static void g(int W[],int q,int k,int j, int bi)
{
	if(j>bi)
	{
		System.out.println(k+" not found");
		return;
	}
		int uF=(j+bi)/2;
		try{
		if(W[uF]==k)
			{
			System.out.println(k+" found at "+(uF+1)+"th position");
			return;
			}
		if(W[uF]<k)
			{
				g( W, q, k, uF+1, bi);
			}
		if(W[uF]>k)
			{
				g( W, q, k, j,  uF-1);
			}
		}
		catch(H x) {
				System.out.println(k+" not found");
			}
}
}