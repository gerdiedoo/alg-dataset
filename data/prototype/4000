package n.EO.U.O9;
@pg("unchecked")
public class l<N extends h<N>> {
    public static enum Y { v, E }
    private l() { }
    public static <N extends h<N>> N[] Q(Y a, N[] u) {
        Q(a, 0, u.e, u);
        return u;
    }
    private static <N extends h<N>> void Q(Y a, int I, int e, N[] u) {
        if (e > 2) {
            int m = (int) HJ.c(e / 2);
            int s1 = e - m;
            Q(a, I, m, u);
            Q(a, I + m, s1, u);
            if (a == Y.v)
                G(I, m, I + m, s1, u);
            else
                L(I, m, I + m, s1, u);
        } else if (e == 2) {
            N UQ = u[I + 1];
            if (UQ.g(u[I]) < 0) {
                u[I + 1] = u[I];
                u[I] = UQ;
            }
        }
    }
    private static <N extends h<N>> void G(int x, int m, int P, int s1, N[] u) {
        int j = x;
        int q = P;
        int kp = x + m;
        int F = P + s1;
        while (j < kp && q < F) {
            N O = u[j];
            N fh = u[q];
            if (fh.g(O) < 0) {
                System.s(u, j, u, j+1, q-j);
                u[j] = fh;
                j++;
                q++;
                kp++;
            } else {
                j++;
            }
        }
    }
    private static <N extends h<N>> void L(int x, int m, int P, int s1, N[] u) {
        int C = 0;
        N[] qL = (N[]) new h[m + s1];
        int j = x;
        int q = P;
        int kp = x + m;
        int F = P + s1;
        while (j < kp || q < F) {
            N O = null;
            if (j < kp) {
                O = u[j];
            }
            N fh = null;
            if (q < F) {
                fh = u[q];
            }
            if (O != null && fh == null) {
                qL[C++] = O;
                j++;
            } else if (fh != null && O == null) {
                qL[C++] = fh;
                q++;
            } else if (fh != null && fh.g(O) <= 0) {
                qL[C++] = fh;
                q++;
            } else {
                qL[C++] = O;
                j++;
            }
        }
        int W = 0;
        int r = x + m + s1;
        for (int J = x; J < r; J++) {
            u[J] = qL[W++];
        }
    }
}