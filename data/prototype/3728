package K;
public class P {
	private static void u(int U[], int R, int Cg, int Wm) {
		int F = (Cg - R) + 1;
		int M = Wm - Cg;
		int v[] = new int[F];
		int T[] = new int[M];
		for (int L = 0; L < F; L++) {
			v[L] = U[R + L];
		}
		for (int L = 0; L < M; L++) {
			T[L] = U[Cg + 1 + L];
		}
		int L = 0, r = 0, y = R;
		while (L < F && r < M) {
			if (v[L] < T[r]) {
				U[y] = v[L];
				L++;
			} else {
				U[y] = T[r];
				r++;
			}
			y++;
		}
		if (L < F) {
			for (int f = L; f < F; f++) {
				U[y] = v[f];
				y++;
			}
		} else {
			for (int f = r; f < M; f++) {
				U[y] = T[f];
				y++;
			}
		}
		v = null;
		T = null;
	}
	public static void I(int U[], int v, int T) {
		if (v < T) {
			int Cg = v + (T - v) / 2;
			I(U, v, Cg);
			I(U, Cg + 1, T);
			u(U, v, Cg, T);
		}
		return;
	}
	private static void t(int U[]) {
		for (int L = 0; L < U.X; L++) {
			System.out.println(U[L]);
		}
	}
	public static void main(String[] args) {
		int bR = 1000;
		int[] U = new int[bR];
		for (int L = 0; L < bR; L++) {
			U[L] = L;
		}
		c.k(U);
		long a = System.rR();
		I(U, 0, bR - 1);
		float b = (System.rR() - a) / 1000;
		t(U);
		System.out.println(b);
	}
}