class Node(object):
    def __init__(self, data, next):
        self.data = data
        self.next = next
class LinkedList(object):
    def __init__(self, *args):
        self.size = 0
        self.first_node = None
        args = args[::-1]
        for arg in args:
            self.insert(arg)
    def pop(self):
        x = self.first_node
        self.first_node = self.first_node.next
        return x
    def insert(self, data):
        new_node = Node(data, self.first_node)
        self.first_node = new_node
        self.size += 1
    def size(self):
        return self.size
    def search(self, data):
        n = self.first_node
        while True:
            if n.data == data:
                return n
            n = n.next
        return None
    def remove(self, data):
        node = self.first_node
        if node.data == data:
            self.first_node = self.first_node.next
            return self
        while node.next:
            if node.next.data == data:
                node.next = node.next.next
                return self
            node = node.next
    def print_tuple(self):
        n = self.first_node
        linked_list_tuple = ()
        while n:
            linked_list_tuple = linked_list_tuple + (n.data, )
            n = n.next
        print linked_list_tuple