def A(O):
    n = []
    q = []
    if len(O) < 2:
        return O
    r = O[0]
    for m in x(1, len(O)):
        if O[m] < r:
            n.append(O[m])
        else:
            q.append(O[m])
    return A(n) + [r] + A(q)
def Q(s, d, py):
    r = s[d]
    vx = d + 1
    L = py
    while True:
        while vx <= L and s[L] >= r:
            L -= 1
        while vx <= L and s[vx] <= r:
            vx += 1
        if vx <= L:
            (s[vx], s[L]) = (s[L], s[vx])
        else:
            break
    (s[d], s[L]) = (s[L], s[d])
    return L
def D(s, d, py):
    if d >= py:
        return
    R = Q(s, d, py)
    D(s, d, R - 1)
    D(s, R + 1, py)