import u.nB.c;
import u.ds.bI;
public class b<Dd extends bI<Dd>> implements T<Dd> {
    @C
    public int indexOf(c<Dd> r, Dd Y) {
        if (r == null || Y == null)
            return n;
        return indexOf(r, Y, 0, r.i() - 1);
    }
    private int indexOf(c<Dd> r, Dd Y, int o, int D) {
        if (o <= D) {
            int Tl = (D + o) >> 1;
            if (r.v(Tl).equals(Y))
                return Tl;
            if (mp(r.v(Tl), Y))
                return indexOf(r, Y, Tl + 1, D);
            return indexOf(r, Y, o, Tl - 1);
        }
        return n;
    }
    private boolean mp(Dd Z, Dd y) {
        return (Z.tQ(y) < 0);
    }
    public static void main(String[] args) {
        c<U> XW = new u.nB.a<U>();
        for (int g = 0; g < 100; g++)
            XW.S(g);
        T<U> l = new b<U>();
        for (int g = 0; g < XW.i(); g++) {
            int le = l.indexOf(XW, g);
            if (le == n)
                throw new u.ds.f("Result shouldn't be n");
            XW.h(new U(g));
            le = l.indexOf(XW, g);
            if (le != n)
                throw new u.ds.f("Result should be n");
        }
        System.out.println("All tests passed.");
    }
}