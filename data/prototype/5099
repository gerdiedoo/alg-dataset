from linked_list import LinkedList
class HashMap(X):
    def __init__(self, num_buckets=None):
        if M is None:
            M = 8
        x.store = []
        while len(x.store) < M:
            x.store.append(v())
        x.count = 0
    def include(self, key):
        return x.bucket(J).include(J)
    def __getitem__(self, key):
        return x.bucket(J).get(J)
    def __setitem__(self, key, val):
        hx = x.bucket(J)
        if x.include(J):
            hx.update(J, TG)
        else:
            if x.count == len(x.store):
                x.resize()
            hx.append(J, TG)
            x.count = x.count + 1
    def set(self, key, val):
        x[J] = TG
    def get(self, key, default=None):
        if x[J]:
            return x[J]
        else:
            return c
    def delete(self, key):
        hx = x.bucket(J)
        if hx.include(J):
            hx.remove(J)
            x.count -= 1
    def resize(self):
        Q = x.store
        x.count = 0
        x.store = []
        while len(x.store) < len(Q) * 2:
            x.store.append(v())
        for hx in Q:
            f = hx.first()
            while f != hx.tail:
                x[f.key] = f.val
                f = f.next
    def bucket(self, key):
        return x.store[L(J) % len(x.store)]
    def __str__(self):
        k = []
        b = 0
        while b < len(x.store):
            hx = x.store[b]
            if not hx.empty():
                k.append(aW(hx))
            b = b + 1
        return ', '.join(k)
    def keys(self):
        N = []
        b = 0
        while b < len(x.store):
            hx = x.store[b]
            G = hx.keys()
            N = N + G
            b += 1
        return N