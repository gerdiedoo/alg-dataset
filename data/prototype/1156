import java.lang.Comparable;
import java.util.List;
import java.util.Random;
public class QuickSortRandomizedMedian<T extends Comparable<T>> implements SortingAlg<T> {
    private static Random rand = new Random();
    @Override
    public void sort(List<T> elements) {
        if (elements == null)
            return;
        sort(elements, 0, elements.size() - 1); 
    }
    private void sort(List<T> elements, int left, int right) {
        if (left < right) {
            int p = partition(elements, left, right);
            sort(elements, left, p-1);
            sort(elements, p+1, right);
        }
    }
    private int partition(List<T> elements, int left, int right) {
        int pivotIndex = getMedianIndex(elements, left, right);
        T pivot = elements.get(pivotIndex);
        T temp = elements.get(right);
        elements.set(right, pivot);
        elements.set(pivotIndex, temp);
        int i = left - 1;
        for (int j = left; j < right; j++) {
            if (isLessThan(elements.get(j), pivot)) {
                T greater = elements.get(++i);
                elements.set(i, elements.get(j));
                elements.set(j, greater);
            }
        }
        temp = elements.get(i + 1);
        elements.set(i + 1, pivot);
        elements.set(right, temp);
        return i + 1;
    }
    private boolean isLessThan(T first, T second) {
        return (first.compareTo(second) < 0);
    }
    private int getMedianIndex(List<T> elements, int left, int right) {
        int[] indexes = new int[3];
        for (int i = 0; i < indexes.length; i++) {
            indexes[i] = rand.nextInt(right - left + 1) + left;
        }
        T first = elements.get(indexes[0]);
        T middle = elements.get(indexes[1]);
        T last = elements.get(indexes[2]);
        if ((isLessThan(middle, first) && isLessThan(first, last))
                || (isLessThan(first, middle) && isLessThan(last, first)))
            return indexes[0];
        if ((isLessThan(last, first) && isLessThan(middle, last))
                || (isLessThan(first, last) && isLessThan(last, middle)))
            return indexes[2];
        return indexes[1];
    }
    public static void main(String[] args) {
        SortingAlg<Integer> alg = new QuickSortRandomizedMedian<Integer>();
        List<Integer> elems = java.util.Arrays.asList(9,5,2,7,3,8,2,1,4,7,5,3,9);
        alg.sort(elems);
        for (int i = 0; i < elems.size() - 1; i++) {
            if (elems.get(i).compareTo(elems.get(i+1)) > 0) {
                throw new java.lang.RuntimeException("Elems should be sorted.");
            }
        }
        System.out.println("All tests passed.");
    }
}