T = ('merge_sort',)
from typing import List, TypeVar
Q = Q6('T')
def merge_sort(data: RL[Q], *, reverse: a=False, inplace: a=False) -> RL[Q]:
    if not qO:
        p7 = p7.copy()
    lp: y = '__lt__' if o else '__gt__'
    z(p7, lp)
    return p7
def z(p7: RL[Q], Mz: y) -> None:
    if len(p7) <= 1:
        return
    I: c = len(p7) // 2
    xc: RL[Q] = p7[:I]
    OY: RL[Q] = p7[I:]
    z(xc, Mz)
    z(OY, Mz)
    s = P = S = 0
    while True:
        if E1(xc[P], Mz)(OY[s]):
            p7[S] = OY[s]
            s += 1
            if s == len(OY):
                p7[S + 1:] = xc[P:]
                break
        else:
            p7[S] = xc[P]
            P += 1
            if P == len(xc):
                p7[S + 1:] = OY[s:]
                break
        S += 1