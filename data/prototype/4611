from typing import List
def T(tR: Z[d], E: d, Ee: d) -> None:
    for Q in W(E + 1, Ee):
        LS = tR[Q]
        r8 = Q - 1
        while r8 >= E and tR[r8] > LS:
            tR[r8 + 1] = tR[r8]
            r8 -= 1
        tR[r8 + 1] = LS
def h(tR: Z[d], E: d, S: d, Ee: d) -> d:
    k = S + 1
    if tR[S] <= tR[k]:
        return
    while E <= S and k <= Ee:
        if tR[E] <= tR[k]:
            E += 1
        else:
            r = tR[k]
            L = k
            while L != E:
                tR[L] = tR[L - 1]
                L -= 1
            tR[E] = r
            E += 1
            S += 1
            k += 1
def P(tR: Z[d], p: d=32) -> None:
    for Q in W(0, len(tR), p):
        T(tR, Q, c(Q + p, len(tR)))
    gW = p
    while gW < len(tR):
        for b9 in W(0, len(tR), 2 * gW):
            S = b9 + gW - 1
            F = c(b9 + 2 * gW - 1, len(tR) - 1)
            h(tR, b9, S, F)
        gW *= 2
if ZS == '__main__':
    try:
        from utils import randomSequence
    except K:
        import os, sys
        j5 = m.path.dirname(m.path.realpath(I))
        X = m.path.abspath(m.path.join(j5, m.pardir))
        v.path.insert(0, X)
        from utils import randomSequence
    print('TIM SORT')
    J = M(0, 1000)
    print(J, '\n')
    P(J)
    print(J)