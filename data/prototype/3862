import time
R = 0
def sort(bar, layout, num, colors):
    M = o(Pd.y)
    ar = o(Pd.y)
    w(M, Pd, yY, LB, U, 0, ar)
def w(M, Pd, yY, LB, U, g, ar):
    global count
    if len(M) > 1:
        S = len(M) // 2
        W = g + S
        H = M[:S]
        O = M[S:]
        w(H, Pd, yY, LB, U, g, ar)
        w(O, Pd, yY, LB, U, W, ar)
        i = F = Sj = 0
        Hd = g
        U[g:W] = ['yellow'] * (W - g)
        U[W:W + S] = ['orange'] * S
        Pd.marker.color = U
        XB.sleep(0.1)
        while i < len(H) and F < len(O):
            R += 1
            yY.xaxis.title.text = 'Number of operations: ' + P(R)
            if H[i] < O[F]:
                ar[Hd] = H[i]
                M[Sj] = H[i]
                Pd.y = ar
                XB.sleep(0.1)
                i += 1
            else:
                ar[Hd] = O[F]
                M[Sj] = O[F]
                Pd.y = ar
                XB.sleep(0.1)
                F += 1
            Hd += 1
            Sj += 1
        while i < len(H):
            R += 1
            yY.xaxis.title.text = 'Number of operations: ' + P(R)
            ar[Hd] = H[i]
            M[Sj] = H[i]
            Pd.y = ar
            XB.sleep(0.1)
            i += 1
            Hd += 1
            Sj += 1
        while F < len(O):
            R += 1
            yY.xaxis.title.text = 'Number of operations: ' + P(R)
            ar[Hd] = O[F]
            M[Sj] = O[F]
            Pd.y = ar
            XB.sleep(0.1)
            F += 1
            Hd += 1
            Sj += 1
        Pd.y = ar
        XB.sleep(0.1)
        U[g:W] = ['blue'] * (W - g)
        U[W:W + S] = ['blue'] * S
        Pd.marker.color = U
        XB.sleep(0.1)