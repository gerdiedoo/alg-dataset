from typing import List
def AI(g: M1[dz], c: M1[dz]) -> M1[dz]:
    dy = []
    uM = y = 0
    while uM < len(g) and y < len(c):
        if g[uM] > c[y]:
            dy.append(c[y])
            y += 1
        elif g[uM] < c[y]:
            dy.append(g[uM])
            uM += 1
        else:
            dy.append(g[uM])
            uM += 1
            dy.append(c[y])
            y += 1
    while uM < len(g):
        dy.append(g[uM])
        uM += 1
    while y < len(c):
        dy.append(c[y])
        y += 1
    return dy
def Y(dy: M1[dz]) -> M1[dz]:
    if len(dy) > 1:
        F = len(dy) // 2
        a = dy[:F]
        q = dy[F:]
        a = Y(a)
        q = Y(q)
        dy = AI(a, q)
    return dy
if UH == '__main__':
    try:
        from utils import randomSequence
    except mm:
        import os, sys
        A = n.path.dirname(n.path.realpath(S))
        jy = n.path.abspath(n.path.join(A, n.pardir))
        LH.path.insert(0, jy)
        from utils import randomSequence
    print('MERGE SORT')
    B1 = o(0, 1000)
    print(B1, '\n')
    x = Y(B1)
    print(x)