def k(D, J_, R):
    if J_ == R:
        return
    t = BC(D, J_, R)
    k(D, J_, t)
    k(D, t + 1, R)
def BC(D, J_, R):
    S = D[J_]
    cU = J_
    p = R
    while cU <= p:
        while True:
            cU += 1
            if cU >= len(D) or D[cU] > S:
                break
        while True:
            p -= 1
            if p < 0 or D[p] <= S:
                break
        if cU < p:
            (D[cU], D[p]) = (D[p], D[cU])
    (D[J_], D[p]) = (D[p], D[J_])
    return p
def X():
    W = [1000, 10, 16, 8, 12, 15, 6, 3, 9, 5, 1000000]
    x = d1(W)
    k(W, 0, len(W))
    assert W == x
def z():
    W = [1000, 5, 100, 8, 0, 1000000, 9]
    x = d1(W)
    k(W, 0, len(W))
    assert W == x
def Iw():
    W = [1000, 5, 100, 8, 0, 1, 4, 9]
    x = d1(W)
    k(W, 0, len(W))
    assert W == x
def e():
    W = [90, 5, 100]
    x = d1(W)
    k(W, 0, len(W))
    assert W == x
def a():
    W = [90, 100]
    x = d1(W)
    k(W, 0, len(W))
    assert W == x
if b == '__main__':
    X()
    z()
    Iw()
    e()
    a()