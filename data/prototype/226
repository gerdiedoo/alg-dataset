from __future__ import print_function
class LinkedList(object):
    def __init__(self, size):
        self.size = size
        self.head = 0
        self.keys = [None for _ in range(self.size * 3)]
        self.free = list(reversed(range(1, self.size)))
    def add(self, key):
        if not self.free:
            raise Exception('The linked list is full')
        position = self.free.pop()
        self.keys[position * 3] = key
        self.keys[position * 3 + 1] = self.head
        self.keys[(position - 1) * 3 + 2] = position * 3
        self.head = position * 3
    def search(self, key, default=None):
        i = self.head
        val = self.keys[i]
        while val is not None and val != key:
            i = self.keys[i + 1]
            val = self.keys[i]
        return val if val else default
    def remove(self, key):
        i = self.head
        val = self.keys[i]
        while val is not None and val != key:
            i = self.keys[i + 1]
            val = self.keys[i]
        if val is None:
            return None
        self.free.append(i // 3)
        if self.head == i:
            self.head = self.keys[i + 1]
            self.keys[self.head + 1] = None
            self.keys[self.head + 2] = None
        else:
            self.keys[i] = None
            next_ = self.keys[i + 1]
            prev = self.keys[i + 2]
            self.keys[prev + 1] = next_
            self.keys[next_ + 2] = prev
        self.keys[i] = None
        self.keys[i + 1] = None
        self.keys[i + 2] = None
        return val
    def __str__(self):
        i = self.head
        val = self.keys[i]
        string = ''
        while val is not None:
            string += str(val) + ' -> '
            i = self.keys[i + 1]
            val = self.keys[i]
        return '{' + string + 'None}'
if __name__ in '__main__':
    LINKED_LIST = LinkedList(size=5)
    for k in [10, 20]:
        LINKED_LIST.add(k)
        print('add {}'.format(k))
    print('linked list: ', LINKED_LIST)
    for k in [10, 20, 30]:
        print('search key {}:'.format(k), LINKED_LIST.search(k))
    for k in [10, 30]:
        LINKED_LIST.remove(k)
        print('remove {}'.format(k))
    print('linked list: ', LINKED_LIST)
    for k in [10, 0, -10]:
        LINKED_LIST.add(k)
        print('add {}'.format(k))
    print('linked list: ', LINKED_LIST)