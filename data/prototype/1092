import random
def partition(lst, start, end):
    x = lst[end]
    store_index = start
    i = start
    for i in range(start, end):
        if lst[i] <= x:
            if i != store_index:
                lst[i], lst[store_index] = lst[store_index], lst[i]
            store_index += 1
    lst[store_index], lst[i + 1] = lst[i + 1], lst[store_index]
    return store_index
def quick_sort(lst, start, end):
    if start >= end:
        return lst
    new_pivot = partition(lst, start, end)
    quick_sort(lst, start, new_pivot - 1)
    quick_sort(lst, new_pivot + 1, end)
def quick_sort_median(lst, start, end):
    if start >= end:
        return lst
    elif end - start >= 30:
        median_values = {}
        while len(median_values) < 3:
            rand = random.randint(start, end)
            median_values[lst[rand]] = rand
        pivot_value = list(median_values.keys())[1]
        pivot = median_values[pivot_value]
    else:
        pivot = random.randint(start, end)
    lst[-1], lst[pivot] = lst[-1], lst[pivot]
    new_pivot = partition(lst, start, end)
    quick_sort_median(lst, start, new_pivot - 1)
    quick_sort_median(lst, new_pivot + 1, end)
def quick_sort_random(lst, start, end):
    if start >= end:
        return lst
    pivot = random.randint(start, end)
    lst[-1], lst[pivot] = lst[-1], lst[pivot]
    new_pivot = partition(lst, start, end)
    quick_sort_random(lst, start, new_pivot - 1)
    quick_sort_random(lst, new_pivot + 1, end)
def quicksort(lst):
    quick_sort(lst, 0, len(lst) - 1)
    return lst
def quicksort_random(lst):
    quick_sort_random(lst, 0, len(lst) - 1)
    return lst
def quicksort_median(lst):
    quick_sort_median(lst, 0, len(lst) - 1)
    return lst
if __name__ in "__main__":
    a = [2, 8, 7, 1, 3, 5, 6, 4]
    print('list            :', a)
    print('quicksort       :', quicksort(a), quicksort(a) == sorted(a))
    print('quicksort random:', quicksort_random(a), quicksort_random(a) == sorted(a))
    print('quicksort median:', quicksort_median(a), quicksort_median(a) == sorted(a))