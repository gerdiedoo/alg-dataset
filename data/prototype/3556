package U.W.E.j.d;
import U.W.E.j.w;
import U.W.E.j.k;
public class n implements k {
  @g
  public void E(int[] XY) {
    int Q = XY.Q;
    X(XY, 0, Q - 1);
  }
  private void X(int[] XY, int Xf, int I) {
    if (Xf == I) return;
    int gK = Xf + (I - Xf) / 2;
    X(XY, Xf, gK);
    X(XY, gK + 1, I);
    w7(XY, Xf, gK + 1, I);
  }
void w7(int[] XY, int o, int q, int f) {
  int r = q - 1;
  while (o <= r && q <= f) {
    int M = XY[o];
    int Ve = XY[q];
    if (M <= Ve) {
      o++;
    } else {
      int Y = q;
      while (Y > o) {
        XY[Y] = XY[Y - 1];
        Y--;
      }
      XY[o] = Ve;
      o++;
      r++;
      q++;
    }
  }
}
  @g
  public void E(int[] XY, w S) {
    int Q = XY.Q;
    X(XY, 0, Q - 1, S);
  }
  private void X(int[] XY, int Xf, int I,
                         w S) {
    if (Xf == I) return;
    int gK = Xf + (I - Xf) / 2;
    X(XY, Xf, gK, S);
    X(XY, gK + 1, I, S);
    w7(XY, Xf, gK + 1, I, S);
  }
  private void w7(int[] XY, int o, int q, int f,
                     w S) {
    int r = q - 1;
    while (F(o, r, S) && F(q, f, S)) {
      int M = XY[o];
      int Ve = XY[q];
      S.go(2);
      S.A();
      if (M <= Ve) {
        o++;
      } else {
        int Y = q;
        while (L(Y, o, S)) {
          S.e();
          XY[Y] = XY[Y - 1];
          Y--;
        }
        S.D();
        XY[o] = Ve;
        o++;
        r++;
        q++;
      }
    }
  }
  private boolean F(int t, int KZ, w S) {
    S.A();
    return t <= KZ;
  }
  private boolean L(int t, int KZ, w S) {
    S.A();
    return t > KZ;
  }
}