package com.zhokhov.interview.sorting;
import static com.zhokhov.interview.util.Console.*;
public class QuickSort {
    private int COMPARISONS_COUNT;
    private int SWAPS_COUNT;
    public void sort(int array[]) {
        COMPARISONS_COUNT = 0;
        SWAPS_COUNT = 0;
        quickSort(array, 0, array.length - 1);
    }
    private void quickSort(int array[], int startIndex, int endIndex) {
        __grey("\nquickSort, startIndex: " + startIndex + ", endIndex: " + endIndex + "  ==> ");
        ____purple("" + (endIndex - startIndex >= 1));
        COMPARISONS_COUNT++;
        if (endIndex - startIndex >= 1) {
            int rightIndex = partition(array, startIndex, endIndex);
            quickSort(array, startIndex, rightIndex - 1);
            quickSort(array, rightIndex + 1, endIndex);
        }
    }
    private int partition(int array[], int startIndex, int endIndex) {
        int leftIndex = startIndex;
        int rightIndex = endIndex;
        int pivot = array[startIndex];
        ____grey("pivot: " + pivot);
        while (rightIndex > leftIndex) {
            COMPARISONS_COUNT++;
            while (array[leftIndex] <= pivot && leftIndex <= endIndex && rightIndex > leftIndex) {
                COMPARISONS_COUNT++;
                leftIndex++;
                ____blue(" new leftIndex: " + leftIndex);
            }
            while (array[rightIndex] > pivot && rightIndex >= startIndex && rightIndex >= leftIndex) {
                COMPARISONS_COUNT++;
                rightIndex--;
                ____blue(" new rightIndex: " + rightIndex);
            }
            COMPARISONS_COUNT++;
            if (rightIndex > leftIndex) {
                swap(array, leftIndex, rightIndex);
            }
        }
        swap(array, startIndex, rightIndex);
        return rightIndex;
    }
    private void swap(int array[], int index1, int index2) {
        SWAPS_COUNT++;
        ____blue("Swapping: " + index1 + " and " + index2);
        int temp = array[index1];
        array[index1] = array[index2];
        array[index2] = temp;
        __red("==> ");
        __dump(array);
        System.out.println("");
    }
    public static void main(String[] args) {
        int array[] = {7, 1, 8, 2, 0, 12, 10, 6, 5, 3};
        __yellow("\nNew array: ");
        __dump(array);
        System.out.println("\nSorting");
        QuickSort quickSort = new QuickSort();
        quickSort.sort(array);
        __green("\nResult: ");
        __dump(array);
        ____grey("\nStatistics");
        __green("  Comparisons: ");
        System.out.print(quickSort.COMPARISONS_COUNT);
        __green("\n  Swaps: ");
        System.out.println(quickSort.SWAPS_COUNT);
    }
}