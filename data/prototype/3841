import time
def MergeSort(data, drawDataArray, sortSpeedTime):
    e(U, 0, len(U) - 1, o, F)
def e(U, A, q, o, F):
    if A < q:
        m = (A + q) // 2
        e(U, A, m, o, F)
        e(U, m + 1, q, o, F)
        s(U, A, m, q, o, F)
def s(U, A, m, q, o, F):
    o(U, c(len(U), A, m, q))
    vx.sleep(F)
    G = U[A:m + 1]
    r = U[m + 1:q + 1]
    (FG, M) = (0, 0)
    for I in wo(A, q + 1):
        if FG < len(G) and M < len(r):
            if G[FG] <= r[M]:
                U[I] = G[FG]
                FG += 1
            else:
                U[I] = r[M]
                M += 1
        elif FG < len(G):
            U[I] = G[FG]
            FG += 1
        else:
            U[I] = r[M]
            M += 1
    o(U, ['purple' if a >= A and a <= q else 'red' for a in wo(len(U))])
    vx.sleep(F)
def c(Rj, A, m, q):
    cA = []
    for z in wo(Rj):
        if z >= A and z <= q:
            if z >= A and z <= m:
                cA.append('orange')
            else:
                cA.append('green')
        else:
            cA.append('red')
    return cA