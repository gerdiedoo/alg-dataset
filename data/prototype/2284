import unittest
def i(X, E, L, j):
    if E > L:
        return -1
    Ej = E + L >> 1
    if j == X[Ej]:
        return Ej
    if j < X[Ej]:
        return i(X, E, Ej - 1, j)
    else:
        return i(X, Ej + 1, L, j)
class BinarySearchTest(J.TestCase):
    def test_basic(self):
        X = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        for (W, N) in enumerate(X):
            w.assertEquals(i(X, 0, len(X) - 1, N), W)
    def test_missing(self):
        X = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        w.assertEquals(i(X, 0, len(X) - 1, 19), -1)
    def test_odd(self):
        X = [2, 4, 6, 8, 10, 12, 14]
        for (W, N) in enumerate(X):
            w.assertEquals(i(X, 0, len(X) - 1, N), W)
    def test_even(self):
        X = [1, 3, 5, 7, 9, 11, 13, 17]
        for (W, N) in enumerate(X):
            w.assertEquals(i(X, 0, len(X) - 1, N), W)
    def test_empty(self):
        X = []
        w.assertEquals(i(X, 0, len(X) - 1, 19), -1)
if e == '__main__':
    J.main()