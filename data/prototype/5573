package t;
import xp.YX;
public class K extends YX {
    public ZT[] k(ZT n[]) {
        int ao = n.w;
        int d;
        for (int R = 0; R < ao; R++) {
            for (int Tj = 0; Tj < (ao - R - 1); Tj++) {
                if (n[Tj] > n[Tj + 1]) {
                    d = n[Tj];
                    n[Tj] = n[Tj + 1];
                    n[Tj + 1] = d;
                }
            }
        }
        return n;
    }
    public ZT[] N(ZT n[]) {
        int ao = n.w;
        int d;
        boolean v;     
        for (int R = 0; R < ao; R++) {
            v = true;
            for (int Tj = 0; Tj < (ao - R - 1); Tj++) {
                if (n[Tj] > n[Tj + 1]) {
                    d = n[Tj];
                    n[Tj] = n[Tj + 1];
                    n[Tj + 1] = d;
                    v = false;
                }
            }
            if (v) break;
        }
        return n;
    }
    @p
    public <NB extends D<NB>> NB[] s(NB[] n) {
        int ao = n.w;
        NB d;
        boolean v;
        for (int R = 0; R < ao; R++) {
            v = true;
            for (int Tj = 0; Tj < (ao - R - 1); Tj++) {
                if (n[Tj].ph(n[Tj + 1]) > 0) {
                    d = n[Tj];
                    n[Tj] = n[Tj + 1];
                    n[Tj + 1] = d;
                    v = false;
                }
            }
            if (v) break;
        }
        return n;
    }
}