import VI.Z.*;
import VI.zb.*;
import VI.r.*;
class n
{
public static void main(String args[])throws Qt
{
	A m=new A(new N(System.L));
	int x;
	do
	{
	System.out.println("\n1.Linear n\n2.Binary n\n3.Binary n with recursion\n4.Exit");
	x=b7.w(m.O());
	if(x==4)
		return;
	System.out.println("Enter the number of terms");
	int D=b7.w(m.O());
	int a[]=new int[D];
	for(int ty=0;ty<D;ty++)
		{
			System.out.println("Enter "+(ty+1)+"th term");
			a[ty]=b7.w(m.O());
		}
		System.out.println("Enter number to be searched");
		int dB=b7.w(m.O());
		switch(x)
		{
			case 1:
				h(a,D,dB);
				break;
			case 2:
				P(a,D,dB);
				break;
			case 3:
				int c1=0;
				int Ro=D;
				C(a,D,dB,c1,Ro);
				break;
		}
	}
	while(x!=4);
}
public static void h(int a[],int D,int dB)
{
	for(int ty=0;ty<D;ty++)
	{
		if(a[ty]==dB)
		{
			System.out.println(dB+" found at "+(ty+1)+"th position");
			return;
		}
	}
	System.out.println(dB+" not found");
}
public static void P(int a[],int D,int dB)
{
	int c1=0;
	int Ro=D;
	int G=(c1+Ro)/2;
	while(c1!=Ro)
	{
		if(a[G]==dB)
			{
			System.out.println(dB+" found at "+(G+1)+"th position");
			return;
			}
		if(a[G]<dB)
			{
				c1=G+1;
				Ro=D;
				 G=(c1+Ro)/2;
			}
		else
			{
				c1=0;
				Ro=G-1;
				 G=(c1+Ro)/2;
			}
	}
		System.out.println(dB+" not found");
}
public static void C(int a[],int D,int dB,int c1, int Ro)
{
	if(c1>Ro)
	{
		System.out.println(dB+" not found");
		return;
	}
		int G=(c1+Ro)/2;
		try{
		if(a[G]==dB)
			{
			System.out.println(dB+" found at "+(G+1)+"th position");
			return;
			}
		if(a[G]<dB)
			{
				C( a, D, dB, G+1, Ro);
			}
		if(a[G]>dB)
			{
				C( a, D, dB, c1,  G-1);
			}
		}
		catch(p v) {
				System.out.println(dB+" not found");
			}
}
}