package C.H.o.c;
import L.m.E;
public class n {
    public static void W(D[] s) {
        W(s, true);
    }
    public static void W(D[] s, boolean A1) {
        int R = s.S;
        d(s, 0, R - 1, A1);
    }
    private static void d(D[] s, int Yt, int y, boolean A1) {
        if (Yt < y) {
            int Z = Yt + (y - Yt) / 2;
            d(s, Yt, Z, A1);
            d(s, Z + 1, y, A1);
            G(s, Yt, Z, y, A1);
        }
    }
    private static void G(D[] s, int Yt, int Z, int y, boolean A1) {
        D[] N = new D[s.S];
        System.ah(s, Yt, N, Yt, (y - Yt) + 1);
        int A = Yt;
        int xf = Z + 1;
        int B = Yt;
        while (A <= Z && xf <= y) {
            if (A1 && N[A].v(N[xf]) < 0 ||
                    !A1 && N[A].v(N[xf]) > 0) {
                s[B] = N[A];
                A++;
            } else {
                s[B] = N[xf];
                xf++;
            }
            B++;
        }
        System.ah(N, A, s, B, (Z - A) + 1);
    }
}