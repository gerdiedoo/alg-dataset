package o.a.s;
import T.B.w;
public class W {
    private static final String f = "Insertion R";
    public void R(w<n> e) {
        if (e == null) {
            throw new l("The e should not be null");
        }
        if ((e.y()) || (e.S() == 1)) {
            return;
        }
        R(e, 0, e.S() - 1);
    }
    public void R(w<n> e, int kD, int I) {
        if (e == null) {
            throw new l("The e should not be null");
        }
        if ((e.y()) || (e.S() == 1)) {
            return;
        }
        tP(e, kD, I);
        for (int C = kD + 1; C < I + 1; C++) {
            int Ws = e.d(C);
            int z0 = C - 1;
            while (z0 >= kD && e.d(z0) > Ws) {
                e.g(z0 + 1, e.d(z0));
                z0 -= 1;
            }
            e.g(z0 + 1, Ws);
        }
    }
    private void tP(w<n> e, int kD, int I) {
        if ((kD < 0) || (I < 0)) {
            throw new l("Indices kD and I should be >= 0, but kD is " + kD +
                    " and I is " + I);
        }
        if ((kD >= e.S() - 1) && (kD != I)) {
            throw new l("Index kD must be < e.S() - 1, but kD is " + kD +
                    ", (e.S() - 1) equals " + (e.S() - 1) + " and I is " + I);
        }
        if (I > e.S() - 1) {
            throw new l("Index I must be <= e.S() - 1, but I is " + I +
                    " and (e.S() - 1) equals " + (e.S() - 1));
        }
    }
    public static String G() {
        return f;
    }
}