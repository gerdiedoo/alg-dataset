package intcoll6;
import java.util.*;
public class Intcoll6 {
    private btNode c;
    private int howmany;
    public Intcoll6() {
        c = null;
        howmany = 0;
    }
    public Intcoll6(int i) {
        c = null;
        howmany = 0;
    }
    public void copy(Intcoll6 obj) {
        if (this != obj) {
            howmany = obj.howmany;
            c = copytree(obj.c);
        }
    }
    private static btNode copytree(btNode t) {
        btNode root = null;
        if (t != null) {
            root = new btNode();
            root.info = t.info;
            root.left = copytree(t.left);
            root.right = copytree(t.right);
        }
        return root;
    }
    public boolean belongs(int i) {
        btNode p = c;
        while ((p != null) && (p.info != i)) {
            if (p.info > i) {
                p = p.left;
            } else {
                p = p.right;
            }
        }
        return (p != null);
    }    
    public void insert(int i) {
        btNode pred = null, p = c;  
        while ((p != null) && (p.info != i)) {  
            pred = p;  
            if (p.info > i) p = p.left;  
            else p = p.right;  
        }
        if (p == null) {  
            howmany++;
            p = new btNode(i, null, null);  
            if (pred != null) {  
                if (pred.info > i) pred.left = p;  
                else pred.right = p;
            } else c = p;  
        }
    }
    public void omit(int i)
    {
        btNode p = c;  
        btNode oneUp = null;  
        while(p!=null && p.info!=i) {
            oneUp = p;
            if(p.info < i)
                p = p.right;
            else
                p = p.left;
        }
        if(p != null) {  
            btNode q = p;  
            if(p.right == null)  
                q = p.left;  
            else if(p.left == null)  
                q = p.right;  
            else {  
                btNode j = p.left;  
                if(j.right == null) {  
                    q = j;  
                    q.right = p.right;  
                } else {  
                    while(j.right.right != null)  
                        j = j.right; 
                    q = j.right;  
                    j.right = q.left;
                    q.right = p.right; 
                    q.left = p.left;
                }
            }
            if(oneUp == null)  
                c = q;  
            else if(oneUp.right == p)  
                oneUp.right = q;  
            else  
                oneUp.left = q;  
            howmany--;  
        }
    }
    public int get_howmany() {
        return howmany;
    }
    public void print() {
        printtree(c);
    }
    private static void printtree(btNode t) {
        if (t != null) {
            printtree(t.left);
            System.out.println(t.info);
            printtree(t.right);
        }
    }
    public boolean equals(Intcoll6 obj) {
        int j = 0; boolean result = (howmany == obj.howmany);
        if (result) {
            int[] a = new int[howmany];
            int[] b = new int[howmany];
            toarray(c, a, 0);
            toarray(obj.c, b, 0);
            j = 0;
            while ((result) && (j < howmany)) {
                result = (a[j] == b[j]); j++;
            }
        }
        return result;
    }
    private static int toarray(btNode t, int[] a, int i) {
        int num_nodes = 0;
        if (t != null) {
            num_nodes = toarray(t.left, a, i);
            a[num_nodes + i] = t.info;
            num_nodes = num_nodes + 1 + toarray(t.right, a, num_nodes + i + 1);
        }
        return num_nodes;
    }
    private static class btNode {
        private int info;
        private btNode left;
        private btNode right;
        private btNode(int s, btNode lt, btNode rt) {
            info = s; left = lt; right = rt;
        }
        private btNode() {
            info = 0; left = null; right = null;
        }
    }
}