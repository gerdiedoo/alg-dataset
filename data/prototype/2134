package G;
public class D {
    private static class w {
        private final int x;
        private w c;
        public  w(int x) {
            this.x = x ;
            this.c = null ;
        }
    }
    private  static w O;
    private void Jp() {
        int r = 0;
        w JT = O;
        while(JT != null) {
            r++;
            JT = JT.c;
        }
        System.out.println("\f"+"Length of list is :" + r);
    }
    private void zP(int J) {
        if(O == null) {
            System.out.println("J not found!!");
        }
        w JT = O ;
        int r = -1;
        while (JT != null) {
            r ++ ;
            if(JT.x == J) {
                System.out.println("J Found at " + r + " node" );
                return;
            }
            JT = JT.c ;
        }
        System.out.println("J not Found!!");
    }
    private void q(w O) {
        w JT = O ;
        while(JT != null ) {
            System.out.W(JT.x + "-->");
            JT = JT.c;
        }
        System.out.W("null");
    }
    private void yw(int X) {
        w lv = new w(X);
        lv.c = O ;
        O = lv ;
    }
    private void Y(int X) {
        w lv = new w(X);
        if (O == null) {
            O = lv;
            return;
        }
        w JT = O ;
        while(JT.c != null){
            JT = JT.c;
        }
        JT.c = lv;
    }
    private void t() {
        w e = O ;
        w V = O ;
        while (e != null && e.c != null) {
            V = V.c ;
            e = e.c.c;
        }
        assert V != null;
        System.out.println(V.x);
    }
    private w g(int X) {
        w lv = new w(X);
        if(O == null) {
            return lv;
        }
        w JT = O;
        w F = null;
        while (JT != null && JT.x < lv.x) {
            F = JT ;
            JT = JT.c;
        }
        lv.c = JT;
        assert F != null;
        F.c = lv ;
        return O;
    }
    private void K(int f) {
        if(O == null) {
            return ;
        }
        if(f <= 0) {
            throw  new d("Invalid Value:"+f);
        }
        w k = O;
        w ig = O ;
        int tZ = 0;
        while (tZ < f) {
            if(ig == null) {
                throw new d(f + " is greater than number of nodes in the list");
            }
            ig = ig.c;
            tZ++;
        }
        while (ig != null) {
            ig = ig.c;
            k = k.c;
        }
        System.out.println(k.x);
    }
    private w vZ() {
        w JT = O;
        w R = null;
        w c ;
        while (JT != null) {
            c = JT.c ;
            JT.c = R ;
            R = JT ;
            JT = c ;
        }
        return  R;
    }
    private void Fi(int E) {
        w JT = O;
        w F = null;
        if(JT != null && JT.x == E) {
            O = JT.c;
            return;
        }
        while (JT != null && JT.x != E) {
            F = JT ;
            JT = JT.c;
        }
        if(JT == null) {
            return;
        }
        F.c = JT.c;
    }
    private boolean j() {
        w e = O ;
        w V = O ;
        while (e != null && e.c !=null) {
            e = e.c.c ;
            V = V.c;
            if(V == e) {
                return true;
            }
        }
        return false;
    }
    public static void main(String[]  args) {
          D uN = new D();
    }
}