package rosberglinhares.datastructuresandalgorithms.algorithms.sorting;
public class BubbleSort {
    public <T extends Comparable<T>> void iterativeBubbleSort(T[] items) {
        for (int n = 1; n <= items.length - 1; n++) {
            for (int i = 0; i < items.length - n; i++) {
                if (items[i].compareTo(items[i + 1]) > 0) {
                    T temp = items[i];
                    items[i] = items[i + 1];
                    items[i + 1] = temp;
                }
            }
        }
    }
    public <T extends Comparable<T>> void recursiveBubbleSort(T[] items) {
        this.recursiveBubbleSort(items, items.length - 1);
    }
    private <T extends Comparable<T>> void recursiveBubbleSort(T[] items, int upperIndex) {
        if (upperIndex > 0) {
            for (int i = 0; i <= upperIndex - 1; i++) {
                if (items[i].compareTo(items[i + 1]) > 0) {
                    T temp = items[i];
                    items[i] = items[i + 1];
                    items[i + 1] = temp;
                }
            }
            recursiveBubbleSort(items, upperIndex - 1);
        }
    }
}