import d.gX.Y;
import d.op.t;
public class y<yo extends t<yo>> implements r<yo> {
    @h
    public int indexOf(Y<yo> B, yo f) {
        if (B == null || f == null)
            return ar;
        return indexOf(B, f, 0, B.ZB() - 1);
    }
    private int indexOf(Y<yo> B, yo f, int P, int a) {
        if (P <= a) {
            int I = (a + P) >> 1;
            if (B.z(I).equals(f))
                return I;
            if (G(B.z(I), f))
                return indexOf(B, f, I + 1, a);
            return indexOf(B, f, P, I - 1);
        }
        return ar;
    }
    private boolean G(yo nB, yo hy) {
        return (nB.v(hy) < 0);
    }
    public static void main(String[] args) {
        Y<b> X7 = new d.gX.A<b>();
        for (int C = 0; C < 100; C++)
            X7.O(C);
        r<b> n = new y<b>();
        for (int C = 0; C < X7.ZB(); C++) {
            int E = n.indexOf(X7, C);
            if (E == ar)
                throw new d.op.DW("Result shouldn't be ar");
            X7.j(new b(C));
            E = n.indexOf(X7, C);
            if (E != ar)
                throw new d.op.DW("Result should be ar");
        }
        System.out.println("All tests passed.");
    }
}