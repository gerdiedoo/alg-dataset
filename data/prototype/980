export default function MergeSortRecursive(items: number[]): number[] {
  return _divide(items);
}
const _items: Array<Array<number>> = [];
function _divide(array: Array<number>): any {
  switch (array.length) {
    case 1:
      _items.push(array);
      return _items;
    default: {
      const middle = Math.floor(array.length / 2);
      const first = array.splice(middle);
      return _merge(_divide(first), _divide(array));
    }
  }
}
function _merge(first: Array<number>, second: Array<number>): Array<number> {
  const merged = [];
  const [target, source] =
    first.length > second.length ? [first, second] : [second, first];
  for (let i = 0; i < target.length && i < source.length; i++) {
    if (target[i] < source[i]) {
      merged.push(target[i]);
      merged.push(source[i]);
    } else {
      merged.push(source[i]);
      merged.push(target[i]);
    }
  }
  if (merged.length < target.length + source.length) {
    const diff = target.length - source.length;
    for (let i = target.length - diff; i < target.length; i++) {
      merged.push(target[i]);
    }
  }
  return merged;
}