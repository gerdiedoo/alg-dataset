package com.roche.andy.datastructures;
class DoublyLinkedList<T extends Comparable<T>> {
    class Node<K> {
        K data;
        Node<K> prev, next;
        Node(K d) {
            data = d;
        }
    }
    Node<T> head;  
    void push(T newData) {
        Node<T> newNode = new Node<>(newData);
        newNode.next = head;
        newNode.prev = null;
        if (head != null)
            head.prev = newNode;
        head = newNode;
    }
    void insertAfter(Node previousNode, T newData) {
        if (previousNode == null) {
            System.out.println("The given previous node cannot be NULL ");
            return;
        }
        Node newNode = new Node<>(newData);
        newNode.next = previousNode.next;
        previousNode.next = newNode;
        newNode.prev = previousNode;
        if (newNode.next != null) {
            newNode.next.prev = newNode;
        }
    }
    void insertBefore(Node previousNode, T newData) {
        if (previousNode == head) {
            push(newData);
        } else {
            insertAfter(previousNode.prev, newData);
        }
    }
    void append(T newData) {
        Node<T> newNode = new Node<>(newData);
        Node<T> last = head;
        newNode.next = null;
        if (head == null) {
            newNode.prev = null;
            head = newNode;
            return;
        }
        while (last.next != null) {
            last = last.next;
        }
        last.next = newNode;
        newNode.prev = last;
    }
    void printList() {
        Node<T> temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }
}
class DLLTest {
    public static void main(String[] args) {
        DoublyLinkedList<Integer> dll = new DoublyLinkedList<>();
        dll.append(6);
        dll.push(7);
        dll.push(1);
        dll.append(4);
        dll.printList();
        dll.insertAfter(dll.head.next, 8);
        dll.printList();
        dll.insertBefore(dll.head, 9);
        dll.printList();
    }
}