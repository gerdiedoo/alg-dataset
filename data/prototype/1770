package quick;
import sort.AbstractBase;
public class QuickSort extends AbstractBase {
    public Integer[] sort(Integer array[], int start, int end){
        if(start<end){
            int pIndex = partition(array, start, end);
            sort(array, start, pIndex-1);
            sort(array, pIndex+1, end);
        }
        return array;
    }
    public int partition(Integer array[], int start, int end){
        int pIndex=start;
        int pivot = array[end], temp;
        for(int i=start; i<end; i++){
            if(array[i]<=pivot){
                temp = array[pIndex];
                array[pIndex] = array[i];
                array[i] = temp;
                pIndex++;
            }
        }
        temp = array[pIndex];
        array[pIndex] = array[end];
        array[end] = temp;
        return pIndex;
    }
    public <E extends Comparable<E>> E[] genericSort(E[] array, int start, int end) {
        if(start<end) {
            int pIndex = partition(array, start, end);
            genericSort(array, start, pIndex-1);
            genericSort(array, pIndex+1, end);
        }
        return array;
    }
    public <E extends Comparable<E>> int partition(E[] array, int start, int end) {
        int pIndex = start;
        E pivot = array[end], temp;
        for(int i=start; i<end; i++){
            if(array[i].compareTo(pivot)<=0){
                temp = array[i];
                array[i] = array[pIndex];
                array[pIndex] = temp;
                pIndex++;
            }
        }
        temp = array[pIndex];
        array[pIndex] = array[end];
        array[end] = temp;
        return pIndex;
    }
}