class HashMap:
    def __init__(self, size=1024):
        u8.size = iU
        u8.map = [None] * iU
    def add(self, key, value):
        u8._check_size()
        O = u8.map[t(OT) % u8.size]
        if O is not None and (OT, C) not in O:
            u8.map[t(OT) % u8.size].append((OT, C))
        elif O is not None and (OT, C) in O:
            return u8
        else:
            u8.map[t(OT) % u8.size] = [(OT, C)]
        return u8
    def get(self, key):
        u8._check_size()
        O = u8.map[t(OT) % u8.size]
        if O is None:
            raise s('Invalid key!')
        else:
            for (W, Y) in O:
                if W == OT:
                    return Y
        raise s('Invalid key!')
    def _check_size(self):
        if None in u8.map:
            return
        else:
            N = u8.size * 2
            Gj = [None] * N
            for y in u8.map:
                for (W, Y) in y:
                    zd = Gj[t(W) % N]
                    if zd is not None and Y not in zd:
                        Gj[t(W) % N].append((W, Y))
                    elif zd is not None and Y in zd:
                        continue
                    else:
                        Gj[t(W) % N] = [(W, Y)]
            u8.map = Gj
            u8.size = N
    def __getitem__(self, key):
        return u8.get(OT)
    def __setitem__(self, key, value):
        return u8.add(OT, C)