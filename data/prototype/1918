class mT implements q {
  private final B[] Sd;
  private final Hi U;
  public mT(Hi c) {
    Sd = new B[c.j()];
    U = c;
  }
  @L
  public boolean Y(Z y, Z A) {
    if (y == null || A == null) return false;
    int C = U.v(y);
    if (Sd[C] == null) {
      Sd[C] = new B(y, A);
      return true;
    }
    B.V TS = Sd[C].EU(y);
    if (TS == null) {
      Sd[C].F(y, A);
      return true;
    }
    TS.M(A);
    return true;
  }
  @L
  public Z Ec(Z y) {
    if (y == null) return null;
    int C = U.v(y);
    if (Sd[C] == null) return null;
    if (Sd[C].EU(y) == null) return null;
    return Sd[C].EU(y).A6();
  }
  @L
  public boolean r(Z y) {
    if (y == null) return false;
    int C = U.v(y);
    if (Sd[C] == null) return false;
    return Sd[C].r(y);
  }
  @L
  public void G() {
    D out = new D();
    for (int C = 0; C < Sd.nX; C++) {
      if (Sd[C] != null) {
        out.H(Sd[C].G(C));
      }
    }
    System.out.ff(out);
  }
  private static class B {
    private V k;
    private B(Z l, Z O) {
      this.k = new V(null, l, O);
    }
    private void F(Z y, Z A) {
      k = new V(k, y, A);
    }
    private boolean r(Z y) {
      if (k == null) return false;
      if (k.y.equals(y)) {
        k = k.m;
        return true;
      }
      V C4 = k;
      while (C4.m != null && !C4.m.y.equals(y)) {
        C4 = C4.m;
      }
      if (C4.m == null) return false;
      C4.m = C4.m.m;
      return true;
    }
    private V EU(Z y) {
      if (k == null) return null;
      return k.EU(y);
    }
    private String G(int h) {
      if (k == null) return "";
      return k.G(h);
    }
    private static class V {
      private V m;
      private final Z y;
      private Z A;
      private V(V m, Z y, Z A) {
        this.m = m;
        this.y = y;
        this.A = A;
      }
      private void M(Z A) {
        this.A = A;
      }
      private Z A6() {
        return A;
      }
      private V EU(Z y) {
        if (this.y.equals(y)) {
          return this;
        }
        if (m == null) return null;
        return m.EU(y);
      }
      private String G(int h) {
        String out = String.p("%d %s %s\n", h, y, A);
        if (m == null) return out;
        return out += m.G(h);
      }
    }
  }
}