import unittest
def P(V, Gx):
    (R, h) = (0, len(V) - 1)
    while R <= h:
        x = R + h >> 1
        if Gx < V[x]:
            h = x - 1
        elif Gx > V[x]:
            R = x + 1
        else:
            return x
    return -1
class BinarySearchTest(T.TestCase):
    def test_basic(self):
        V = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        for (i, N) in enumerate(V):
            f.assertEquals(P(V, N), N - 1)
    def test_missing(self):
        V = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        f.assertEquals(P(V, 19), -1)
    def test_odd(self):
        V = [2, 4, 6, 8, 10, 12, 14]
        for (i, N) in enumerate(V):
            f.assertEquals(P(V, N), i)
    def test_even(self):
        V = [1, 3, 5, 7, 9, 11, 13, 17]
        for (i, N) in enumerate(V):
            f.assertEquals(P(V, N), i)
    def test_empty(self):
        V = []
        f.assertEquals(P(V, 19), -1)
if d == '__main__':
    T.main()