def bubble_sort(arr):
    list_length = len(arr)
    for i in range(list_length-1):
        flag = False
        for j in range(list_length-1-i):
            if arr[j] > arr[j+1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                flag = True
        if flag is False:
            break
    return arr
def insertion_sort(arr):
    list_length = len(arr)
    for i in range(1, list_length):
        tmp = arr[i]
        j = i - 1
        while j >= 0 and tmp < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = tmp
    return arr
def shell_sort(arr):
    list_length = len(arr)
    gap = list_length // 2
    while gap > 0:
        for i in range(gap, list_length, gap):
            tmp = arr[i]
            j = i - gap
            while j >= 0 and tmp < arr[j]:
                arr[j + gap] = arr[j]
                j -= gap
            arr[j + gap] = tmp
        gap //= 2
    return arr
def selection_sort(arr):
    list_length = len(arr)
    for i in range(list_length-1):
        min_idx = i
        for j in range(i+1, list_length):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr
def heap_sort(arr):
    def adjust_down(arr, parent_idx, length):
        tmp = arr[parent_idx]
        while parent_idx*2 + 1 <= length:
            child_idx = parent_idx * 2 + 1
            if child_idx != length and arr[child_idx] < arr[child_idx+1]:
                child_idx += 1
            if tmp < arr[child_idx]:
                arr[parent_idx] = arr[child_idx]
            else:
                break
            parent_idx = child_idx
        arr[parent_idx] = tmp
    def creat_max_heap(arr, length):
        for parent_idx in range(length//2, -1, -1):
            adjust_down(arr, parent_idx, length)
    length = len(arr) - 1
    creat_max_heap(arr, length)
    for i in range(length, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        adjust_down(arr, 0, i - 1)
    return arr
def merge_sort(arr):
    def merge(left, right):
        i, j = 0, 0  
        merged = []  
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                j += 1
        if len(left[i:]) > 0:
            merged.extend(left[i:])
        if len(right[j:]) > 0:
            merged.extend(right[j:])
        return merged
    if len(arr) <= 1:
        return arr
    middle = len(arr) // 2
    left = merge_sort(arr[0:middle])
    right = merge_sort(arr[middle:])
    return merge(left, right)
def quick_sort(arr):
    def q_sort(array, low, high):
        if low >= high:
            return
        pivot = array[high]
        i, j = low, high
        while i < j:
            while i < j and array[i] <= pivot:
                i += 1
            while i < j and array[j] >= pivot:
                j -= 1
            array[i], array[j] = array[j], array[i]
        array[i], array[high] = array[high], array[i]
        q_sort(array, low, i - 1)
        q_sort(array, i + 1, high)
    q_sort(arr, 0, len(arr) - 1)
    return arr
def radix_sort(arr):
    digit = 1  
    max_digit = 1  
    max_item = max(arr)
    while max_item >= 10 ** max_digit:
        max_digit += 1
    while digit <= max_digit:
        bucket = {}  
        for i in range(10):
            bucket.setdefault(i, [])  
        for i in arr:
            radix = int(i / (10**(digit-1)) % 10)  
            bucket[radix].append(i)  
        tmp_list = []
        for i in range(10):
            if len(bucket[i]) > 0:
                for j in bucket[i]:
                    tmp_list.append(j)
        arr = tmp_list
        digit += 1
    return arr
test_list = [1, 12, 5, 5, 3, 7, 10, 143, 9, 6, 11, 4, 155, 13, 2, 8]
result = quick_sort(test_list)
for item in result:
    print(item, end=' ')