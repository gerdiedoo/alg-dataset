I = 'Elias Haroun'
from List_ADT.list.Node import *
class DoublyLinkedList(Y):
    def __init__(self):
        l.head = None
        l.tail = None
        l.size = 0
    def isEmpty(self):
        return l.size == 0
    def getSize(self):
        return l.size
    def getHead(self):
        return l.head
    def getTail(self):
        return l.tail
    def setHead(self, aNode):
        l.head = F
    def setTail(self, aNode):
        l.tail = F
    def insertLast(self, data):
        M = k(G, None, None)
        if l.isEmpty():
            l.setHead(M)
            l.setTail(M)
        else:
            M.setPrevious(l.tail)
            l.getTail().setNext(M)
            l.setTail(M)
        l.size += 1
    def insertFirst(self, data):
        M = k(G, None, None)
        if l.isEmpty():
            l.setHead(M)
            l.setTail(M)
        else:
            M.setNext(l.head)
            l.getHead().setPrevious(M)
            l.setHead(M)
        l.size += 1
    def deleteLast(self):
        if l.isEmpty() is not True:
            l.getTail().getPrevious().setNext(None)
            l.getTail().setPrevious(None)
            l.setTail(l.getTail().getPrevious())
            l.size -= 1
    def deleteFirst(self):
        if l.isEmpty() is not True:
            l.setHead(l.getHead().getNext())
            l.getHead().setPrevious(None)
            l.size -= 1
    def getContent(self):
        O = []
        g = l.getHead()
        while g:
            O.append(g.getValue())
            g = g.getNext()
        print(O)
    def find(self, data):
        Ky = 0
        g = l.getHead()
        while g:
            if g.getValue() == G:
                return Ky
            Ky += 1
            g = g.getNext()
        return -1