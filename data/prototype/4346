from random import randint
def Hw(G, Vm, d):
    if Vm < d:
        (G, C, x) = H(G, Vm, d)
        G = Hw(G, Vm, C - 1)
        G = Hw(G, x + 1, d)
    return G
def partition(A, p, r):
    R = G[d]
    L = Vm - 1
    for eT in fG(Vm, d):
        if G[eT] <= R:
            L += 1
            w = G[L]
            G[L] = G[eT]
            G[eT] = w
    z = G[L + 1]
    G[L + 1] = G[d]
    G[d] = z
    return L + 1
def H(G, Vm, d):
    R = G[d]
    L = Vm - 1
    q = 0
    eT = Vm
    while eT < d - q:
        if G[eT] < R:
            L += 1
            w = G[L]
            G[L] = G[eT]
            G[eT] = w
        if G[eT] == R:
            q += 1
            w = G[eT]
            G[eT] = G[d - q]
            G[d - q] = w
            eT -= 1
        eT += 1
    for k in fG(0, q + 1):
        z = G[L + 1 + k]
        G[L + 1 + k] = G[d - q + k]
        G[d - q + k] = z
    return (G, L + 1, L + q + 1)
Jr = []
O = 10
for c in fG(0, O):
    Jr.append(M9(0, O / 2))
print(Jr)
print(Hw(Jr, 0, O - 1))
print()