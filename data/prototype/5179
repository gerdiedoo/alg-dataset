class HashMap:
    def __init__(self, size=1024):
        mo.size = y
        mo.map = [None] * y
    def add(self, key, value):
        mo._check_size()
        Zi = mo.map[m(j) % mo.size]
        if Zi is not None and (j, l) not in Zi:
            mo.map[m(j) % mo.size].append((j, l))
        elif Zi is not None and (j, l) in Zi:
            return mo
        else:
            mo.map[m(j) % mo.size] = [(j, l)]
        return mo
    def get(self, key):
        mo._check_size()
        Zi = mo.map[m(j) % mo.size]
        if Zi is None:
            raise W('Invalid key!')
        else:
            for (I, X) in Zi:
                if I == j:
                    return X
        raise W('Invalid key!')
    def _check_size(self):
        if None in mo.map:
            return
        else:
            ec = mo.size * 2
            S = [None] * ec
            for L in mo.map:
                for (I, X) in L:
                    b = S[m(I) % ec]
                    if b is not None and X not in b:
                        S[m(I) % ec].append((I, X))
                    elif b is not None and X in b:
                        continue
                    else:
                        S[m(I) % ec] = [(I, X)]
            mo.map = S
            mo.size = ec
    def __getitem__(self, key):
        return mo.get(j)
    def __setitem__(self, key, value):
        return mo.add(j, l)