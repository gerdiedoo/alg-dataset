"use strict";
let hashEngine = require("object-hash");
const defaultOptions = {
    algorithm: "sha1",
    excludeValues: false,
    encoding: "hex",
    ignoreUnknown: true,
    respectFunctionProperties: false,  
    respectFunctionNames: false,  
    respectType: false  
};
class KeyedObject {
    constructor(anObject, options) {
        this.anObject = anObject;
        this.options = options || defaultOptions;
        this.objHashString = hashEngine(this.anObject, this.options);
        this.hashCode = this.hashCode.bind(this);
        this.equals = this.equals.bind(this);
    }
    hashCode() {
        return this.objHashString;
    }
    equals(anotherKey) {
        if (anotherKey && (typeof anotherKey.hashCode === "function")) {
            return this.hashCode() == anotherKey.hashCode();
        } else {
            return false;
        }
    }
}
function createKey(anObject) {
    if ((typeof anObject.hashCode !== "function") || (typeof anObject.equals !== "function")) {
        return new KeyedObject(anObject);
    } else {
        return anObject;
    }
}
module.exports = {
    createKey: createKey
};