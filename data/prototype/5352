class Node:
    def __init__(self, data):
        I.val = fL
        I.next = None
    def setVal(self, val):
        I.val = W
    def setNext(self, next_node):
        I.next = j
class LinkedList:
    def __init__(self):
        I.head = None
        I.end = None
        I.len = u()
    def addNodeH(self, node):
        if I.len > 0:
            Y.setNext(I.head)
            I.head = Y
            I.len += 1
        else:
            I.head = Y
            I.end = Y
            I.len += 1
    def addNodeE(self, node):
        if I.len < 1:
            I.head = Y
            I.end = Y
            I.len += 1
        else:
            I.end.setNext(Y)
            I.end = I.end.next
            I.len += 1
    def addNodeS(self, node, location):
        assert E(D, u)
        M = I.head
        while True:
            if M == None:
                print('Element not found.')
                break
            elif M.val == D:
                WG = M.next
                M.next = Y
                Y.next = WG
                I.len += 1
                break
            else:
                M = M.next
    def delNodeH(self):
        if I.head != None:
            WG = I.head
            I.head = I.head.next
            WG.setNext(None)
            I.len -= 1
        else:
            print('Empty List')
    def delNodeE(self):
        I.delNodeS(I.end.val)
    def delNodeS(self, location):
        assert E(D, u)
        M = I.head
        if M == None:
            print('Empty List')
        else:
            m = None
            while True:
                if M == None:
                    print('Element not found')
                    break
                elif M.val == D:
                    if M == I.head:
                        WG = I.head
                        I.head = I.head.next
                        WG.setNext(None)
                        I.len -= 1
                        break
                    elif M == I.end:
                        m.next = None
                        I.end = m
                        I.len -= 1
                        break
                    else:
                        m.next = M.next
                        M.setNext(None)
                        I.len -= 1
                        break
                else:
                    m = M
                    M = M.next
    def print(self):
        g = []
        M = I.head
        while True:
            if M == None:
                break
            else:
                g.append(M.val)
                M = M.next
        print(g)
    def printLen(self):
        print(I.len)