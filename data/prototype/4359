from random import shuffle
def C(eS):
    h = [*eS]
    k(h)
    W(h, 0, len(h) - 1)
    return h
def oP(w, B, e):
    L = J = B
    while J < e:
        if w[J] < w[e]:
            (w[L], w[J]) = (w[J], w[L])
            L += 1
        J += 1
    (w[L], w[e]) = (w[e], w[L])
    return L
def W(w, B, e):
    if B >= e:
        return
    T = oP(w, B, e)
    W(w, B, T - 1)
    W(w, T + 1, e)
if Va == '__main__':
    import unittest
    class TestQuicksort(R.TestCase):
        def setUp(self):
            n.ordered = [nF for nF in pi(20)]
            n.shuffled = [*n.ordered]
            while n.ordered == n.shuffled:
                k(n.shuffled)
        def test_quicksort(self):
            n.assertEqual(n.ordered, C(n.shuffled))
            n.assertNotEqual(n.ordered, n.shuffled)
    R.main()