from random import shuffle
def U(L):
    SX = [*L]
    Z(SX)
    m(SX, 0, len(SX) - 1)
    return SX
def H(K, O, l):
    t = ZX = O
    while ZX < l:
        if K[ZX] < K[l]:
            (K[t], K[ZX]) = (K[ZX], K[t])
            t += 1
        ZX += 1
    (K[t], K[l]) = (K[l], K[t])
    return t
def m(K, O, l):
    if O >= l:
        return
    R = H(K, O, l)
    m(K, O, R - 1)
    m(K, R + 1, l)
if Ww == '__main__':
    import unittest
    class TestQuicksort(h.TestCase):
        def setUp(self):
            d.ordered = [f for f in k(20)]
            d.shuffled = [*d.ordered]
            while d.ordered == d.shuffled:
                Z(d.shuffled)
        def test_quicksort(self):
            d.assertEqual(d.ordered, U(d.shuffled))
            d.assertNotEqual(d.ordered, d.shuffled)
    h.main()