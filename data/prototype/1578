class LList {
	private LNode head;
	private LNode tail;
	public LList () {
		head = null;
		tail = null;
	}
	public void push (int n) {
		LNode tmp = new LNode(n, null, head);
		if (head == null) {
			tail = tmp;
		}
		else {
			head.setPrev(tmp);		
		}
		head = tmp;
	}
	public LNode pop () {
		LNode t = null;
		if (head != null) {
			t = head;
			head = head.getNext();
		}		
		return t;
	}
	public void enqueue (int n) {
		LNode tmp = new LNode(n, tail, null);
		if (tail == null) {
			head = tmp;
		}
		else {
			tail.setNext(tmp);
		}
		tail = tmp;
	}
	public LNode dequeue () {
		return pop();
	}
	public void sortedInsert(int n) {
		if (head == null) {
			push(n);
		}
		else if (n <= head.getVal()) {
			push(n);
		}
		else if (n >= tail.getVal()) {
			enqueue(n);
		}
		else {
			LNode tmp = head.getNext();
			boolean flag = true;
			while (flag) {
				if (n <= tmp.getVal()) {
					LNode insert = new LNode(n, tmp.getPrev(), tmp);
					tmp.setPrev(insert);
					tmp.getPrev().getPrev().setNext(insert);
					flag = false;
				}
				if (tmp.getNext() == null) {
					flag = false;
				}
				else {
					tmp = tmp.getNext();
				}
			}
		}
	}
	public void reverse () {
		LList newList = new LList();
		LNode tmp = head;
		while (tmp != null) {
			tmp = pop();
			newList.push(tmp.getVal());
			tmp = tmp.getNext();
		}
		head = newList.getHead();
		tail = newList.getTail();
	}
	public void delete (LNode node) {
		if (node.getPrev() == null && node.getNext() == null) {
			head = null;
			tail = null;
		}
		else if (node.getPrev() == null) {
			LNode tmp = head.getNext();
			tmp.setPrev(null);
			head = node.getNext();
		}
		else if (node.getNext() == null) {
			LNode tmp = tail.getPrev();
			tmp.setNext(null);
			tail = node.getPrev();
		}
		else {
			LNode p = node.getPrev();
			LNode n = node.getNext();
			p.setNext(n);
			n.setPrev(p);
		}
	}
	public void delete (int n) {
		LNode tmp = head;
		while (tmp != null && tmp.getVal() != n) {
			tmp = tmp.getNext();
		}
		delete(tmp);
	}
	public void deleteAt(int index) {
		LNode tmp = head;
		for (int i = 0; i < index; i ++) {
			tmp = tmp.getNext();
		}
		delete(tmp);
	}
	public void removeDuplicates () {
		LNode tmp = head;
		while (tmp != null) {
			LNode check = tmp.getNext();
			while (check != null) {
				if (tmp.getVal() == check.getVal()) {
					delete(check);
				}
				check = check.getNext();
			}
			tmp = tmp.getNext();
		}
	}
	public int size() {
		LNode tmp = head;
		int len = 0;
		while (tmp != null) {
			len ++;
			tmp = tmp.getNext();
		}
		return len;
	}
	public LList clone() {
		LList returnList = new LList();
		LNode tmp = head;
		while (tmp != null) {
			returnList.enqueue(tmp.getVal());
			tmp = tmp.getNext();
		}
		return returnList;
	}
	public LNode nodeAtIndex (int index) {
		LNode tmp = head;
		for (int i = 0; i < index; i ++) {
			tmp = tmp.getNext();
		}
		return tmp;
	}
	public void fromArray (int [] vals) {
		for (int i = 0; i < vals.length; i ++) {
			enqueue(vals[i]);
		}
	}
	public LNode getHead() {
		return head;
	}
	public LNode getTail() {
		return tail;
	}
	public String toString () {
		String ans = "{";
		LNode tmp = head;
		while (tmp != null) {
			ans += tmp + ", ";
			tmp = tmp.getNext();
		}
		if (ans.contains(",")) {
			ans = ans.substring(0, ans.lastIndexOf(","));
		}
		return ans + "}";
	}
}