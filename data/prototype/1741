class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None
class SinglyLinkedList:
    def __init__(self, head=None):
        self.head = head
    def insert_at_beg(self, data):
        node = Node(data)
        node.next = self.head
        self.head = node
    def print_data(self):
        current = self.head
        while current is not None:
            print(current.data, '-> ', end='')
            current = current.next
        print('None')
def split(head):
    slow = head
    if slow is None or slow.next is None:
        return head, None
    fast = slow.next
    while fast is not None:
        fast = fast.next
        if fast is not None:
            fast = fast.next
            slow = slow.next
    fast = slow.next
    slow.next = None
    return head, fast
def merge(a, b):
    dummy = Node()
    dummy.next = None
    temp = SinglyLinkedList(dummy)
    tail = temp.head
    while True:
        if a is None:
            tail.next = b
            break
        elif b is None:
            tail.next = a
            break
        elif a.data <= b.data:
            tail.next = a
            a = a.next
        else:
            tail.next = b
            b = b.next
        tail = tail.next
    return temp.head.next
def merge_sort(head):
    if head is None or head.next is None:
        return head
    a, b = split(head)
    a = merge_sort(a)
    b = merge_sort(b)
    head = merge(a, b)
    return head
if __name__ == '__main__':
    linked_list = SinglyLinkedList()
    linked_list.insert_at_beg(9)
    linked_list.insert_at_beg(3)
    linked_list.insert_at_beg(2)
    linked_list.insert_at_beg(1)
    linked_list.insert_at_beg(5)
    linked_list.insert_at_beg(4)
    linked_list.insert_at_beg(8)
    linked_list.insert_at_beg(7)
    linked_list.insert_at_beg(6)
    print('before sorting')
    linked_list.print_data()
    linked_list.head = merge_sort(linked_list.head)
    print('after sorting')
    linked_list.print_data()