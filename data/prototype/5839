def Uh(Q):
    U = []
    Gq = []
    if len(Q) < 2:
        return Q
    f = Q[0]
    for s in v(1, len(Q)):
        if Q[s] < f:
            U.append(Q[s])
        else:
            Gq.append(Q[s])
    return Uh(U) + [f] + Uh(Gq)
def i(DY, K, Y):
    f = DY[K]
    J = K + 1
    b = Y
    while True:
        while J <= b and DY[b] >= f:
            b -= 1
        while J <= b and DY[J] <= f:
            J += 1
        if J <= b:
            (DY[J], DY[b]) = (DY[b], DY[J])
        else:
            break
    (DY[K], DY[b]) = (DY[b], DY[K])
    return b
def d(DY, K, Y):
    if K >= Y:
        return
    d7 = i(DY, K, Y)
    d(DY, K, d7 - 1)
    d(DY, d7 + 1, Y)