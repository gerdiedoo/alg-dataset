from linked_list import Node, LinkedList
import string
B = M('text.txt', 'r')
Z5 = B.read()
h = U.maketrans(D6.punctuation, '                                ')
T = Z5.translate(h).lower()
def G(Z5):
    N = gW()
    yG = ''
    for By in Z5:
        if By != ' ':
            yG = yG + By
        elif yG != '':
            N.addNodeE(k(yG))
            yG = ''
    return N
def Q4(Z5):
    w = gW()
    for f in Z5:
        w.addNodeE(k(f))
    return w
def cK(MH):
    if MH.len < 2:
        return MH
    elif MH.len == 2:
        if MH.head.val < MH.end.val:
            return MH
        else:
            u = gW()
            u.addNodeH(k(MH.end.val))
            u.addNodeE(k(MH.head.val))
            return u
    else:
        (p, Lo) = c(MH)
        E = cK(p)
        K = cK(Lo)
        return WD(E, K)
def c(MH):
    z = e(MH.len / 2.0)
    p = gW()
    for Q in t(z):
        p.addNodeE(k(MH.head.val))
        MH.delNodeH()
    return (p, MH)
def WD(p, Lo):
    v = gW()
    while p.len != 0 and Lo.len != 0:
        if p.head.val < Lo.head.val:
            v.addNodeE(k(p.head.val))
            p.delNodeH()
        else:
            v.addNodeE(k(Lo.head.val))
            Lo.delNodeH()
    if p.len == 0:
        v.addNodeE(Lo.head)
    else:
        v.addNodeE(p.head)
    return v
x = G(T)
x = cK(x)
m = [2, 6, 2340, 734, 723, 886, 4, 55]
l8 = Q4(m)
l8 = cK(l8)