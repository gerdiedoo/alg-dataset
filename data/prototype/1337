package org.joyfulmonster.util.concurrent;
import org.joyfulmonster.util.concurrent.internal.ConcurrentElasticHashMapImpl;
import org.joyfulmonster.util.concurrent.internal.MetricsSupport;
public class ConcurrentElasticHashMap<K, V> {
    private static final String ILLEGAL_ARGUMENT_EXPECTION_MSG = "The key or value can not be null.";
    private ConcurrentElasticHashMapImpl<K, V> service;
    public ConcurrentElasticHashMap() {
        service = new ConcurrentElasticHashMapImpl<K, V>();
    }
    public ConcurrentElasticHashMap(int bucketSize, int initBucketCount, float loadFactor) {
        service = new ConcurrentElasticHashMapImpl<K, V>(bucketSize, initBucketCount, loadFactor);
    }
    public V put(K key, V value) {
        if (key == null || value == null) {
            throw new IllegalArgumentException(ILLEGAL_ARGUMENT_EXPECTION_MSG);
        }
        return service.put(key, value);
    }
    public V putIfAbsent(K key, V value) {
        if (key == null || value == null) {
            throw new IllegalArgumentException(ILLEGAL_ARGUMENT_EXPECTION_MSG);
        }
        return service.putIfAbsent(key, value);
    }
    public V get(K key) {
        if (key == null) {
            throw new IllegalArgumentException(ILLEGAL_ARGUMENT_EXPECTION_MSG);
        }
        return service.get(key);
    }
    public V remove(K key) {
        if (key == null) {
            throw new IllegalArgumentException(ILLEGAL_ARGUMENT_EXPECTION_MSG);
        }
        return service.remove(key);
    }
    public boolean remove(K key, V val) {
        if (key == null || val == null) {
            throw new IllegalArgumentException(ILLEGAL_ARGUMENT_EXPECTION_MSG);
        }
        return service.remove(key, val);
    }
    public V replace(K key, V value) {
        if (key == null || value == null) {
            throw new IllegalArgumentException(ILLEGAL_ARGUMENT_EXPECTION_MSG);
        }
        return service.replace(key, value);
    }
    public boolean replace(K key, V oldValue, V value) {
        if (key == null || value == null) {
            throw new IllegalArgumentException(ILLEGAL_ARGUMENT_EXPECTION_MSG);
        }
        return service.replace(key, oldValue, value);
    }
    public int size() {
        return service.size();
    }
    MetricsSupport getMetrics() {
        return service;
    }
}