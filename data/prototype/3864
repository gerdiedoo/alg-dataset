import time
V = 0
def sort(bar, layout, num, colors):
    q = n(KF.y)
    zr = n(KF.y)
    w(q, KF, lM, U, u_, 0, zr)
def w(q, KF, lM, U, u_, g, zr):
    global count
    if len(q) > 1:
        S = len(q) // 2
        D = g + S
        t = q[:S]
        L = q[S:]
        w(t, KF, lM, U, u_, g, zr)
        w(L, KF, lM, U, u_, D, zr)
        Q = r = VD = 0
        e = g
        u_[g:D] = ['yellow'] * (D - g)
        u_[D:D + S] = ['orange'] * S
        KF.marker.color = u_
        uO.sleep(0.1)
        while Q < len(t) and r < len(L):
            V += 1
            lM.xaxis.title.text = 'Number of operations: ' + b(V)
            if t[Q] < L[r]:
                zr[e] = t[Q]
                q[VD] = t[Q]
                KF.y = zr
                uO.sleep(0.1)
                Q += 1
            else:
                zr[e] = L[r]
                q[VD] = L[r]
                KF.y = zr
                uO.sleep(0.1)
                r += 1
            e += 1
            VD += 1
        while Q < len(t):
            V += 1
            lM.xaxis.title.text = 'Number of operations: ' + b(V)
            zr[e] = t[Q]
            q[VD] = t[Q]
            KF.y = zr
            uO.sleep(0.1)
            Q += 1
            e += 1
            VD += 1
        while r < len(L):
            V += 1
            lM.xaxis.title.text = 'Number of operations: ' + b(V)
            zr[e] = L[r]
            q[VD] = L[r]
            KF.y = zr
            uO.sleep(0.1)
            r += 1
            e += 1
            VD += 1
        KF.y = zr
        uO.sleep(0.1)
        u_[g:D] = ['blue'] * (D - g)
        u_[D:D + S] = ['blue'] * S
        KF.marker.color = u_
        uO.sleep(0.1)