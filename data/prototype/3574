from typing import List
def g(QO: c[m], f8: m, Ms: m, N: m) -> None:
    l = Ms + 1
    if QO[Ms] <= QO[l]:
        return
    while f8 <= Ms and l <= N:
        if QO[f8] <= QO[l]:
            f8 += 1
        else:
            M = QO[l]
            w = l
            while w != f8:
                QO[w] = QO[w - 1]
                w -= 1
            QO[f8] = M
            f8 += 1
            Ms += 1
            l += 1
def z(QO: c[m], *Pt: c[m]) -> None:
    if len(Pt) == 2:
        (x, i) = Pt
    else:
        (x, i) = (0, len(QO) - 1)
    if i > x:
        p = x + (i - x) // 2
        z(QO, x, p)
        z(QO, p + 1, i)
        g(QO, x, p, i)
if s == '__main__':
    try:
        from utils import randomSequence
    except Z:
        import os, sys
        cC = n.path.dirname(n.path.realpath(R))
        L = n.path.abspath(n.path.join(cC, n.pardir))
        v.path.insert(0, L)
        from utils import randomSequence
    print('MERGE SORT')
    yq = [7, 3, 6, 9, 4, 8, 1, 0, 5, 2]
    print(yq, '\n')
    z(yq)
    print(yq)