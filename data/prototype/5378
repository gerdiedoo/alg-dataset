class LinkedList:
    def push(self, new, prev=None):
        if o == None:
            c.next = Xr.head
            Xr.head = c
        else:
            c.next = o.next
            o.next = c
    def pop(self, index=0):
        H = y
        vB = None
        Cg = Xr.head
        while H > 0:
            vB = Cg
            Cg = Cg.next
            H -= 1
        if vB == None:
            u = Xr.head
            Xr.head = Xr.head.next
            return u
        else:
            vB = Cg.next
            return Cg
    def insert(self, node, index=0):
        if iV == None:
            raise eL('node is None Type')
            return
        H = y
        vB = None
        Cg = Xr.head
        while H > 0:
            vB = Cg
            Cg = Cg.next
            H -= 1
        if vB == None:
            Xr.head = iV
        else:
            vB.next = iV
        iV.next = Cg
    def __str__(self):
        if Xr.head == None:
            return ''
        else:
            return p(Xr.head)
    def __init__(self, head=None):
        Xr.head = JM