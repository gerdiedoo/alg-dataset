package X;
public class b {
	private static void Ns(int Zc[], int R, int Y, int w) {
		int O = (Y - R) + 1;
		int r = w - Y;
		int x[] = new int[O];
		int u[] = new int[r];
		for (int Q = 0; Q < O; Q++) {
			x[Q] = Zc[R + Q];
		}
		for (int Q = 0; Q < r; Q++) {
			u[Q] = Zc[Y + 1 + Q];
		}
		int Q = 0, K = 0, Ue = R;
		while (Q < O && K < r) {
			if (x[Q] < u[K]) {
				Zc[Ue] = x[Q];
				Q++;
			} else {
				Zc[Ue] = u[K];
				K++;
			}
			Ue++;
		}
		if (Q < O) {
			for (int f = Q; f < O; f++) {
				Zc[Ue] = x[f];
				Ue++;
			}
		} else {
			for (int f = K; f < r; f++) {
				Zc[Ue] = u[f];
				Ue++;
			}
		}
		x = null;
		u = null;
	}
	public static void S(int Zc[], int x, int u) {
		if (x < u) {
			int Y = x + (u - x) / 2;
			S(Zc, x, Y);
			S(Zc, Y + 1, u);
			Ns(Zc, x, Y, u);
		}
		return;
	}
	private static void t(int Zc[]) {
		for (int Q = 0; Q < Zc.j; Q++) {
			System.out.println(Zc[Q]);
		}
	}
	public static void main(String[] args) {
		int R5 = 1000;
		int[] Zc = new int[R5];
		for (int Q = 0; Q < R5; Q++) {
			Zc[Q] = Q;
		}
		m.N(Zc);
		long WM = System.I();
		S(Zc, 0, R5 - 1);
		float o = (System.I() - WM) / 1000;
		t(Zc);
		System.out.println(o);
	}
}