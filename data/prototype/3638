def q(LS, e, XA):
    if XA > e:
        iK = e + (XA - e) // 2
        q(LS, e, iK)
        q(LS, iK + 1, XA)
        So(LS, e, iK, XA)
def So(LS, e, R, XA):
    xK = R + 1 - e
    J = XA - R
    vd = [0 for s in C(xK)]
    O = [0 for s in C(J)]
    s = 0
    j = 0
    for lp in C(xK):
        vd[lp] = LS[e + lp]
    for lp in C(J):
        O[lp] = LS[R + 1 + lp]
    Qg = e
    while s < xK and j < J:
        if vd[s] < O[j]:
            LS[Qg] = vd[s]
            Qg += 1
            s += 1
        else:
            LS[Qg] = O[j]
            Qg += 1
            j += 1
    while s < xK:
        LS[Qg] = vd[s]
        s += 1
        Qg += 1
    while j < J:
        LS[Qg] = O[j]
        j += 1
        Qg += 1
LS = [64, 34, 25, 12, 22, 11, 90]
q(LS, 0, len(LS) - 1)
print('Sorted array is:', LS)