package Sorting;
import Comparing.BaseAreaCompare;
import Comparing.VolumeCompare;
import Objects.ThreeDGeoShape;
public class MergeSort {
	public ThreeDGeoShape[] sort(String sortBy, ThreeDGeoShape[] shapeArray, int length) {
		if (length < 2) {
			return shapeArray;
		}
			int middle = length /2;
			ThreeDGeoShape leftArray[] = new ThreeDGeoShape[middle];
			ThreeDGeoShape rightArray[] = new ThreeDGeoShape[length - middle];
			for (int i=0; i < middle; i++) {
				leftArray[i] = shapeArray[i];
			}
			for (int i= middle; i < length; i++) {
				rightArray[i - middle] = shapeArray[i];
			}
			sort(sortBy, leftArray, middle);
			sort(sortBy, rightArray, length - middle);
			shapeArray = merge(sortBy, shapeArray, leftArray, rightArray, middle, length - middle);
		return shapeArray;
	}
	private ThreeDGeoShape[] merge(String sortBy, ThreeDGeoShape[] shapeArray,ThreeDGeoShape[] leftArray, ThreeDGeoShape[] rightArray, int left, int right) {
		int i = 0;
		int j = 0;
		int k = 0 ;
		int result = 0;
		BaseAreaCompare ac = new BaseAreaCompare();
		VolumeCompare vc = new VolumeCompare();
		while( i < left && j < right) {
			if (sortBy.equalsIgnoreCase("h")) {
				result = leftArray[i].compareTo(rightArray[j]);
			}else if (sortBy.equalsIgnoreCase("a")) {
				result = ac.compare(leftArray[i], rightArray[j]);
			}else if (sortBy.equalsIgnoreCase("v")) {
				result = vc.compare(leftArray[i], rightArray[j]);
			}
			if (result == 1) {
				shapeArray[k] = leftArray[i];
				i++;
			}else {
				shapeArray[k] = rightArray[j];
				j++;
			}
			k++;
		}
		while (j < right) {
			shapeArray[k] = rightArray[j];
			j++;
			k++;
		}
		while (i < left) {
			shapeArray[k] = leftArray[i];
			i++;
			k++;
		}
		return shapeArray;
	}
}