function Node(data) {
    this.data = data;
    this.next = null;
}
class LinkedList {
    constructor() {
        this.head = null;    
        this.tail = null;    
    }
    addNode(data) {
        const node = new Node(data);   
        if(!this.head) {
            this.head = node;
            this.tail = node;
        } else {
            this.tail.next = node;
            this.tail = node;
        }
    }
    removeNode(data) {
        let previous = this.head;
        let current = this.head;
        while(current) {
            if(current.data === data) {
                if(current === this.head) 
                    this.head = this.head.next;  
                else if(current === this.tail)
                    this.tail = previous;        
                previous.next = current.next;    
                break;
            } 
            previous = current;
            current = current.next;
        }
    }
    traverse(cb) {
        let current = this.head;
        if(cb)   
            while (current) {
                cb(current);
                current = current.next;   
            }
    }
}
(function test() {
    let linkedList = new LinkedList();
    linkedList.addNode("first node");
    linkedList.addNode("second node");
    linkedList.addNode("third node");
    linkedList.addNode("fourth node")
    console.log("Nodes: ")
    linkedList.traverse((node) => { console.log(node.data) });
    removeAndLog(linkedList, "third node");      
    removeAndLog(linkedList, "first node");      
    removeAndLog(linkedList, "fourth node");     
    removeAndLog(linkedList, "second node");     
})()
function removeAndLog(linkedList, str) {
    console.log(`\nRemove node: ${str}`);
    linkedList.removeNode(str);
    console.log("Updated nodes: ");
    linkedList.traverse((node) => { console.log(node.data) });
}