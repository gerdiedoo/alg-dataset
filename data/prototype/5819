from random import randint, shuffle
from timeit import timeit
def p(n):
    if len(n) == 1:
        return n
    if len(n) > 1:
        U6 = n[0]
        JQ = 1
        h = len(n) - 1
        while JQ <= h:
            if n[JQ] > U6 and n[h] < U6:
                (n[JQ], n[h]) = (n[h], n[JQ])
                JQ += 1
                h -= 1
            elif n[JQ] <= U6 and n[h] < U6:
                JQ += 1
            elif n[JQ] > U6 and n[h] >= U6:
                h -= 1
            elif n[JQ] <= U6 and n[h] >= U6:
                JQ += 1
                h -= 1
        (n[0], n[h]) = (n[h], n[0])
        r = h + 1
        k = p(n[:h])
        b = p(n[r:])
        return k + [n[h]] + b
    else:
        return n
def J():
    C = 'from quick import quick_sort'
    print('\n    Timings for best, average and worst case scenarios for the merge sort.\n    --------------------------------------------------------------------------\n    ')
    print('3 Best Case Scenarios - sorted except for one value')
    for Q in a(3):
        i = U(9, 50)
        v = [Q for Q in a(i)]
        (v[6], v[-1]) = (v[-1], v[6])
        z = vK('quick_sort({})'.format(v), C)
        print('List {}: length={}; time = {}'.format(Q + 1, i, z))
    print('\n3 Average Case Scenarios - Moderately sorted')
    for Q in a(3):
        i = U(9, 50)
        v = [Q for Q in a(i)]
        Z(v)
        z = vK('quick_sort({})'.format(v), C)
        print('List {}: length={}; time = {}'.format(Q + 1, i, z))
    print('\n3 Worst Case Scenarios - Completely unsorted')
    for Q in a(3):
        i = U(9, 50)
        v = [Q for Q in a(i)]
        v = v[::-1]
        z = vK('quick_sort({})'.format(v), C)
        print('List {}: length={}; time = {}'.format(Q + 1, i, z))
if P == '__main__':
    J()