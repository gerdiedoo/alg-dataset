from __future__ import print_function
class Node(object):
    def __init__(self, data, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev
    def __str__(self):
        return str(self.data)
    def get_next(self, isnext):
        return self.next if isnext else self.prev
    def get_prev(self, isnext):
        return self.get_next(not isnext)
    def add_next(self, isnext, node):
        if isnext:
            self.next = node
        else:
            self.prev = node
    def add_prev(self, isnext, node):
        self.add_next(not isnext, node)
    def verbose(self):
        return ('prev:' + str(self.prev) +
                ' data:' + str(self.data) +
                ' next:' + str(self.next))
class Nil(Node):
    def __init__(self):
        self.data = None
        self.next = None
        self.prev = None
        super().__init__(data=self.data, next=self.next, prev=self.prev)
class LinkedList(object):
    def __init__(self):
        self.head = Nil()
        self.tail = Nil()
        self.isnext = True
    def add(self, data):
        node = Node(data)
        node.add_next(self.isnext, self.head)
        if self.head.data is None:
            self.tail = node
        else:
            self.head.add_prev(self.isnext, node)
        self.head = node
    def reversed(self):
        self.head, self.tail = self.tail, self.head
        self.isnext = not self.isnext
        self.tail.add_next(self.isnext, Nil())
    def search(self, value):
        current = self.head
        while current.data is not None:
            if current.data == value:
                return current
            current = current.get_next(self.isnext)
        return None
    def remove(self, value):
        current = self.head
        while current.data is not None and current.data != value:
            current = current.get_next(self.isnext)
        if current.data is not None:
            next_ = current.get_next(self.isnext)
            previous = current.get_prev(self.isnext)
            previous.add_next(self.isnext, next_)
            next_.add_prev(self.isnext, previous)
    def __str__(self):
        string = ''
        current = self.head
        while current.get_next(self.isnext) is not None:
            string += str(current.data) + ' -> '
            current = current.get_next(self.isnext)
        string += str(current.data)
        return string
if __name__ in "__main__":
    print('create initial linked list')
    LIST = LinkedList()
    for i in [1, -10, 3]:
        print('add {}'.format(i))
        LIST.add(i)
    print()
    print('linked list:', LIST, '\n')
    LIST.reversed()
    print('list reversed\n')
    print('linked list:', LIST, '\n')
    LIST.reversed()
    print('list reversed\n')
    print('linked list:', LIST, '\n')
    for i in [3, 10]:
        print('search {}'.format(i), LIST.search(i))
    print('')
    for i in [1, 4, -10]:
        LIST.remove(i)
        print('remove {}'.format(i))
        print('linked list:', LIST, '\n')