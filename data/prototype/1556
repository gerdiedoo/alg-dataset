from typing import List, Optional
class _Node:
    def __init__(self, item: 'object') -> None:
        self.item = item
        self.next = None
class LinkedList:
    def __init__(self, items: List[Optional['object']]) -> None:
        if not items:
            self._first = None
        else:
            self._first = _Node(items[0])
            current_node = self._first
            for item in items[1:]:
                current_node.next = _Node(item)
                current_node = current_node.next
    def __str__(self):
        required = ""
        if not self._first:
            return required
        else:
            required += str(self._first.item)
            cur_node = self._first
            while cur_node:
                cur_node = cur_node.next
                if cur_node:
                    required += " -> " + str(cur_node.item)
        return required
    def __len__(self):
        counter, cur_node = 0, self._first
        while cur_node:
            counter += 1
            cur_node = cur_node.next
        return counter
    def __getitem__(self, index):
        if (index < 0 and abs(index) > len(self)) or (index >= len(self)):
            raise IndexError
        else:
            if index < 0:
                index = len(self) + index
            counter, cur_node = 0, self._first
            while counter < index:
                cur_node = cur_node.next
                counter += 1
            return cur_node.item
    def reverse(self) -> None:
        cur_node, prev_node = self._first,None
        while cur_node:
            next_node = cur_node.next
            cur_node.next = prev_node
            prev_node = cur_node
            cur_node = next_node
        self._first = prev_node
    def __setitem__(self, key, value):
        if ( key < 0 and abs(key) > len(self)) or (key >= len(self)):
            raise IndexError
        else:
            if key < 0:
                key = len(self) + key
            counter, cur_node = 0, self._first
            while counter < key:
                cur_node = cur_node.next
                counter += 1
            cur_node.item = value
    def __contains__(self, item) -> bool:
        cur_node = self._first
        while cur_node:
            if cur_node.item == item:
                return True
            cur_node = cur_node.next
        return False
    def append(self, item) -> None:
        new_node = _Node(item)
        prev, current = self._first, self._first
        while current:
            prev = current
            current = current.next
        prev.next = new_node
    def count(self, item) -> int:
        count, cur_node = 0, self._first
        while cur_node:
            if cur_node.item == item:
                count += 1
            cur_node = cur_node.next
        return count
    def pop(self) -> 'object':
        if not self._first:
            raise IndexError
        else:
            hold = self._first.item
            if len(self) == 1:
                self._first = None
            else:
                prev_node, current_node, next_node = self._first, self._first, self._first.next
                while next_node:
                    prev_node = current_node
                    current_node, next_node = next_node, next_node.next
                hold = current_node.item
                prev_node.next = None
            return hold
    def extend(self, link: 'LinkedList') -> None:
        if not self._first:
            self._first = link._first
        else:
            prev, current = self._first, self._first
            while current:
                prev, current = current, current.next
            prev.next = link._first
    def remove(self, item: 'objec') -> None:
        if not (item in self):
            raise ValueError
        elif self._first.item == item:
            self._first = self._first.next
        else:
            prev, current = None, self._first
            while current.item != item:
                prev, current = current, current.next
            prev.next = current.next
    def insert(self, index: int, value: 'object') -> None:
        if not self._first:
            self._first = _Node(value)
        else:
            new_node = _Node(value)
            curr_node = self._first
            if index == 0:
                new_node.next = curr_node
                self._first = new_node
            elif len(self) <= index:
                while curr_node.next:
                    curr_node = curr_node.next
                curr_node.next = new_node
            else:
                count, prev = 0, None
                while count < index:
                    prev, curr_node = curr_node, curr_node.next
                    count += 1
                prev.next,new_node.next = new_node, curr_node
if __name__ == "__main__":
    import doctest
    doctest.testmod()