import time 
def QuickSort(data, low, high, drawDataArray, sortSpeedTime):
    if low < high:
        partitionIndex = partition(data, low, high, drawDataArray, sortSpeedTime)
        QuickSort(data, low, partitionIndex-1, drawDataArray, sortSpeedTime)
        QuickSort(data, partitionIndex+1, high, drawDataArray, sortSpeedTime)
def partition(data, low, high, drawDataArray, sortSpeedTime):
    border = low
    pivot = data[high] 
    drawDataArray(data, getColorArray(len(data), low, high, border, border))
    time.sleep(sortSpeedTime)
    for j in range(low, high):
        if data[j] < pivot:
            drawDataArray(data, getColorArray(len(data), low, high, border, j, True))
            time.sleep(sortSpeedTime)
            data[border], data[j] = data[j], data[border]
            border += 1
        drawDataArray(data, getColorArray(len(data), low, high, border, j))
        time.sleep(sortSpeedTime)
    drawDataArray(data, getColorArray(len(data), low, high, border, high, True))
    time.sleep(sortSpeedTime)
    data[border], data[high] = data[high], data[border]
    return border 
def getColorArray(dataLength, low, high, border, currentIndex, isSwaping = False):
    colorArray = []
    for i in range(dataLength):
        if i >= low and i <= high:
            colorArray.append('gray') 
        else:
            colorArray.append('red') 
        if i == high:
            colorArray[i] = 'orange' 
        elif i == border:
            colorArray[i] = 'green' 
        elif i == currentIndex:
            colorArray[i] = 'yellow' 
        if isSwaping:
            if i == border or i == currentIndex:
                colorArray[i] = 'purple' 
    return colorArray