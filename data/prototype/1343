from utils import KeyValuePair, HashFunction
class HashMap(object):
    NUM_SLOTS = 127  
    BUFFER = 5  
    HASH_FUNCTION = HashFunction.base_alphabet
    def get_index(self, key):
        index = self.HASH_FUNCTION(key) % self.size
        while self.array[index] is not None:
            if self.array[index].key == key:
                break
            index = self.increment_index(index)
        return index
    def increment_index(self, index):
        index += 1
        if index >= self.size:
            index = 0
        return index
    def __init__(self, **kwargs):
        self.size = self.NUM_SLOTS
        self.array = [None for x in range(self.size)]
        for key in kwargs:
            self.__setitem__(key, kwargs[key])
    def __setitem__(self, key, value):
        item = KeyValuePair(key, value)
        index = self.get_index(item.key)
        self.array[index] = item
        if len(self) + self.BUFFER >= self.size:
            self.double()
    def __getitem__(self, item):
        index = self.get_index(item)
        stored_item = self.array[index]
        if stored_item is None:
            raise KeyError(item)
        return stored_item.value
    def __contains__(self, item):
        try:
            return self[item] is not None
        except KeyError:
            return False
    def __iter__(self):
        for item in filter(None, self.array):
            yield item.key
    def __delitem__(self, key):
        index = self.get_index(key)
        self.array[index] = None
        for item in filter(None, self.array):
            self[item.key] = item.value
    def __repr__(self):
        return '{%s}' % ', '.join(
            '"{}": {}'.format(key, self[key])
            for key in self)
    def __len__(self):
        return self.size - self.array.count(None)
    def double(self):
        new_hash_map = HashMap()
        new_hash_map.size = self.size * 2
        new_hash_map.array = [None for x in range(new_hash_map.size)]
        for item in self:
            new_hash_map[item] = self[item]
        self.array = new_hash_map.array
        self.size = new_hash_map.size