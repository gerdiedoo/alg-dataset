package org.joyfulmonster.util.concurrent.internal;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReferenceArray;
class DirectoryFactory {
    public static Directory create(int bucketCount, int bucketSize, float loadFactor, AtomicInteger totalEntryCount, AtomicInteger splitCount) {
        int dirSize = bucketCount;
        int dirMask = dirSize - 1;
        int globalDepth = Integer.bitCount(dirMask);
        AtomicReferenceArray<Bucket> bucketsArray = new AtomicReferenceArray<Bucket>(bucketCount);
        for (int bucketIdex = 0; bucketIdex < bucketCount; bucketIdex++) {
            bucketsArray.set(bucketIdex, new LinearProbingBucketImpl(globalDepth, bucketIdex, bucketSize, loadFactor, totalEntryCount, splitCount));
        }
        DirectoryImpl result = new DirectoryImpl(bucketsArray);
        for (int i = 0; i < bucketCount; i++) {
            ((LinearProbingBucketImpl)bucketsArray.get(i)).directory(result);
        }
        BucketFactory bucketFactory = new BucketFactory(result, bucketSize, loadFactor, totalEntryCount, splitCount);
        result.bucketFactory(bucketFactory);
        return result;
    }
}