package rosberglinhares.datastructuresandalgorithms.datastructures.arrays;
import rosberglinhares.datastructuresandalgorithms.algorithms.searching.BinarySearch;
public class OrderedArray<T extends Comparable<T>> {
    private T[] elements;
    private int size;
    @SuppressWarnings("unchecked")
    public OrderedArray(int maxSize) {
        this.elements = (T[])new Comparable<?>[maxSize];
        this.size = 0;
    }
    public int size() {
        return this.size;
    }
    public void insert(T value) {
        int indexToInsert = 0;
        while (indexToInsert < this.size && value.compareTo(this.elements[indexToInsert]) > 0) {
            indexToInsert++;
        }
        for (int i = this.size - 1; i >= indexToInsert; i--) {
            this.elements[i + 1] = this.elements[i];
        }
        this.elements[indexToInsert] = value;
        this.size++;
    }
    public T get(int index) {
        return this.elements[index];
    }
    public boolean binarySearch(T value) {
        BinarySearch binarySearch = new BinarySearch();
        return binarySearch.iterativeBinarySearch(this.elements, 0, this.size - 1, value);
    }
    public boolean delete(T value) {
        int indexToDelete = 0;
        int comparisonResult = -1;
        while (indexToDelete < this.size && (comparisonResult = value.compareTo(this.elements[indexToDelete])) > 0) {
            indexToDelete++;
        }
        if (comparisonResult == 0) {   
            for (int i = indexToDelete; i < this.size - 1; i++) {
                this.elements[i] = this.elements[i + 1]; 
            }
            this.size--;
            return true;
        } else {
            return false;
        }
    }
}