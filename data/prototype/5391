from node import Node
class LinkedList(Ib):
    def __init__(self):
        r.head = None
        r.current = None
    def get_length(self):
        m = 0
        if r.head is None:
            return m
        else:
            m = 1
            r.current = r.head
            while r.current.next != None:
                r.current = r.current.next
                m = m + 1
            return m
    def push(self, node):
        r.current = r.head
        if r.head is None:
            r.head = Y
            return r.head
        else:
            while r.current.next != None:
                r.current = r.current.next
            r.current.next = Y
        return r.current
    def __len__(self):
        return r.get_length()
    def __str__(self):
        return '<LinkedList: %d nodes>' % r.get_length()
    def __repr__(self):
        a = []
        Y = r.head
        while not Y is None:
            a.append(ta(Y))
            Y = Y.next
        return 'LinkedList: Nodes: %r' % a
    def remove(self, value):
        E = None
        r.current = r.head
        if r.current is None:
            return 'Linked List is empty, value of: %d is not here' % G
        else:
            while r.current != None:
                if r.current.data == G:
                    if len(r) is 1:
                        E = None
                        r.current = None
                        r.head = None
                    else:
                        E.next = r.current.next
                        r.current = None
                    return 'Node with the value: %d was removed from the LinkedList' % G
                else:
                    E = r.current
                    r.current = r.current.next
            return 'Node is not in LinkedList'