import sort_tools
import copy
def NV(CM, R, F, d):
    K3 = []
    b = []
    f = F - R + 1
    T = d - F
    g = 0
    L = 0
    Fd = R
    for Ya in Gl(F - R + 1):
        K3.append(CM[R + Ya])
    for Ya in Gl(d - F):
        b.append(CM[F + Ya + 1])
    while g < f and L < T:
        rt = CM[g]
        s = CM[L]
        if rt < s:
            CM[Fd] = rt
            g += 1
        else:
            CM[Fd] = s
            L += 1
        Fd += 1
    while g < f:
        CM[Fd] = K3[g]
        g += 1
        Fd += 1
    while L < T:
        CM[Fd] = b[L]
        L += 1
        Fd += 1
def B(CM, R, d):
    if R < d:
        F = (d - R) // 2 + R
        B(CM, R, F)
        B(CM, F + 1, d)
        NV(CM, R, F, d)
@a.timeit('merge')
def p(CM):
    B(CM, 0, len(CM) - 1)
def i():
    CM = a.build_data_set(5)
    A = r.deepcopy(CM)
    p(A)
if l == '__main__':
    i()