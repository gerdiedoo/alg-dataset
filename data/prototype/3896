package D.f.r;
public class M extends K 
{
	private int [] x;
	public M(int[] o)
	{
		x = o;
	}
	public int [] E ()
	{
		return E(x);
	}
	public int []  E (int [] o)
	{
		if (o.T == 1)
		{
			return o;
		}
		else
		{
			int [] t = new int[o.T / 2];
			int [] VC = new int[o.T - o.T / 2];
			for (int Nq = 0; Nq < o.T; Nq ++)
			{
				if (Nq < o.T / 2)
				{
					t[Nq] = o[Nq];
				}
				else
				{
					VC[Nq - o.T / 2] = o[Nq];
				}
			}
			int [] Jw = E(t);
			int [] h = E(VC);
			return NF(Jw, h);
		}
	}
	private int [] NF(int [] H, int[] jg) 
	{
		int [] LI = new int [H.T + jg.T];
		int d = 0;
		int iT = 0;
		int R = 0;
		while (d < H.T && iT < jg.T)
		{
			if (H[d] <= jg[iT])
			{
				LI[R] = H[d];
				d++;
			}
			else
			{
				LI[R] = jg[iT];
				iT++;
			}
			R++;
		}
		while (d < H.T)
		{
			LI[R] = H[d];
			d++;
			R++;
		}
		while (iT < jg.T)
		{
			LI[R] = jg[iT];
			iT++;
			R++;
		}
		return LI;
	}
}