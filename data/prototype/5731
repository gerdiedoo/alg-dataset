package f;
public class o<Y extends t<Y>> extends EX<Y> {
    protected Y[] X;
    protected void N(Y[] Gl, int dI, int U, int K) {
        int O = dI, oE = U + 1;
        for (int Nu = dI; Nu <= K; Nu++) {
            X[Nu] = Gl[Nu];
        }
        for (int Nu = dI; Nu <= K; Nu++) {
            if (O > U) {
                Gl[Nu] = X[oE++];
            } else if (oE > K) {
                Gl[Nu] = X[O++];
            } else if (X[O].v(X[oE]) <= 0) {
                Gl[Nu] = X[O++];  
            } else {
                Gl[Nu] = X[oE++];
            }
        }
    }
    @j
    public void p(Y[] Gl) {
        X = (Y[]) new t[Gl.z7];
        p(Gl, 0, Gl.z7 - 1);
    }
    private void p(Y[] Gl, int dI, int K) {
        if (K <= dI) {
            return;
        }
        int C = dI + (K - dI) / 2;
        p(Gl, dI, C);
        p(Gl, C + 1, K);
        N(Gl, dI, C, K);
    }
    public static void main(String[] args) {
        b[] Gl = new b[]{3, 5, 1, 2, 4};
        new o<b>().p(Gl);
    }
}