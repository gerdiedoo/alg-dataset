class BiMap:
    def __init__(self, dictionary=None):
        self.key_to_value = dict()
        self.value_to_key = dict()
        if dictionary:
            for key in dictionary:
                self.add_key(key, dictionary[key])
    def __iter__(self):
        return self.key_to_value.__iter__()
    def __len__(self):
        return len(self.key_to_value)
    def add_key(self, key, value):
        self.key_to_value[key] = value
        self.value_to_key[value] = key
    def add_value(self, value, key):
        self.add_key(key, value)
    def update_by_key(self, dictionary):
        for key, value in dictionary.items():
            self.add_key(key, value)
    def update_by_value(self, dictionary):
        for value, key in dictionary.items():
            self.add_key(key, value)
    def get_key(self, key):
        return self.key_to_value[key]
    def get_value(self, value):
        return self.value_to_key[value]
    def remove_key(self, key):
        del self.value_to_key[self.key_to_value[key]]
        del self.key_to_value[key]
    def remove_value(self, value):
        self.remove_key(self.get_value(value))
    def clear(self):
        self.key_to_value.clear()
        self.value_to_key.clear()
    def pop_key(self, key):
        value = self.get_key(key)
        self.remove_key(key)
        return value
    def pop_value(self, value):
        key = self.get_value(value)
        self.remove_value(value)
        return key
    def get_key_to_value(self):
        return self.key_to_value
    def get_value_to_key(self):
        return self.value_to_key