import sys
class HashMap(object):
    def __init__(self, size: int):
        self.size = size
        self.key_list = [None] * self.size
        self.value_list = [None] * self.size
        self.num_items = 0
        self.lengths = [None] * self.size
    def set(self, key: str, value):
        key, hash_index = self._process_key(key)
        for probe_length in range(self.size):
            if self.key_list[hash_index] is None:
                self.key_list[hash_index], self.value_list[hash_index], self.num_items = key, value, self.num_items + 1
                self.lengths[hash_index] = probe_length
                return True
            elif self.key_list[hash_index] == key:
                self.value_list[hash_index] = value
                return True
            else:
                hash_index = self._increment_hash(hash_index)
        return False
    def get(self, key: str):
        key, hash_index = self._process_key(key)
        for probe_length in range(self.size):
            if self.key_list[hash_index] == key:
                return self.value_list[hash_index]
            else:
                hash_index = self._increment_hash(hash_index)
        return None
    def delete(self, key):
        if self.load() == 0:
            return None
        key, hash_index = self._process_key(key)
        for probe_length in range(self.size):
            if self.key_list[hash_index] == key:
                value = self.value_list[hash_index]
                self.key_list[hash_index], self.value_list[hash_index], self.num_items = None, None, self.num_items - 1
                return value
            else:
                hash_index = self._increment_hash(hash_index)
        return None
    def load(self):
        return self.num_items / self.size
    def clear(self):
        self.key_list.clear()
        self.value_list.clear()
        self.num_items = 0
    def _process_key(self, key: str):
        key = sys.intern(key)
        return key, hash(key) % self.size
    def _increment_hash(self, index: int):
        return (index + 1) % self.size
    @property
    def probe_lengths(self):
        return [length for length in self.lengths if length is not None]