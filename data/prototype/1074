import math
import sys
import itertools
def SelectPivot(R):
    length = len(R)    
    i_first = 0
    i_last = length-1
    i_mid = int(math.ceil((length-1)/2))
    if i_last == i_mid :
        return i_first 
    if R[i_last] >= R[i_mid] : 
        if R[i_mid] >= R[i_first] : 
            return i_mid
        elif R[i_first] >= R[i_last] : 
            return i_last
        else : 
            return  i_first
    else: 
        if R[i_mid] <= R[i_first] : 
            return i_mid
        elif R[i_first] <= R[i_last] : 
            return i_last
        else : 
            return i_first
    return None
def TernaryQuickSort(R):
    length = len(R)
    if length <= 1:
        return R
    x = SelectPivot(R)
    R_less = [] 
    R_equal = [] 
    R_greater = []
    for s in R : 
        if s < R[x] :
            R_less.append(s)
        elif s == R[x] :
            R_equal.append(s)
        else :
            R_greater.append(s)
    R_less = TernaryQuickSort(R_less)
    R_greater = TernaryQuickSort(R_greater)
    return R_less + R_equal + R_greater
def QuickSort(iterable, depth=0):
    stack = [[iterable, depth]] 
    result = [] 
    while stack :
        R, l = stack.pop() 
        length = len(R)
        if length <= 1:
            if length == 1 :
                result += R
            continue
        R_less = [] 
        R_equal = [] 
        R_greater = []
        R_new = [] 
        for S in R:
            if len(S) <= l :
                result.append(S)
            else :
                R_new.append(S)
        if len(R_new) == 0 :
            continue
        X = R_new[SelectPivot(R_new)]
        char_at_x = X[l]
        for S in R_new : 
            if S[l] < char_at_x :
                R_less.append(S)
            elif S[l] == char_at_x :
                R_equal.append(S)
            else :
                R_greater.append(S)
        stack.append((R_greater, l))
        stack.append((R_equal, l+1))
        stack.append((R_less, l))
    return result
if __name__ == "__main__" :
    _R = ['abc','def', 'i', 'aaf','adsf1','gxxa','a']
    print(TernaryQuickSort(_R))
    print(QuickSort(_R))