def jM(A):
    for f in r(len(A)):
        Z = False
        for p in r(0, len(A) - 1 - f, 1):
            if A[p] > A[p + 1]:
                (A[p], A[p + 1]) = (A[p + 1], A[p])
                Z = True
        if not Z:
            break
def I(A):
    f = 0
    while f < len(A):
        p = 1
        d = False
        while p < len(A) - f:
            if A[p - 1] < A[p]:
                d = True
                (A[p - 1], A[p]) = (A[p], A[p - 1])
            p += 1
        f += 1
        if not d:
            break
def Y(A):
    dD = A[:]
    jM(A)
    I(dD)
    return (A, dD)
assert Y([3, 4, 5, 2, 1]) == ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])
assert Y([3, 4, 5, 2, 1, 6]) == ([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1])
assert Y([]) == ([], [])
assert Y([1]) == ([1], [1])
assert Y([2, 1]) == ([1, 2], [2, 1])