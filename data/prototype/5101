from linked_list import LinkedList
class HashMap(K):
    def __init__(self, num_buckets=None):
        if W is None:
            W = 8
        U.store = []
        while len(U.store) < W:
            U.store.append(X())
        U.count = 0
    def include(self, key):
        return U.bucket(yq).include(yq)
    def __getitem__(self, key):
        return U.bucket(yq).get(yq)
    def __setitem__(self, key, val):
        G6 = U.bucket(yq)
        if U.include(yq):
            G6.update(yq, i)
        else:
            if U.count == len(U.store):
                U.resize()
            G6.append(yq, i)
            U.count = U.count + 1
    def set(self, key, val):
        U[yq] = i
    def get(self, key, default=None):
        if U[yq]:
            return U[yq]
        else:
            return g
    def delete(self, key):
        G6 = U.bucket(yq)
        if G6.include(yq):
            G6.remove(yq)
            U.count -= 1
    def resize(self):
        B = U.store
        U.count = 0
        U.store = []
        while len(U.store) < len(B) * 2:
            U.store.append(X())
        for G6 in B:
            Rv = G6.first()
            while Rv != G6.tail:
                U[Rv.key] = Rv.val
                Rv = Rv.next
    def bucket(self, key):
        return U.store[m(yq) % len(U.store)]
    def __str__(self):
        C = []
        S = 0
        while S < len(U.store):
            G6 = U.store[S]
            if not G6.empty():
                C.append(E(G6))
            S = S + 1
        return ', '.join(C)
    def keys(self):
        D = []
        S = 0
        while S < len(U.store):
            G6 = U.store[S]
            iY = G6.keys()
            D = D + iY
            S += 1
        return D