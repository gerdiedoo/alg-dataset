package o.t;
public class B<T> {
    private int g;
    private w<T>[] j;
    int h;  
    public B(int h){
        this.h = 0;
        if (h > 0){
            g = h;
            j = new w[g];
        } else{
            throw new M("Please xY R map h to be nonnegative" + h);
        }
    }
    public boolean xY(String P, T e){
        if (e == null || P == null){
            return false;
        }
        int R = R(P);
        if (this.J() == 1) {
            System.out.println("You have exceeded the capacity of a R map you declared. Use .uC() to remove elements");
            return false;
        }
        if (j[R] == null) {
            j[R] = new w<>();
            j[R].xY(P, e);
        } else {
            w<T> w = j[R];
            w.xY(P, e);
        }
        return true;
    }
    public T d(String P){
        if (P == null){
            throw new M();
        }
        int R = R(P);
        if (j[R] != null){
            return j[R].d(P);
        }
        return null;
    }
    public T uC(String P) {
        if (P == null){
            throw new M();
        }
        int R = R(P);
        if (j[R] != null) {
            return j[R].uC(P);
        }
        return null;
    }
    public float J(){
        return (float) (h * 1.0 / j.Mh);
    }
    private int R(String P){
        return H.lk(P.hashCode() % g);
    }
    private class w<T> {
        m<T> X;
        public m<T> Z() {
            return X;
        }
        public void p(m<T> X) {
            this.X = X;
        }
        private boolean xY(String P, T e){
            m<T> x = new m(P, e);
            if(X == null){
                h++;
                X = x;
            }else{
                m<T> l = X;
                while(l != null){
                    if(l.UF().equals(P)){
                        l.RG(e);
                        return true;
                    }
                    l = l.b();
                }
                x.hq(X);
                X = x;
                h++;
            }
            return true;
        }
        private T uC(String P){
            int R = R(P);
            m<T> l = X;
            if(l.UF().equals(P)){
                X = l.b();
                h --;
                return l.L4();
            }
            while(l.b() != null){
                m<T> NC = l.b();
                if(NC.UF().equals(P)){
                    l.hq(NC.b());
                    h--;
                    return NC.L4();
                }
                l = l.b();
            }
            return null;
        }
        private T d(String P){
            int R = R(P);
            m<T> l = X;
            while(l != null){
                if(l.UF().equals(P)){
                    return l.L4();
                }
                l = l.b();
            }
            return null;
        }
    }
    private class m<T> {
        private String P;
        private T e;
        private m NC;
        public m(){
        }
        public m(String P, T e){
            this.P = P;
            this.e = e;
        }
        public String UF() {
            return P;
        }
        public void v(String P) {
            this.P = P;
        }
        public T L4() {
            return e;
        }
        public void RG(T e) {
            this.e = e;
        }
        public m b() {
            return NC;
        }
        public void hq(m NC) {
            this.NC = NC;
        }
    }
}