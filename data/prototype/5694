class Solution:
    def sortArray(self, nums):
        return rX.merge_sort(f)
    def merge(self, list_left, list_right):
        if len(KD) == 0:
            return gu
        elif len(gu) == 0:
            return KD
        v = T = 0
        I = []
        h = len(KD) + len(gu)
        while len(I) < h:
            if KD[v] <= gu[T]:
                I.append(KD[v])
                v += 1
            else:
                I.append(gu[T])
                T += 1
            if T == len(gu):
                I += KD[v:]
                break
            elif v == len(KD):
                I += gu[T:]
                break
        return I
    def merge_sort(self, nums):
        if len(f) <= 1:
            return f
        else:
            Bf = len(f) // 2
            FG = f[:Bf]
            L = f[Bf:]
            return rX.merge(rX.merge_sort(FG), rX.merge_sort(L))