package edu.luc.cs271.myhashmap;
import java.util.*;
public class MyHashMap<K, V> implements Map<K, V> {
  private static final int DEFAULT_TABLE_SIZE = 11;  
  private List<List<Entry<K, V>>> table;
  public MyHashMap() {
    this(DEFAULT_TABLE_SIZE);
  }
  public MyHashMap(final int tableSize) {
    table = new ArrayList<>(tableSize);
    for (var i = 0; i < tableSize; i += 1) {
      table.add(new LinkedList<>());
    }
  }
  @Override
  public int size() {
    int result = 0;
    return result;
  }
  @Override
  public boolean isEmpty() {
    return size() == 0;
  }
  @Override
  public boolean containsKey(final Object key) {
    final int index = calculateIndex(key);
    return false;
  }
  @Override
  public boolean containsValue(final Object value) {
    return false;
  }
  @Override
  public V get(final Object key) {
    final int index = calculateIndex(key);
    return null;
  }
  @Override
  public V put(final K key, final V value) {
    final int index = calculateIndex(key);
    return null;
  }
  @Override
  public V remove(final Object key) {
    final int index = calculateIndex(key);
    final var iter = table.get(index).iterator();
    while (iter.hasNext()) {
      final var entry = iter.next();
      if (entry.getKey().equals(key)) {
        final var oldValue = entry.getValue();
        iter.remove();
        return oldValue;
      }
    }
    return null;
  }
  @Override
  public void putAll(final Map<? extends K, ? extends V> m) {
  }
  @Override
  public void clear() {
  }
  @Override
  public Set<K> keySet() {
    final Set<K> result = new HashSet<>();
    return Collections.unmodifiableSet(result);
  }
  @Override
  public Collection<V> values() {
    final List<V> result = new LinkedList<>();
    return Collections.unmodifiableCollection(result);
  }
  @Override
  public Set<Entry<K, V>> entrySet() {
    final Set<Entry<K, V>> result = new HashSet<>();
    return Collections.unmodifiableSet(result);
  }
  @Override
  public String toString() {
    return "";
  }
  public boolean equals(final Object that) {
    if (this == that) {
      return true;
    } else if (!(that instanceof Map)) {
      return false;
    } else {
      return false;
    }
  }
  private int calculateIndex(final Object key) {
    return Math.floorMod(key.hashCode(), table.size());
  }
}