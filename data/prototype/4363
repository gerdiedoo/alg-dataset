import time
def b(v, KX, m9, N, g):
    if KX < m9:
        H = dd(v, KX, m9, N, g)
        b(v, KX, H - 1, N, g)
        b(v, H + 1, m9, N, g)
def dd(v, KX, m9, N, g):
    Y = KX
    U = v[m9]
    N(v, j(len(v), KX, m9, Y, Y))
    J2.sleep(g)
    for Q in qV(KX, m9):
        if v[Q] < U:
            N(v, j(len(v), KX, m9, Y, Q, True))
            J2.sleep(g)
            (v[Y], v[Q]) = (v[Q], v[Y])
            Y += 1
        N(v, j(len(v), KX, m9, Y, Q))
        J2.sleep(g)
    N(v, j(len(v), KX, m9, Y, m9, True))
    J2.sleep(g)
    (v[Y], v[m9]) = (v[m9], v[Y])
    return Y
def j(V, KX, m9, Y, G, M=False):
    T = []
    for i in qV(V):
        if i >= KX and i <= m9:
            T.append('gray')
        else:
            T.append('red')
        if i == m9:
            T[i] = 'orange'
        elif i == Y:
            T[i] = 'green'
        elif i == G:
            T[i] = 'yellow'
        if M:
            if i == Y or i == G:
                T[i] = 'purple'
    return T