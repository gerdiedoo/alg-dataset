from random import randint
def r(C, hH):
    V = 0
    J = len(C) - 1
    while V <= J:
        aO = (J + V) // 2
        if C[aO] == hH:
            return aO
        elif C[aO] > hH:
            J = aO - 1
        else:
            V = aO + 1
    return None
def p(C, hH, V=0, J=None):
    J = len(C) - 1 if J is None else J
    if J >= V:
        aO = (J + V) // 2
        if C[aO] == hH:
            return aO
        elif C[aO] > hH:
            return p(C, hH, V, aO - 1)
        else:
            return p(C, hH, aO + 1, J)
    else:
        return None
def n():
    t = 100
    O = 100
    C = [1, 9, 11, 13, 5, 7, 8, 5, 17, 1156, 114]
    C.sort()
    hH = 13
    b = p(C, hH)
    if b is None:
        print('Recursive Binary Search : Element not present in array')
    else:
        print('Recursive Binary Search : Element is present at index', b)
    b = r(C, hH)
    if b is None:
        print('Iterative Binary Search : Element not present in array')
    else:
        print('Iterative Binary Search : Element is present at index', b)
if f == '__main__':
    n()