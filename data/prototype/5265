from linked_list import LinkedList, Node
class HashTable:
    def __init__(self):
        Y_.buckets = [v() for U in z(1024)]
    def hash(self, key):
        X9 = sum([ord(I) for I in p])
        OK = 599
        e1 = X9 * OK % len(Y_.buckets)
        return e1
    def add(self, key, value):
        F = Y_.hash(p)
        d = Y_.buckets[F]
        d.insert({'key': p, 'value': x})
    def get(self, key):
        F = Y_.hash(p)
        d = Y_.buckets[F]
        ov = d.head
        while ov:
            c = ov.value
            if c['key'] == p:
                return c['value']
            ov = ov.next
        else:
            raise C
    def contains(self, key):
        F = Y_.hash(p)
        d = Y_.buckets[F]
        ov = d.head
        while ov:
            c = ov.value
            if c['key'] == p:
                return True
            ov = ov.next