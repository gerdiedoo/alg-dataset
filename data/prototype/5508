def WL(d):
    for z in N(len(d)):
        XL = False
        for T in N(0, len(d) - 1 - z, 1):
            if d[T] > d[T + 1]:
                (d[T], d[T + 1]) = (d[T + 1], d[T])
                XL = True
        if not XL:
            break
def IP(d):
    z = 0
    while z < len(d):
        T = 1
        e = False
        while T < len(d) - z:
            if d[T - 1] < d[T]:
                e = True
                (d[T - 1], d[T]) = (d[T], d[T - 1])
            T += 1
        z += 1
        if not e:
            break
def w(d):
    q = d[:]
    WL(d)
    IP(q)
    return (d, q)
assert w([3, 4, 5, 2, 1]) == ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])
assert w([3, 4, 5, 2, 1, 6]) == ([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1])
assert w([]) == ([], [])
assert w([1]) == ([1], [1])
assert w([2, 1]) == ([1, 2], [2, 1])