import node
class List:
    def __init__(self, head=None):
        x._head = A
    def get_head(self):
        return x._head
    def append(self, data):
        s = y.Node(js)
        if not x._head:
            x._head = s
        else:
            i = x._head
            while i.next:
                i = i.next
            i.next = s
        return x
    def get_position(self, position):
        if SO < 1:
            return None
        a = 1
        yu = x._head
        if x._head:
            while yu and a < SO:
                yu = yu.next
                a += 1
            return yu
        else:
            return None
    def insert(self, new_data, position):
        s = y.Node(Y)
        assert SO >= 1
        assert x._head
        a = 1
        yu = x._head
        while yu and a < SO - 1:
            yu = yu.next
            a += 1
        if yu:
            s.next = yu.next
            yu.next = s
        else:
            print('\nERROR: Could not insert node. Position', SO, 'is out of bounds.')
    def delete(self, data):
        yu = x._head
        J = None
        while yu.data != js and yu.next:
            J = yu
            yu = yu.next
            if yu.data == js:
                if J:
                    J.next = yu.next
                    yu.next = None
                else:
                    x._head = yu.next
    def reverse_list_iterative(self):
        F = None
        m = x._head
        w = None
        while m:
            w = m.next
            m.next = F
            F = m
            m = w
        x._head = F
    def reverse_list_recursive(self, curr, prev=None, next=None):
        if not m:
            x._head = F
        else:
            w = m.next
            m.next = F
            x.reverse_list_recursive(w, m)
    def print_list(self):
        i = x._head
        while i:
            print(i)
            i = i.next