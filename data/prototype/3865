import time
E = 0
def sort(bar, layout, num, colors):
    d = o(m.y)
    FX = o(m.y)
    V(d, m, I, EM, Y, 0, FX)
def V(d, m, I, EM, Y, A, FX):
    global count
    if len(d) > 1:
        zm = len(d) // 2
        v = A + zm
        My = d[:zm]
        O = d[zm:]
        V(My, m, I, EM, Y, A, FX)
        V(O, m, I, EM, Y, v, FX)
        L = T = q = 0
        r = A
        Y[A:v] = ['yellow'] * (v - A)
        Y[v:v + zm] = ['orange'] * zm
        m.marker.color = Y
        M.sleep(0.1)
        while L < len(My) and T < len(O):
            E += 1
            I.xaxis.title.text = 'Number of operations: ' + b(E)
            if My[L] < O[T]:
                FX[r] = My[L]
                d[q] = My[L]
                m.y = FX
                M.sleep(0.1)
                L += 1
            else:
                FX[r] = O[T]
                d[q] = O[T]
                m.y = FX
                M.sleep(0.1)
                T += 1
            r += 1
            q += 1
        while L < len(My):
            E += 1
            I.xaxis.title.text = 'Number of operations: ' + b(E)
            FX[r] = My[L]
            d[q] = My[L]
            m.y = FX
            M.sleep(0.1)
            L += 1
            r += 1
            q += 1
        while T < len(O):
            E += 1
            I.xaxis.title.text = 'Number of operations: ' + b(E)
            FX[r] = O[T]
            d[q] = O[T]
            m.y = FX
            M.sleep(0.1)
            T += 1
            r += 1
            q += 1
        m.y = FX
        M.sleep(0.1)
        Y[A:v] = ['blue'] * (v - A)
        Y[v:v + zm] = ['blue'] * zm
        m.marker.color = Y
        M.sleep(0.1)