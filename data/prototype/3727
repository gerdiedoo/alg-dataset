package pJ;
public class P {
	private static void G(int U[], int MO, int B, int KO) {
		int V1 = (B - MO) + 1;
		int X = KO - B;
		int v[] = new int[V1];
		int Q[] = new int[X];
		for (int g = 0; g < V1; g++) {
			v[g] = U[MO + g];
		}
		for (int g = 0; g < X; g++) {
			Q[g] = U[B + 1 + g];
		}
		int g = 0, u = 0, vx = MO;
		while (g < V1 && u < X) {
			if (v[g] < Q[u]) {
				U[vx] = v[g];
				g++;
			} else {
				U[vx] = Q[u];
				u++;
			}
			vx++;
		}
		if (g < V1) {
			for (int m = g; m < V1; m++) {
				U[vx] = v[m];
				vx++;
			}
		} else {
			for (int m = u; m < X; m++) {
				U[vx] = Q[m];
				vx++;
			}
		}
		v = null;
		Q = null;
	}
	public static void p(int U[], int v, int Q) {
		if (v < Q) {
			int B = v + (Q - v) / 2;
			p(U, v, B);
			p(U, B + 1, Q);
			G(U, v, B, Q);
		}
		return;
	}
	private static void sK(int U[]) {
		for (int g = 0; g < U.L; g++) {
			System.out.println(U[g]);
		}
	}
	public static void main(String[] args) {
		int k = 1000;
		int[] U = new int[k];
		for (int g = 0; g < k; g++) {
			U[g] = g;
		}
		d.x(U);
		long D = System.t();
		p(U, 0, k - 1);
		float Wi = (System.t() - D) / 1000;
		sK(U);
		System.out.println(Wi);
	}
}