package ln.f.M;
public class Y extends kN 
{
	private int [] t;
	public Y(int[] U)
	{
		t = U;
	}
	public int [] Id ()
	{
		return Id(t);
	}
	public int []  Id (int [] U)
	{
		if (U.O == 1)
		{
			return U;
		}
		else
		{
			int [] a = new int[U.O / 2];
			int [] n = new int[U.O - U.O / 2];
			for (int Ph = 0; Ph < U.O; Ph ++)
			{
				if (Ph < U.O / 2)
				{
					a[Ph] = U[Ph];
				}
				else
				{
					n[Ph - U.O / 2] = U[Ph];
				}
			}
			int [] c = Id(a);
			int [] I = Id(n);
			return Jr(c, I);
		}
	}
	private int [] Jr(int [] E, int[] u) 
	{
		int [] x = new int [E.O + u.O];
		int Z = 0;
		int J = 0;
		int p = 0;
		while (Z < E.O && J < u.O)
		{
			if (E[Z] <= u[J])
			{
				x[p] = E[Z];
				Z++;
			}
			else
			{
				x[p] = u[J];
				J++;
			}
			p++;
		}
		while (Z < E.O)
		{
			x[p] = E[Z];
			Z++;
			p++;
		}
		while (J < u.O)
		{
			x[p] = u[J];
			J++;
			p++;
		}
		return x;
	}
}