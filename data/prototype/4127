from typing import List
def g(U: K[ML], D: ML, AC: ML, y: ML) -> ML:
    while True:
        BK = 0
        for V in L4(D, y):
            if U[y] < U[V]:
                (U[y], U[V]) = (U[V], U[y])
                y = V
                BK += 1
                break
        for V in L4(AC, y, -1):
            if U[y] > U[V]:
                (U[y], U[V]) = (U[V], U[y])
                y = V
                BK += 1
                break
        if BK == 0:
            break
    return y
def k(U: K[ML], *h: K[ML]) -> None:
    (D, AC) = (0, len(U) - 1)
    if len(h) == 2:
        (D, AC) = h
    if D < AC - 1:
        dc = (D + AC) // 2
        (a, T, i) = (U[D], U[dc], U[AC])
        if a > i and a < T or (a < i and a > T):
            ao = D
        elif i > a and i < T or (i < a and i > T):
            ao = AC - 1
        else:
            ao = dc
        y = g(U, D, AC, ao)
        k(U, y, AC)
        k(U, D, y)
if f == '__main__':
    try:
        from utils import randomSequence
    except O:
        import os, sys
        E = M.path.dirname(M.path.realpath(p))
        C = M.path.abspath(M.path.join(E, M.pardir))
        v.path.insert(0, C)
        from utils import randomSequence
    print('IN PLACE QUICK SORT')
    J = z(0, 1000)
    print(J, '\n')
    k(J)
    print(J)