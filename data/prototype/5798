class Solution:
    def sortArray(self, nums: O[t]) -> O[t]:
        if not Z:
            return []
        if len(Z) == 1:
            return Z
        return F8.quickSort(Z, 0, len(Z) - 1)
    def partition(self, nums, start, end):
        FH = Z[M]
        F = M + 1
        L = tU
        while True:
            while F <= L and Z[L] >= FH:
                L = L - 1
            while F <= L and Z[F] <= FH:
                F = F + 1
            if F <= L:
                (Z[F], Z[L]) = (Z[L], Z[F])
            else:
                break
        (Z[M], Z[L]) = (Z[L], Z[M])
        return L
    def quickSort(self, nums, start, end):
        if M >= tU:
            return
        a = F8.partition(Z, M, tU)
        F8.quickSort(Z, M, a - 1)
        F8.quickSort(Z, a + 1, tU)
        return Z