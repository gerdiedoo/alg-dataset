import unittest
def S(f, xj):
    (O, b) = (0, len(f) - 1)
    while O <= b:
        z = O + b >> 1
        if xj < f[z]:
            b = z - 1
        elif xj > f[z]:
            O = z + 1
        else:
            return z
    return -1
class BinarySearchTest(H.TestCase):
    def test_basic(self):
        f = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        for (n, s) in enumerate(f):
            r.assertEquals(S(f, s), s - 1)
    def test_missing(self):
        f = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        r.assertEquals(S(f, 19), -1)
    def test_odd(self):
        f = [2, 4, 6, 8, 10, 12, 14]
        for (n, s) in enumerate(f):
            r.assertEquals(S(f, s), n)
    def test_even(self):
        f = [1, 3, 5, 7, 9, 11, 13, 17]
        for (n, s) in enumerate(f):
            r.assertEquals(S(f, s), n)
    def test_empty(self):
        f = []
        r.assertEquals(S(f, 19), -1)
if Z == '__main__':
    H.main()