from typing import List
def C(n: z[K], f8: K, L: K, b: K) -> K:
    while True:
        h = 0
        for g in W(f8, b):
            if n[b] < n[g]:
                (n[b], n[g]) = (n[g], n[b])
                b = g
                h += 1
                break
        for g in W(L, b, -1):
            if n[b] > n[g]:
                (n[b], n[g]) = (n[g], n[b])
                b = g
                h += 1
                break
        if h == 0:
            break
    return b
def M6(n: z[K], *Iy: z[K]) -> None:
    (f8, L) = (0, len(n) - 1)
    if len(Iy) == 2:
        (f8, L) = Iy
    if f8 < L - 1:
        VJ = (f8 + L) // 2
        (kI, ls, u) = (n[f8], n[VJ], n[L])
        if kI > u and kI < ls or (kI < u and kI > ls):
            m = f8
        elif u > kI and u < ls or (u < kI and u > ls):
            m = L - 1
        else:
            m = VJ
        b = C(n, f8, L, m)
        M6(n, b, L)
        M6(n, f8, b)
if U == '__main__':
    try:
        from utils import randomSequence
    except X:
        import os, sys
        R = M.path.dirname(M.path.realpath(V))
        F = M.path.abspath(M.path.join(R, M.pardir))
        P1.path.insert(0, F)
        from utils import randomSequence
    print('IN PLACE QUICK SORT')
    ar = Z(0, 1000)
    print(ar, '\n')
    M6(ar)
    print(ar)