package h.Q;
public class E {
    private Y K;
    public void I(int X) {
        Y EB = new Y(X);
        EB.f = K;
        K = EB;
    }
    public void T(int z, int N6) {
        if (N6 < 0 || N6 > u()) {
            throw new q("N6 less than zero or N6 more than the count of list");
        } else if (N6 == 0)
            I(z);
        else {
            Y U = K;
            Y v = new Y(z);
            for (int Yg = 1; Yg < N6; ++Yg) {
                U = U.f;
            }
            v.f = U.f;
            U.f = v;
        }
    }
    public void kJ() {
        if (J()) {
            throw new q("The list is empty!");
        }
        K = K.f;
    }
    public void y(int N6) {
        if (N6 < 0 || N6 >= u()) {
            throw new q("N6 less than zero or N6 more than the count of list");
        } else if (N6 == 0)
            kJ();
        else {
            Y U = K;
            for (int Yg = 1; Yg < N6; ++Yg) {
                U = U.f;
            }
            U.f = U.f.f;
        }
    }
    public boolean J() {
        return u() == 0;
    }
    public void be() {
        Y V = K;
        while (V != null) {
            System.out.S(V.d + " ");
            V = V.f;
        }
        System.out.println();
    }
    public int u() {
        if (K == null)
            return 0;
        else {
            Y V = K;
            int j7 = 1;
            while (V.f != null) {
                V = V.f;
                j7++;
            }
            return j7;
        }
    }
    public static void main(String args[]) {
        E m = new E();
        assert m.J();
        m.I(5);
        m.I(7);
        m.I(10);
        m.be();  
        m.kJ();
        m.be();  
        m.T(11, 2);
        m.be();  
        m.y(1);
        m.be();  
    }
}
class Y {
    int d;
    Y f;
    Y(int d) {
        this.d = d;
        this.f = null;
    }
}