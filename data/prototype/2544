import j.Dr.*;
import j.p.*;
import j.M.*;
class s
{
public static void main(String args[])throws J
{
	FE BO=new FE(new B(System.K));
	int TA;
	do
	{
	System.out.println("\n1.Linear s\n2.Binary s\n3.Binary s with recursion\n4.Exit");
	TA=f.A(BO.e());
	if(TA==4)
		return;
	System.out.println("Enter the number of terms");
	int o=f.A(BO.e());
	int W[]=new int[o];
	for(int T=0;T<o;T++)
		{
			System.out.println("Enter "+(T+1)+"th term");
			W[T]=f.A(BO.e());
		}
		System.out.println("Enter number to be searched");
		int n=f.A(BO.e());
		switch(TA)
		{
			case 1:
				F8(W,o,n);
				break;
			case 2:
				P(W,o,n);
				break;
			case 3:
				int k=0;
				int D=o;
				L(W,o,n,k,D);
				break;
		}
	}
	while(TA!=4);
}
public static void F8(int W[],int o,int n)
{
	for(int T=0;T<o;T++)
	{
		if(W[T]==n)
		{
			System.out.println(n+" found at "+(T+1)+"th position");
			return;
		}
	}
	System.out.println(n+" not found");
}
public static void P(int W[],int o,int n)
{
	int k=0;
	int D=o;
	int F=(k+D)/2;
	while(k!=D)
	{
		if(W[F]==n)
			{
			System.out.println(n+" found at "+(F+1)+"th position");
			return;
			}
		if(W[F]<n)
			{
				k=F+1;
				D=o;
				 F=(k+D)/2;
			}
		else
			{
				k=0;
				D=F-1;
				 F=(k+D)/2;
			}
	}
		System.out.println(n+" not found");
}
public static void L(int W[],int o,int n,int k, int D)
{
	if(k>D)
	{
		System.out.println(n+" not found");
		return;
	}
		int F=(k+D)/2;
		try{
		if(W[F]==n)
			{
			System.out.println(n+" found at "+(F+1)+"th position");
			return;
			}
		if(W[F]<n)
			{
				L( W, o, n, F+1, D);
			}
		if(W[F]>n)
			{
				L( W, o, n, k,  F-1);
			}
		}
		catch(w v) {
				System.out.println(n+" not found");
			}
}
}