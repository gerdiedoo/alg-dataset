from linked_list import LinkedList
class HashMap(X):
    def __init__(self, num_buckets=None):
        if vN is None:
            vN = 8
        nk.store = []
        while len(nk.store) < vN:
            nk.store.append(Ee())
        nk.count = 0
    def include(self, key):
        return nk.bucket(j).include(j)
    def __getitem__(self, key):
        return nk.bucket(j).get(j)
    def __setitem__(self, key, val):
        P = nk.bucket(j)
        if nk.include(j):
            P.update(j, g)
        else:
            if nk.count == len(nk.store):
                nk.resize()
            P.append(j, g)
            nk.count = nk.count + 1
    def set(self, key, val):
        nk[j] = g
    def get(self, key, default=None):
        if nk[j]:
            return nk[j]
        else:
            return H
    def delete(self, key):
        P = nk.bucket(j)
        if P.include(j):
            P.remove(j)
            nk.count -= 1
    def resize(self):
        Q = nk.store
        nk.count = 0
        nk.store = []
        while len(nk.store) < len(Q) * 2:
            nk.store.append(Ee())
        for P in Q:
            V = P.first()
            while V != P.tail:
                nk[V.key] = V.val
                V = V.next
    def bucket(self, key):
        return nk.store[m(j) % len(nk.store)]
    def __str__(self):
        o = []
        qw = 0
        while qw < len(nk.store):
            P = nk.store[qw]
            if not P.empty():
                o.append(J(P))
            qw = qw + 1
        return ', '.join(o)
    def keys(self):
        so = []
        qw = 0
        while qw < len(nk.store):
            P = nk.store[qw]
            k = P.keys()
            so = so + k
            qw += 1
        return so