package algos;
import java.util.Iterator;
public class LinkedList<T> implements Iterable<T>
{
    private static class Node<T>
    {
        private T       data;
        private Node<T> next;
        Node()
        {
            data = null;
            next = null;
        }
        Node(T _data, Node<T> _next)
        {
            this();
            setData(_data);
            setNext(_next);
        }
        public void setData(T _data)
        {
            data = _data;
        }
        public void setNext(Node<T> _next)
        {
            next = _next;
        }
        public T getData()
        {
            return data;
        }
        public Node<T> getNext()
        {
            return next;
        }
    }
    private Node<T> head = null;
    int             len  = 0;
    public void insert(T _data)
    {
        head = new Node<T>(_data, head);
        len++;
    }
    public T pop()
    {
        if (head == null) {
            return null;
        }
        T retval = head.getData();
        head = head.getNext();
        len--;
        return retval;
    }
    public int size()
    {
        return len;
    }
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("[");
        boolean isFirst = true;
        for (T data : this) {
            if (isFirst) {
                isFirst = false;
            }
            else {
                sb.append(", ");
            }
            sb.append(data);
        }
        sb.append("]");
        return sb.toString();
    }
    public LinkedList<T> reverse()
    {
        Node<T> ret = null;
        while (head != null) {
            Node<T> tmp = head.next;
            head.setNext(ret);
            ret = head;
            head = tmp;
        }
        head = ret;
        return this;
    }
    public LinkedList<T> reversed()
    {
        LinkedList<T> ret = new LinkedList<T>();
        for (T data : this) {
            ret.insert(data);
        }
        return ret;
    }
    @Override
    public Iterator<T> iterator()
    {
        return new Iterator<T>()
        {
            private Node<T> current  = head;
            private Node<T> prev     = null;
            private Node<T> prevprev = null;
            @Override
            public boolean hasNext()
            {
                return current != null;
            }
            @Override
            public T next()
            {
                prevprev = prev;
                prev = current;
                current = current.getNext();
                return prev.getData();
            }
            @Override
            public void remove()
            {
                if (prev == null) {
                    return;
                }
                if (prevprev == null) {
                    LinkedList.this.pop();
                    prev = null;
                    return;
                }
                prevprev.setNext(current);
                prev = null;
                len -= 1;
            }
        };
    }
}