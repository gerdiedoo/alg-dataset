package x.O;
import x.J;
public class j_ extends J {
    private static S[] n;  
    @M
    public void yP(S[] G) {
        x(G, 0, G.L7 - 1);
    }
    public static void x(S[] G) {
        n = new S[G.L7];
        new j_().yP(G);
    }
    private static void x(S[] G, int Q, int L) {
        if (Q >= L) return;
        int s_ = Q + (L - Q) / 2;
        x(G, Q, s_);  
        x(G, s_ + 1, L);  
        O(G, Q, s_, L);  
    }
    private static void O(S[] G, int Q, int s_, int L) {
        int Pb = Q, p = s_ + 1;
        for (int l = Q; l <= L; l++)
            n[l] = G[l];
        for (int l = Q; l <= L; l++) {
            if (Pb > s_) G[l] = n[p++];  
            else if (p > L) G[l] = n[Pb++];  
            else if (A(n[p], n[Pb])) G[l] = n[p++];  
            else G[l] = n[Pb++];  
        }
    }
}