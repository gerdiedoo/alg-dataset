import random
def partition(ar, l, r):
    idx = random.randrange(l,r)
    pivot = ar[idx]
    ar[l], ar[idx] = ar[idx], ar[l]
    m = l
    for i in range(l+1, r):
        if ar[i] < pivot:
            m += 1
            ar[m], ar[i] = ar[i], ar[m]
    ar[l], ar[m] = ar[m], ar[l]
    print 'partition %d to %d, pivot %d at %d' % (l,r,pivot,m)
    print ar
    return m
def quickselect(ar, k):
    def recurse(ar, l, r, k):
        if l+1 >= r: return l
        m = partition(ar, l, r)
        if m == k-1:
            return m
        elif m < k:
            return recurse(ar, m+1, r, k)
        else:
            return recurse(ar, l, m, k)
    idx = recurse(ar, 0, len(ar), k)
    return ar[idx]
if __name__ == '__main__':
    arrK = quickselect([9,8,8,7,7,5], 1)