def R(pF):
    for o in zg(len(pF)):
        B = False
        for T in zg(0, len(pF) - 1 - o, 1):
            if pF[T] > pF[T + 1]:
                (pF[T], pF[T + 1]) = (pF[T + 1], pF[T])
                B = True
        if not B:
            break
def dt(pF):
    o = 0
    while o < len(pF):
        T = 1
        M = False
        while T < len(pF) - o:
            if pF[T - 1] < pF[T]:
                M = True
                (pF[T - 1], pF[T]) = (pF[T], pF[T - 1])
            T += 1
        o += 1
        if not M:
            break
def A(pF):
    s = pF[:]
    R(pF)
    dt(s)
    return (pF, s)
assert A([3, 4, 5, 2, 1]) == ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])
assert A([3, 4, 5, 2, 1, 6]) == ([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1])
assert A([]) == ([], [])
assert A([1]) == ([1], [1])
assert A([2, 1]) == ([1, 2], [2, 1])