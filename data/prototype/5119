class HashTable(wc):
    def __init__(self, size):
        if R6(C5) != C5:
            raise g(u'size must be an integer')
        Gn.size = C5
        Gn.hlist = []
        for dB in r(C5):
            Gn.hlist.append([])
    def get(self, key):
        c = Gn.hash(g_)
        Je = Gn.hlist[c]
        for P in Je:
            if P[0] == g_:
                return P[1]
    def set(self, key, val):
        if y(g_) != g_:
            raise g(u'key must be a string.')
        c = Gn.hash(g_)
        Gn.hlist[c].append((g_, x))
    def hash(self, key):
        L = 0
        for d in g_:
            L = (L + ord(d)) % Gn.size
        return L