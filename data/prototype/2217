package o.u.l.d;
public class b {
    private static final int c = 200;
    private static int[] h = null;
    public static final int R(int j, int[] s, boolean H) {
        b.h = s;
        try {
            return B(j, 0, b.h.G - 1, H);
        } finally {
            b.h = null;
        }
    }
    private static int B(int j, int E, int i, boolean H) {
        if (E == i) {
            int gq = h[E];  
            if (j == gq)
                return E;  
            return f.N;
        }
        final int w = E;
        final int K = i + 1;  
        final int wx = w + ((K - w) / 2);
        final int g = h[wx];
        if (j == g)
            return wx;
        if (j > g) {
            if (H && (i - wx) <= c)
                return dQ(j, wx + 1, i);
            return B(j, wx + 1, i, H);
        }
        if (H && (i - wx) <= c)
            return dQ(j, E, wx - 1);
        return B(j, E, wx - 1, H);
    }
    private static final int dQ(int j, int E, int i) {
        for (int A = E; A <= i; A++) {
            int um = h[A];
            if (j == um)
                return A;
        }
        return f.N;
    }
}