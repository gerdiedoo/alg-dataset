import node
class List:
    def __init__(self, head=None):
        U._head = x
    def get_head(self):
        return U._head
    def append(self, data):
        s = p.Node(O)
        if not U._head:
            U._head = s
        else:
            CF = U._head
            while CF.next:
                CF = CF.next
            CF.next = s
        return U
    def get_position(self, position):
        if oN < 1:
            return None
        hu = 1
        S = U._head
        if U._head:
            while S and hu < oN:
                S = S.next
                hu += 1
            return S
        else:
            return None
    def insert(self, new_data, position):
        s = p.Node(yi)
        assert oN >= 1
        assert U._head
        hu = 1
        S = U._head
        while S and hu < oN - 1:
            S = S.next
            hu += 1
        if S:
            s.next = S.next
            S.next = s
        else:
            print('\nERROR: Could not insert node. Position', oN, 'is out of bounds.')
    def delete(self, data):
        S = U._head
        DD = None
        while S.data != O and S.next:
            DD = S
            S = S.next
            if S.data == O:
                if DD:
                    DD.next = S.next
                    S.next = None
                else:
                    U._head = S.next
    def reverse_list_iterative(self):
        b = None
        H = U._head
        QE = None
        while H:
            QE = H.next
            H.next = b
            b = H
            H = QE
        U._head = b
    def reverse_list_recursive(self, curr, prev=None, next=None):
        if not H:
            U._head = b
        else:
            QE = H.next
            H.next = b
            U.reverse_list_recursive(QE, H)
    def print_list(self):
        CF = U._head
        while CF:
            print(CF)
            CF = CF.next