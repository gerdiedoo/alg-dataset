import java.util.HashSet;
import java.util.ArrayList;
import java.util.Set;
import java.util.List;
public class HashMap<K, V> implements HashMapInterface<K, V> {
    private MapEntry<K, V>[] table;
    private int size;
    public HashMap() {
        this(STARTING_SIZE);
    }
    @SuppressWarnings("unchecked")
    public HashMap(int initialCapacity) {
        table = new MapEntry[initialCapacity];
        size = 0;
    }
    @Override
    @SuppressWarnings("unchecked")
    public V add(K key, V value) {
        if ((key == null) || (value == null)) {
            throw new IllegalArgumentException("Null value cannot be added.");
        }
        MapEntry<K, V> entry = new MapEntry(key, value);
        double loadFac = (double) (size + 1) / (double) table.length;
        if (loadFac > MAX_LOAD_FACTOR) {
            resizeBackingTable(table.length * 2 + 1);
        }
        int hashIndex = Math.abs(entry.getKey().hashCode()) % table.length;
        if (table[hashIndex] == null) {
            table[hashIndex] = entry;
            size++;
            return null;
        } else {
            int i = 0;
            boolean isRemoved = false;
            int start = hashIndex;
            int next = hashIndex;
            MapEntry<K, V> currentEntry = table[hashIndex];
            int hashTemp = Math.abs(entry.getKey().hashCode()) % table.length;
            while (currentEntry != null) {
                if (!isRemoved) {
                    if (currentEntry.isRemoved()) {
                        start = hashTemp;
                        isRemoved = true;
                    }
                }
                if (currentEntry.getKey().equals(key)) {
                    V out = table[hashTemp].getValue();
                    table[hashTemp].setValue(value);
                    return out;
                }
                hashTemp = next;
                currentEntry = table[hashTemp];
                i++;
                next = (Math.abs(entry.getKey().hashCode()) + i) % table.length;
            }
            if (isRemoved) {
                table[start] = entry;
                size++;
                return null;
            } else if (table[hashTemp] == null) {
                table[hashTemp] = entry;
                size++;
                return null;
            }
        }
        return null;
    }
    @Override
    public V remove(K key) {
        if (key == null) {
            throw new IllegalArgumentException("Key cannot be null");
        }
        int hashCode = Math.abs(key.hashCode()) % table.length;
        MapEntry<K, V> current = table[hashCode];
        int i = 0;
        if (current == null) {
            throw new java.util.NoSuchElementException("Key : <" + key
                + "> was not found in this hashmap");
        }
        int mapSize = 0;
        while ((mapSize < table.length) && (current != null)) {
            if (current.getKey().equals(key)) {
                if (!current.isRemoved()) {
                    V out = current.getValue();
                    current.setRemoved(true);
                    size--;
                    return out;
                } else if (current.isRemoved()) {
                    throw new java.util.NoSuchElementException("This element "
                            + "has already been removed!");
                }
            }
            i++;
            int hashTemp = (Math.abs(key.hashCode()) + i) % table.length;
            current = table[hashTemp];
            mapSize++;
            if (current == null) {
                throw new java.util.NoSuchElementException("Key could not be "
                        + "found");
            }
        }
        if (mapSize == table.length) {
            throw new java.util.NoSuchElementException("Key could not be"
                    + " found");
        }
        return null;
    }
    @Override
    public V get(K key) {
        if (key == null) {
            throw new IllegalArgumentException("Key cannot be null.");
        }
        int hash = key.hashCode() % table.length;
        MapEntry<K, V> current = table[hash];
        if (current == null) {
            throw new java.util.NoSuchElementException("Hashmap does not  "
                    + "contain that key");
        }
        int i = 0;
        int hashTemp = hash;
        int mapSize = 0;
        while ((current != null) && (mapSize < table.length)) {
            if (current.getKey().equals(key)) {
                return current.getValue();
            }
            i++;
            hashTemp = (Math.abs(key.hashCode()) + i) % table.length;
            current = table[hashTemp];
            mapSize++;
        }
        throw new java.util.NoSuchElementException("The hashmap does not"
                + " contain that key.");
    }
    @Override
    public boolean contains(K key) {
        try {
            get(key);
        } catch (java.util.NoSuchElementException exception) {
            return false;
        }
        return true;
    }
    @Override
    @SuppressWarnings("unchecked")
    public void clear() {
        size = 0;
        table = new MapEntry[STARTING_SIZE];
    }
    @Override
    public int size() {
        return size;
    }
    @Override
    public Set<K> keySet() {
        Set<K> keys = new HashSet<>();
        for (MapEntry<K, V> entry : table) {
            if (entry != null) {
                if (entry.getKey() != null) {
                    keys.add(entry.getKey());
                }
            }
        }
        return keys;
    }
    @Override
    public List<V> values() {
        List<V> values = new ArrayList<>();
        for (MapEntry<K, V> entry : table) {
            if (entry != null) {
                values.add(entry.getValue());
            }
        }
        return values;
    }
    @Override
    @SuppressWarnings("unchecked")
    public void resizeBackingTable(int length) {
        if ((length <= 0) || (length) < size) {
            throw new IllegalArgumentException("Length was not positive or"
                    + " was less than the size of the hashmap");
        }
        MapEntry<K, V>[] temp = new MapEntry[length];
        int index = 0;
        while ((index < table.length)) {
            MapEntry<K, V> current = table[index];
            if (current == null) {
                index++;
            } else if (current != null) {
                if (!current.isRemoved()) {
                    int hash = Math.abs(current.getKey().hashCode()) % length;
                    if (temp[hash] == null) {
                        temp[hash] = current;
                    } else {
                        int k = 0;
                        int hashTemp =  (Math.abs(current.getKey().hashCode())
                                + k) % length;
                        MapEntry<K, V> toAdd = temp[hashTemp];
                        while (toAdd != null) {
                            k++;
                            hashTemp = (Math.abs(current.getKey().hashCode())
                                    + k) % length;
                            toAdd = temp[hashTemp];
                        }
                        if (temp[hashTemp] == null) {
                            temp[hashTemp] = current;
                        }
                    }
                }
                index++;
            }
        }
        table = temp;
    }
    @Override
    public MapEntry<K, V>[] getTable() {
        return table;
    }
}