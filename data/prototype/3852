package s.zT.b;
import u.k.a;
public class o {
    private static final String m = "Merge t";
    public void t(a<n> M) {
        if (M == null) {
            throw new f("The M should not be null");
        }
        t(M, 0, M.h() - 1);
    }
    private void t(a<n> M, int W, int CY) {
        if (W < CY) {
            int tM = (int) X4.K((double) (W + CY) / 2);
            t(M, W, tM);
            t(M, tM + 1, CY);
            xj(M, W, tM, CY);
        }
    }
    public void xj(a<n> M, int W, int tM, int CY) {
        if (M == null) {
            throw new f("The M should not be null");
        }
        if ((M.J()) || (M.h() == 1) || (tM > M.h() - 1)) {
            return;
        }
        zo(M, W, tM, CY);
        a<n> x = new a<>(M.w(W, tM + 1));
        a<n> R = new a<>(M.w(tM + 1, CY + 1));
        x.g(n.e5);
        R.g(n.e5);
        int Wm = 0;
        int T = 0;
        for (int z = W; z < CY + 1; z++) {
            if (x.X(Wm) < R.X(T)) {
                M.H(z, x.X(Wm));
                Wm++;
            } else {
                M.H(z, R.X(T));
                T++;
            }
        }
    }
    private void zo(a<n> M, int W, int tM, int CY) {
        if (W < 0) {
            throw new f("W must be >= 0 but is " + W);
        }
        if (W > tM) {
            throw new f("W must be <= tM, but W is " + W +
                    " and tM is " + tM);
        }
        if (CY > M.h() - 1) {
            throw new f("CY must be <= M.h() - 1, but CY is " +
                    CY + " and (M.h() - 1) equals " + (M.h() - 1));
        }
        if (tM > CY) {
            throw new f("tM must be <= CY, but tM is " + tM +
                    " and CY is " + CY);
        }
    }
    public static String p() {
        return m;
    }
}