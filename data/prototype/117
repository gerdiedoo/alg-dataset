public class KpcbHash<T> {
    private int size;
    private int TABLE_SIZE;
    private String[][] key_list;
    private T[][] value_list;
    private int[] cap_list;  
    @SuppressWarnings("unchecked")
    public KpcbHash(int size) {
        this.key_list = new String[size][];
        this.value_list = (T[][]) (new Object[size][]);
        this.cap_list = new int[size];
        for (int i = 0; i < size; i++) {
            this.key_list[i] = new String[1];
            this.value_list[i] = (T[]) (new Object[1]);
            cap_list[i] = 0;
        }
        this.size = 0;
        this.TABLE_SIZE = size;
    }
    public int hash(String key) {
        try {
            return key.hashCode() % this.TABLE_SIZE;
        } catch (Exception e) {
            return -1;
        }
    }
    @SuppressWarnings("unchecked")
    public boolean set(String key, T value) {
        int hash = this.hash(key);
        if (hash == -1) return false;  
        if (this.get(key) != null) {
            try {
                for (int i = 0; i < this.cap_list[hash]; i++)
                    if (this.key_list[hash][i].equals(key))
                        this.value_list[hash][i] = value;
                return true;
            } catch (Exception e) {
                return false;  
            }
        } else if (this.load() == 1) {
            try {
                String[][] old_key_list = this.key_list;
                T[][] old_value_list = this.value_list;
                int[] old_cap_list = this.cap_list;
                this.TABLE_SIZE *= 2;
                this.key_list = new String[this.TABLE_SIZE][];
                this.value_list = (T[][]) (new Object[this.TABLE_SIZE][]);
                this.cap_list = new int[this.TABLE_SIZE];
                this.size = 0;
                for (int i = 0; i < this.TABLE_SIZE; i++) {
                    this.key_list[i] = new String[1+old_cap_list[i/2]/2];
                    this.value_list[i] = (T[]) (new Object[1+old_cap_list[i/2]/2]);
                    this.cap_list[i] = 0;
                }
                for (int i = 0; i < TABLE_SIZE/2; i++) {
                    for (int j = 0; j < old_cap_list[i]; j++) {
                        String k = old_key_list[i][j];
                        T val = old_value_list[i][j];
                        this.set(k, val);
                    }
                }
                return this.set(key, value);
            } catch (Exception e) {
                return false;  
            }
        } else {
            try {
                if (this.key_list[hash].length == this.cap_list[hash]) {
                    String[] new_key_list = new String[this.cap_list[hash]*2];
                    @SuppressWarnings("unchecked")
                    T[] new_value_list = (T[]) (new Object[this.cap_list[hash]*2]);
                    for (int i = 0; i < this.key_list[hash].length; i++) {
                        new_key_list[i] = this.key_list[hash][i];
                        new_value_list[i] = this.value_list[hash][i];
                    }
                    this.key_list[hash] = new_key_list;
                    this.value_list[hash] = new_value_list;
                    return this.set(key, value);
                }
                this.key_list[hash][this.cap_list[hash]] = key;
                this.value_list[hash][this.cap_list[hash]] = value;
                this.cap_list[hash]++;
                this.size++;
                return true;
            } catch (Exception e) {
                return false;  
            }
        }
    }
    public T get(String key) {
        try {
            int hash = this.hash(key);
            if (hash == -1) return null;  
            for (int i = 0; i < this.cap_list[hash]; i++) {
                if (this.key_list[hash][i].equals(key)) {
                    return this.value_list[hash][i];
                }
            }
            return null;  
        } catch (Exception e) {
            return null;  
        }
    }
    public T delete(String key) {
        try {
            int hash = this.hash(key);
            if (hash == -1) return null;  
            for (int i = 0; i < this.cap_list[hash]; i++) {
                if (key_list[hash][i].equals(key)) {  
                    T ret = this.value_list[hash][i];
                    for (int j = i; j < this.cap_list[hash]-1; j++) {
                        this.key_list[hash][j] = this.key_list[hash][j+1];
                        this.value_list[hash][j] = this.value_list[hash][j+1];
                    }
                    this.cap_list[hash]--;
                    this.size--;
                    int curr_len = this.key_list[hash].length;
                    if (this.cap_list[hash]*2 <= curr_len && this.cap_list[hash] != 0) {
                        String[] new_key_list = new String[curr_len/2];
                        @SuppressWarnings("unchecked")
                        T[] new_value_list = (T[]) (new Object[curr_len/2]);
                        for (int k = 0; k < curr_len/2; k++) {
                            new_key_list[k] = this.key_list[hash][k];
                            new_value_list[k] = this.value_list[hash][k];
                        }
                        this.key_list[hash] = new_key_list;
                        this.value_list[hash] = new_value_list;
                    }
                    return ret;
                }
            }
            return null;  
        } catch (Exception e) {
            return null;  
        }
    }
    public float load() {
        return (float)this.size/(float)this.TABLE_SIZE;
    }
    public String toString() {
        String s = "";
        for (int i = 0; i < this.TABLE_SIZE; i++) {
            s += "Row " + (i+1) + ":\tSize " + this.cap_list[i] + "/" + this.key_list[i].length + ":\t";
            for (int j = 0; j < this.cap_list[i]; j++) {
                s += this.key_list[i][j] + " | " + this.value_list[i][j] + "\t\t";
            }
            s += ": \n";
        }
        return s;
    }
}