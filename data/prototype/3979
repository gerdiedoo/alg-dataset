package CW.D;
import CW.X;
public final class l<a extends x<a>> implements Z<a> {
    @I
    public t R(X O1, a[] J) {
        if (J.d > 1) {
            a[] k = (a[]) new x[J.d / 2];
            System.y(J, 0, k, 0, J.d / 2);
            R(O1, k);
            int n = J.d - J.d / 2;
            a[] zp = (a[]) new x[n];
            System.y(J, J.d / 2, zp, 0, n);
            R(O1, zp);
            ct(O1, k, zp, J);
        }
        return t.m;
    }
    private void ct(X O1, a[] r6, a[] Y, a[] B) {
        int p2 = 0;
        int V = 0;
        int q = 0;
        while (p2 < r6.d && V < Y.d) {
            O1.h(O1.c() + 1);
            if (r6[p2].f0(Y[V]) < 0) {
                O1.b(O1.cb() + 1);
                B[q++] = r6[p2++];
            } else {
                O1.b(O1.cb() + 1);
                B[q++] = Y[V++];
            }
            while (p2 < r6.d) {
                O1.h(O1.c() + 1);
                O1.b(O1.cb() + 1);
                B[q++] = r6[p2++];
            }
            while (V < Y.d) {
                O1.h(O1.c() + 1);
                O1.b(O1.cb() + 1);
                B[q++] = Y[V++];
            }
        }
    }
}