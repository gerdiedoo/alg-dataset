package O;  
import i.z.P.u.R2;
import i.z.P.u.v;
import i.z.P.s.w;
public class y<j3, p> {
    int F, T;
    h<S<j3, p>>[] q;
    private final w c = new w(0);
    private final w t = new w(0);
    private final R2 kh = new v();
    protected long A() {
        return t.s4();
    }
    protected long o() {
        return c.s4();
    }
    protected h<S<j3,p>>[] xF() {
        return q;
    }
    private y(int F, int T, long c, long t){
        this(F, T);
        this.c.V(c);
        this.t.V(t);
    }
    public y(int F, int T){
        this.F = F;
        this.T = T;
        q = new h[F];
        for (int I = 0; I < F; I++) {
            q[I] =  new h<S<j3, p>>();
            q[I].H(0, new S<j3, p>());
        }
        c.V(1);
        t.V(1);
    }
    public int e(j3 pt){
        if (pt == null)
            return 0;
        int C = pt.hashCode();
        C += (C <<  15) ^ 0xffffcd7d;
        C ^= (C >>> 10);
        C += (C <<   3);
        C ^= (C >>>  6);
        C += (C <<   2) + (C << 14);
        return sH.z_((C ^ (C >>> 16)) % F);
    }
    public int M(j3 pt){
        if (pt == null)
            return 0;
        int C = pt.hashCode();
        C += (C <<  15) ^ 0xffffcd4d;
        C ^= (C >>> 10);
        C += (C <<   3);
        C ^= (C >>>  6);
        C += (C <<   2) + (C << 14);
        C ^= (C >>> 16);
        return sH.z_((C / 11) % F);
    }
    private void H(long Eg, S a, int Ok){
        q[Ok].H(Eg, a);
    }
    public void bR(j3 pt, p r) throws Wo {
        if(pt == null || r == null) throw new L();
        try{
            kh.kh();
            long Eg = c.Jz();
            S<j3, p> D = new S<j3, p>(pt, r);
            int[] IB = new int[T];
            for(int I = 0; I < T; I++) {
                int Ok = e(D.pt);
                S K = q[Ok].Z();
                if(K.equals(new S())){
                    H(Eg, D, Ok);
                    t.V(Eg);
                    return;
                }
                Ok = M(D.pt);
                K = q[Ok].Z();
                if(K.equals(new S())){
                    H(Eg, D, Ok);
                    t.V(Eg);
                    return;
                }
                H(Eg, D, Ok);
                IB[I] = Ok;
                D = K;
            }
            for(int I=0; I < T; I++){
                q[IB[I]].x(Eg);
            }
            throw new Wo("Key " + pt + " Could not be inserted due to tight table");
        }finally{
            kh.R();
        }
    }
    public p s4(j3 pt) {
        long d = t.s4();
        int Ok = e(pt);
        S<j3, p> a = q[Ok].uK(d);
        if(a.pt != null && a.pt.equals(pt)) {
            return a.r;
        }
        Ok = M(pt);
        a = q[Ok].uK(d);
        if(a.pt != null && a.pt.equals(pt)){
            return a.r;
        }
        return null;
    }
    public boolean x(j3 pt){
        try{
            kh.kh();
            long Eg = c.Jz();
            int Ok = e(pt);
            S a = q[Ok].uK(t.s4());
            if(a.pt != null && a.pt.equals(pt)){
                H(Eg, new S(), Ok);
                t.V(Eg);
                return true;
            }
            Ok = M(pt);
            a = q[Ok].uK(t.s4());
            if(a.pt != null && a.pt.equals(pt)){
                H(Eg, new S(), Ok);
                t.V(Eg);
                return true;
            }
            return false;
        }finally{
            kh.R();
        }
    }
    private class S<j3, p> {
        public j3 pt;
        public p r;
        public S() {
        }
        public j3 m() {
            return pt;
        }
        public p k0() {
            return r;
        }
        public S(j3 pt, p r) {
            this.pt = pt;
            this.r = r;
        }
        @G
        public boolean equals(N2 Y) {
            if (this == Y) return true;
            if (Y == null || B() != Y.B()) return false;
            S<?, ?> g = (S<?, ?>) Y;
            if (pt != null ? !pt.equals(g.pt) : g.pt != null) return false;
            return r != null ? r.equals(g.r) : g.r == null;
        }
        @G
        public int hashCode() {
            int W = pt != null ? pt.hashCode() : 0;
            W = 31 * W + (r != null ? r.hashCode() : 0);
            return W;
        }
    }
}