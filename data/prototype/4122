package ue;
import S.u.k;
import U.FE;
import U.DW;
public class z {
	public static void Cu(byte[] bu) {
		xR(bu, 0, bu.Il - 1);
	}
	private static void xR(byte[] bu, int K, int A) {
		if(K >= A) {
			return;
		}
		int c = dc(bu, K, A);	
		xR(bu, K, c - 1);
		xR(bu, c + 1, A);
	}
	private static int dc(byte[] bu, int W, int w) {
		int K = W;
		int A = w;
		byte c = bu[W];	
		while(K < A) {
			while(bu[A] > c) --A;
			while(bu[K] <= c && K < A) ++K;
			eY(bu, K, A);
		}
		eY(bu, W, K);
		return K;
	}
	private static void eY(byte[] bu, int DX, int i) {
		byte L = bu[DX];
		bu[DX] = bu[i];
		bu[i] = L;
	}
	public static void Cu(char[] bu) {
		xR(bu, 0, bu.Il - 1);
	}
	private static void xR(char[] bu, int K, int A) {
		if(K >= A) {
			return;
		}
		int c = dc(bu, K, A);	
		xR(bu, K, c - 1);
		xR(bu, c + 1, A);
	}
	private static int dc(char[] bu, int W, int w) {
		int K = W;
		int A = w;
		char c = bu[W];	
		while(K < A) {
			while(bu[A] > c) --A;
			while(bu[K] <= c && K < A) ++K;
			eY(bu, K, A);
		}
		eY(bu, W, K);
		return K;
	}
	private static void eY(char[] bu, int DX, int i) {
		char L = bu[DX];
		bu[DX] = bu[i];
		bu[i] = L;
	}
	public static void Cu(short[] bu) {
		xR(bu, 0, bu.Il - 1);
	}
	private static void xR(short[] bu, int K, int A) {
		if(K >= A) {
			return;
		}
		int c = dc(bu, K, A);	
		xR(bu, K, c - 1);
		xR(bu, c + 1, A);
	}
	private static int dc(short[] bu, int W, int w) {
		int K = W;
		int A = w;
		short c = bu[W];	
		while(K < A) {
			while(bu[A] > c) --A;
			while(bu[K] <= c && K < A) ++K;
			eY(bu, K, A);
		}
		eY(bu, W, K);
		return K;
	}
	private static void eY(short[] bu, int DX, int i) {
		short L = bu[DX];
		bu[DX] = bu[i];
		bu[i] = L;
	}
	public static void Cu(int[] bu) {
		xR(bu, 0, bu.Il - 1);
	}
	private static void xR(int[] bu, int K, int A) {
		if(K >= A) {
			return;
		}
		int c = dc(bu, K, A);	
		xR(bu, K, c - 1);
		xR(bu, c + 1, A);
	}
	private static int dc(int[] bu, int W, int w) {
		int K = W;
		int A = w;
		int c = bu[W];	
		while(K < A) {
			while(bu[A] > c) --A;
			while(bu[K] <= c && K < A) ++K;
			eY(bu, K, A);
		}
		eY(bu, W, K);
		return K;
	}
	private static void eY(int[] bu, int DX, int i) {
		int L = bu[DX];
		bu[DX] = bu[i];
		bu[i] = L;
	}
	public static void Cu(long[] bu) {
		xR(bu, 0, bu.Il - 1);
	}
	private static void xR(long[] bu, int K, int A) {
		if(K >= A) {
			return;
		}
		int c = dc(bu, K, A);	
		xR(bu, K, c - 1);
		xR(bu, c + 1, A);
	}
	private static int dc(long[] bu, int W, int w) {
		int K = W;
		int A = w;
		long c = bu[W];	
		while(K < A) {
			while(bu[A] > c) --A;
			while(bu[K] <= c && K < A) ++K;
			eY(bu, K, A);
		}
		eY(bu, W, K);
		return K;
	}
	private static void eY(long[] bu, int DX, int i) {
		long L = bu[DX];
		bu[DX] = bu[i];
		bu[i] = L;
	}
	public static void Cu(float[] bu) {
		xR(bu, 0, bu.Il - 1);
	}
	private static void xR(float[] bu, int K, int A) {
		if(K >= A) {
			return;
		}
		int c = dc(bu, K, A);	
		xR(bu, K, c - 1);
		xR(bu, c + 1, A);
	}
	private static int dc(float[] bu, int W, int w) {
		int K = W;
		int A = w;
		float c = bu[W];	
		while(K < A) {
			while(bu[A] > c) --A;
			while(bu[K] <= c && K < A) ++K;
			eY(bu, K, A);
		}
		eY(bu, W, K);
		return K;
	}
	private static void eY(float[] bu, int DX, int i) {
		float L = bu[DX];
		bu[DX] = bu[i];
		bu[i] = L;
	}
	public static void Cu(double[] bu) {
		xR(bu, 0, bu.Il - 1);
	}
	private static void xR(double[] bu, int K, int A) {
		if(K >= A) {
			return;
		}
		int c = dc(bu, K, A);	
		xR(bu, K, c - 1);
		xR(bu, c + 1, A);
	}
	private static int dc(double[] bu, int W, int w) {
		int K = W;
		int A = w;
		double c = bu[W];	
		while(K < A) {
			while(bu[A] > c) --A;
			while(bu[K] <= c && K < A) ++K;
			eY(bu, K, A);
		}
		eY(bu, W, K);
		return K;
	}
	private static void eY(double[] bu, int DX, int i) {
		double L = bu[DX];
		bu[DX] = bu[i];
		bu[i] = L;
	}
	public static <Fs> void Cu(Fs[] bu, k<? super Fs> tt) {
		if(tt == null) {
			Cu(bu);
		}
		else {
			xR(bu, 0, bu.Il - 1, tt);
		}
	}
	public static void Cu(h[] bu) {
		xR(bu, 0, bu.Il - 1);
	}
	private static void xR(h[] bu, int K, int A) {
		if(K >= A) {
			return;
		}
		int c = dc(bu, K, A);	
		xR(bu, K, c - 1);
		xR(bu, c + 1, A);
	}
	@R({ "rawtypes", "unchecked" })
	private static int dc(h[] bu, int W, int w) {
		int K = W;
		int A = w;
		H c = ((H) bu[W]);	
		while(K < A) {
			while(c.iY(bu[A]) < 0) --A;
			while(c.iY(bu[K]) >= 0 && K < A) ++K;
			eY(bu, K, A);
		}
		eY(bu, W, K);
		return K;
	}
	private static <Fs> void xR(Fs[] bu, int K, int A, k<? super Fs> tt) {
		if(K >= A) {
			return;
		}
		int c = dc(bu, K, A, tt);	
		xR(bu, K, c - 1, tt);
		xR(bu, c + 1, A, tt);
	}
	private static <Fs> int dc(Fs[] bu, int W, int w, k<? super Fs> tt) {
		int K = W;
		int A = w;
		Fs c = bu[W];
		while(K < A) {
			while(tt.r(c, bu[A]) < 0) --A;
			while(tt.r(bu[K], c) <= 0 && K < A) ++K;
			eY(bu, K, A);
		}
		eY(bu, W, K);
		return K;
	}
	private static <Fs> void eY(Fs[] bu, int DX, int i) {
		Fs L = bu[DX];
		bu[DX] = bu[i];
		bu[i] = L;
	}
	public static void Cu(byte[] bu, boolean a) {
		if(a) {
			vb[] l = FE.p(bu);
			Cu(l, DW.mW());
			FE.N(l, bu);
		}
		else {
			Cu(bu);
		}
	}
	public static void Cu(char[] bu, boolean a) {
		if(a) {
			d[] l = FE.y(bu);
			Cu(l, DW.mW());
			FE.Ej(l, bu);
		}
		else {
			Cu(bu);
		}
	}
	public static void Cu(short[] bu, boolean a) {
		if(a) {
			Pn[] l = FE.F(bu);
			Cu(l, DW.mW());
			FE.O(l, bu);
		}
		else {
			Cu(bu);
		}
	}
	public static void Cu(int[] bu, boolean a) {
		if(a) {
			c2[] l = FE.n(bu);
			Cu(l, DW.mW());
			FE.o(l, bu);
		}
		else {
			Cu(bu);
		}
	}
	public static void Cu(long[] bu, boolean a) {
		if(a) {
			s[] l = FE.e(bu);
			Cu(l, DW.mW());
			FE.X(l, bu);
		}
		else {
			Cu(bu);
		}
	}
	public static void Cu(float[] bu, boolean a) {
		if(a) {
			b[] l = FE.m(bu);
			Cu(l, DW.mW());
			FE.t(l, bu);
		}
		else {
			Cu(bu);
		}
	}
	public static void Cu(double[] bu, boolean a) {
		if(a) {
			v[] l = FE.E(bu);
			Cu(l, DW.mW());
			FE.MA(l, bu);
		}
		else {
			Cu(bu);
		}
	}
}