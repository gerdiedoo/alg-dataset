from BitHash import BitHash, ResetBitHash
import string
import random
import time
class Node(object):
    def __init__(self, key, data):
        self.key = key
        self.data = data
class CuckooHash(object):
    def __init__(self, size):
        self.__hashArray1 = [None] * size
        self.__hashArray2 = [None] * size
        self.__numKeys = 0
    def __len__(self): return self.__numKeys    
    def __hashFunc(self, s):
        v1 = BitHash(s) 
        v2 = BitHash(s, v1)
        return v1 % len(self.__hashArray1), v2 % len(self.__hashArray1)    
    def find(self, key):
        bucket1, bucket2 = self.__hashFunc(key)
        if self.__hashArray1[bucket1] and self.__hashArray1[bucket1].key == key:
            return self.__hashArray1[bucket1].data
        elif self.__hashArray2[bucket2] and self.__hashArray2[bucket2].key == key:
            return self.__hashArray2[bucket2].data 
        return None
    def delete(self, key): 
        if self.find(key) == None:
            return False     
        bucket1, bucket2 = self.__hashFunc(key)        
        if self.__hashArray1[bucket1] and self.__hashArray1[bucket1].key == key:
            self.__hashArray1[bucket1] = None
            self.__numKeys -= 1
        elif self.__hashArray2[bucket2] and self.__hashArray2[bucket2].key == key:
            self.__hashArray2[bucket2] = None 
            self.__numKeys -= 1
        return True
    def insert(self, key, data, count = 0):
        if count == 10:
            print("count is", count)
            ResetBitHash()
            print("resetting bit hash.")
            self.__copyHashTable()
        if self.__numKeys >= len(self.__hashArray1)/2:
            self.__growHash()
            print("Grew hash table.")
        if self.find(key) != None:
            return False
        bucket1, bucket2 = self.__hashFunc(key)
        if not self.__hashArray1[bucket1]: 
            self.__hashArray1[bucket1] = Node(key, data)
            self.__numKeys += 1
        elif not self.__hashArray2[bucket2]: 
            self.__hashArray2[bucket2] = Node(key, data)  
            self.__numKeys += 1
        elif count % 2 == 0:
            pop = self.__hashArray1[bucket1]
            self.__hashArray1[bucket1] = Node(key, data)
            self.insert(pop.key, pop.data, count+1)
        elif count % 2 == 1:
            pop2 = self.__hashArray2[bucket2]
            self.__hashArray2[bucket2] = Node(key, data)
            self.insert(pop2.key, pop2.data, count+1)
        return True
    def __growHash(self):
        newSize = len(self.__hashArray1) * 2
        self.__copyHashTable(newSize)
    def __copyHashTable(self, newSize = "newSize"):
        if newSize == "newSize":
            newSize = len(self.__hashArray1)
        newHashTable = CuckooHash(newSize)
        for i in range(len(self.__hashArray1)):
            node1 = self.__hashArray1[i]
            node2 = self.__hashArray2[i]
            if node1:
                newHashTable.insert(node1.key, node1.data)
            if node2:
                newHashTable.insert(node2.key, node2.data)            
        self.__hashArray1 = newHashTable.__hashArray1
        self.__hashArray2 = newHashTable.__hashArray2
        self.__numKeys = newHashTable.__numKeys   
def __test1():
    h = CuckooHash(100)          
    h.insert("A", "0")
    h.insert("B", "1")
    h.insert("C", "2")
    h.insert("D", "3")
    h.insert("E", "4")
    h.insert("F", "5")
    h.insert("G", "6")
    h.insert("H", "77")
    h.insert("IIII", "888")
    n = h.find("IIII")
    a = h.find("A")
    b = h.find("B")
    c = h.find("C")
    if n == "888":
        print("Success!")
    if a == "0":
            print("Success!")
    if b == "1":
            print("Success!")
    if c == "2":
            print("Your search method was successful!")      
def __test2():
    size = 91000
    t = time.time()
    h = CuckooHash(10)
    for i in range(size):
        h.insert(str(i+1000000000), i)
    t = time.time() - t
    print(t, "seconds  ", size/t, "inserts per second")
def __test3():
    size = 20000
    missing = 0
    h = CuckooHash(100)
    for i in range(size): 
        h.insert(str(i)+"foobarbaz", i)
    for i in range(size):
        ans = h.find(str(i)+"foobarbaz")
        if ans == None or ans != i:
            print(i, "Couldn't find key", i+"foobarbaz")
            missing += 1
    print("There were", missing, "records missing from CuckooHashTab")
def __test4():
    size = 1000
    c = CuckooHash(100)
    l = []
    for i in range(size):
        s = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase) for j in range(5))
        l += [s]
        print(s)
        print("It is", c.insert(s, i),"that the function inserted 1 item.")
        print("There are", len(c), "items in the hash table.")
    deletionNumber = 53
    for i in range(deletionNumber):
        print("It is", c.delete(l[i]),"that the item", l[i], "has been deleted.")
    count = 0
    for item in l:
        n = random.randint(1, 100)
        if c.insert(item, n) == True:
            count += 1        
            print("It is True that the function inserted 1 item.")
        else:
            print("It is", c.insert(s, i),"that the function inserted 1 item.")
    if count == deletionNumber:
        print("Success! The duplicate keys weren't inserted.")
    else:
        print("Faliure! Check your deletion method. Check your insertion method.")
def __main():
    __test1()
    __test2()
    __test3()
    __test4()
if __name__ == '__main__':
    __main()