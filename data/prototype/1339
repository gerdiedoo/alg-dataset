from BitHash import BitHash, ResetBitHash
import random 
class Node(object):
    def __init__(self, k, d):
        self.key  = k 
        self.data = d
    def __str__(self):
        return "(" + str(self.key) + ", " + str(self.data) + ")"
class HashTab(object):
    def __init__(self, size):
        self.__hashArray1 = [None] * (size // 2)  
        self.__hashArray2 = [None] * (size // 2)
        self.__numRecords = 0               
        self.__size = size                  
    def __len__(self): return self.__numRecords
    def hashFunc(self, s):
        x = BitHash(s)          
        y = BitHash(s, x)
        size = self.__size // 2  
        return x % size, y % size
    def insert(self, k, d):
        if self.find(k) != None:  return False   
        n = Node(k, d)                           
        if self.__numRecords >= (self.__size // 2):
            self.__growHash() 
        position1, position2 = self.hashFunc(n.key)  
        pos = position1
        table = self.__hashArray1
        for i in range(5):
            if table[pos] == None:               
                table[pos] = n                   
                self.__numRecords += 1
                return True
            n, table[pos] = table[pos], n       
            if pos == position1:                            
                position1, position2 = self.hashFunc(n.key) 
                pos = position2                             
                table = self.__hashArray2                   
            else:                               
                position1, position2 = self.hashFunc(n.key) 
                pos == position1                            
                table = self.__hashArray1
        self.__growHash()               
        self.rehash(self.__size)                           
        self.insert(n.key, n.data)      
        return True
    def __str__(self):
        str1 = "Table 1: [ " + str(self.__hashArray1[0]) 
        str2 = " Table 2: [ " + str(self.__hashArray2[0]) 
        for i in range(1, self.__size):
            str1 += ", " + str(self.__hashArray1[i])
        str1 += "]"
        for i in range(1, self.__size):
           str2 += ", " + str(self.__hashArray2[i]) 
        str2 += "]"
        return str1 + str2 
    def rehash(self, size):
        ResetBitHash()          
        temp = HashTab(size)    
        for i in range(self.__size // 2):
            x = self.__hashArray1[i]
            y = self.__hashArray2[i]
            if x != None:
                temp.insert(x.key, x.data)
            if y != None:
                temp.insert(y.key, y.data)
        self.__hashArray1 = temp.__hashArray1
        self.__hashArray2 = temp.__hashArray2
        self.__numRecords = temp.__numRecords
        self.__size = temp.__size
    def __growHash(self):
        newSize = self.__size * 2
        self.rehash(newSize)
    def find(self, k):
        pos1, pos2 = self.hashFunc(k)               
        x = self.__hashArray1[pos1]                 
        y = self.__hashArray2[pos2]                 
        if x != None and x.key == k:  return x.data
        if y != None and y.key == k:  return y.data
        return None
    def delete(self, k):
        pos1, pos2 = self.hashFunc(k)  
        x = self.__hashArray1[pos1]
        y = self.__hashArray2[pos2]
        if  x != None and  x.key == k:  self.__hashArray1[pos1] = None
        elif y != None and y.key == k:  self.__hashArray2[pos2] = None
        else:   return False   
        self.__numRecords -= 1 
        return True
def test():
    size = 1000
    missing = 0
    found = 0 
    c = HashTab(100)
    inserted = 0
    for i in range(size): 
        if c.insert(str(i)+"foobarbaz", i):
            inserted += 1
    print("There were", inserted, "nodes successfully inserted")
    for i in range(size):
        ans = c.find(str(i)+"foobarbaz")
        if ans == None or ans != i:
            print(i, "Couldn't find key", str(i)+"foobarbaz")
            missing += 1
    print("There were", missing, "records missing from Cuckoo")
    for i in range(size): 
        c.delete(str(i)+"foobarbaz")
    for i in range(size): 
        ans = c.find(str(i)+"foobarbaz") 
        if ans != None or ans == i: 
            print(i, "Couldn't delete key", str(i)+"foobarbaz") 
            found += 1
    print("There were", found, "records not deleted from Cuckoo") 
def __main():
    test()
if __name__ == '__main__':
    __main()       