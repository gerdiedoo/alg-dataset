def T(X):
    for s in K(len(X)):
        u = False
        for j in K(0, len(X) - 1 - s, 1):
            if X[j] > X[j + 1]:
                (X[j], X[j + 1]) = (X[j + 1], X[j])
                u = True
        if not u:
            break
def J(X):
    s = 0
    while s < len(X):
        j = 1
        jQ = False
        while j < len(X) - s:
            if X[j - 1] < X[j]:
                jQ = True
                (X[j - 1], X[j]) = (X[j], X[j - 1])
            j += 1
        s += 1
        if not jQ:
            break
def v(X):
    O = X[:]
    T(X)
    J(O)
    return (X, O)
assert v([3, 4, 5, 2, 1]) == ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])
assert v([3, 4, 5, 2, 1, 6]) == ([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1])
assert v([]) == ([], [])
assert v([1]) == ([1], [1])
assert v([2, 1]) == ([1, 2], [2, 1])