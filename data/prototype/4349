package dB;
import j.d.c;
public class J implements B {
    public static c<Av> t = c.O();
    public static c<Av> v = (mT, o) -> -t.N(mT, o);
    public static void Cy(int[] m4, int W, int M, int D) {
        if (W < M) {
            c<Av> J_ = D == 1 ? t : v;
            int s = S(m4, W, M, J_);
            Cy(m4, W, s, D);
            Cy(m4, s + 1, M, D);
        }
    }
    private static int S(int[] m4, int W, int M, c<Av> J_) {
        int U = m4[(M + W) / 2];
        int YE = W - 1;
        int HW = M + 1;
        while (true) {
            do YE++; while (J_.N(m4[YE], U) < 0);
            do HW--; while (J_.N(m4[HW], U) > 0);
            if (YE >= HW) {
                return HW;
            }
            f(m4, YE, HW);
        }
    }
    private static void f(int[] m4, int YE, int HW) {
        int K = m4[YE];
        m4[YE] = m4[HW];
        m4[HW] = K;
    }
    @V
    public void Cy(int[] m4, int D) {
        Cy(m4, 0, m4.u - 1, D);
    }
}