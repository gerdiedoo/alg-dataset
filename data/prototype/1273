function bitonicSort (arrData) {
  'use strict'
  const ASCEND = true
  const DESCEND = false
  function _bitonicSort (order, arrData) {
    console.log('Cycle:', arrData.join())
    let dataMax = arrData.length
    if (dataMax <= 1) return arrData
    let dataSplit = Math.floor(dataMax / 2)
    let first = _bitonicSort(ASCEND, arrData.slice(0, dataSplit))
    let second = _bitonicSort(DESCEND, arrData.slice(dataSplit))
    return _bitonicMerge(order, first.concat(second))
  }
  function _bitonicMerge (order, arrData) {
    console.log('Merge:', arrData.join())
    let dataMax = arrData.length
    if (dataMax <= 1) return arrData
    _bitonicCompare(order, arrData)
    let dataSplit = Math.floor(dataMax / 2)
    let first = _bitonicMerge(order, arrData.slice(0, dataSplit))
    let second = _bitonicMerge(order, arrData.slice(dataSplit))
    return first.concat(second)
  }
  function _bitonicCompare (order, arrData) {
    console.log('Compare In:', arrData.join())
    let dataMax = arrData.length
    let dist = Math.floor(dataMax / 2)
    for (let i = 0; i < dist; i++) {
      if ((arrData[i] > arrData[i + dist]) === order) {
        let temp = arrData[i]
        arrData[i] = arrData[i + dist]
        arrData[i + dist] = temp
      }
    }
    console.log('Compare Out:', arrData.join())
  }
  console.log('Initial:', arrData.join())
  return _bitonicSort(ASCEND, arrData)
}