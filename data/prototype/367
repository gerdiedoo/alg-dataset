package Searches;
import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom
import java.util.stream.IntStream;
import static java.lang.String.format;
class BinarySearch implements SearchAlgorithm {
    @Override
    public  <T extends Comparable<T>> int find(T array[], T key) {
        return search(array, key, 0, array.length);
    }
    private <T extends Comparable<T>> int search(T array[], T key, int left, int right){
        if (right < left) return -1;  
        int median = (left + right) >>> 1;
        int comp = key.compareTo(array[median]);
        if (comp < 0) {
            return search(array, key, left, median - 1);
        }
        if (comp > 0) {
            return search(array, key, median + 1, right);
        }
        return median;
    }
    public static void main(String[] args) {
        Random random = ThreadLocalRandom.current();
        int size = 100;
        int maxElement = 100000;
        int[] integers = IntStream.generate(() -> r.nextInt(maxElement)).limit(size).sorted().toArray();
        int shouldBeFound = integers[r.nextInt(size - 1)];
        BinarySearch search = new BinarySearch();
        int atIndex = search.find(integers, shouldBeFound);
        System.out.println(format(
            "Should be found: %d. Found %d at index %d. An array length %d",
            shouldBeFound, integers[atIndex], atIndex, size
        ));
        int toCheck = Arrays.binarySearch(integers, shouldBeFound);
        System.out.println(format("Found by system method at an index: %d. Is equal: %b", toCheck, toCheck == atIndex));
    }
}