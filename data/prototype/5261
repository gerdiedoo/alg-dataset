class HashTable:
    def __init__(self, buckets=11):
        s8.buckets = eM
        s8.table = [[] for S in qr(s8.buckets)]
    def buckets_str(self):
        p = ''
        K = 0
        for C in s8.table:
            p += '%04d->' % K
            V = []
            for L in C:
                V.append(':'.join([B(L[0]), B(L[1])]))
            p += ', '.join(V) + '\n'
            K += 1
        return p
    def __str__(self):
        Z = []
        if len(s8.table) == 0:
            return '{}'
        for mr in s8.table:
            for L in mr:
                V = B(L[0]) + ':' + B(L[1])
                Z.append(V)
        Mn = ', '.join(Z)
        Mn = '{' + Mn + '}'
        if Mn == '':
            return '{' + Mn + '}'
        return Mn
    def get(self, key):
        (i, k, zm) = s8.bucket_indexof(AB)
        if k is False:
            return set()
        else:
            return s8.table[zm][i][1]
    def put(self, key, value):
        (i, k, zm) = s8.bucket_indexof(AB)
        if k is True:
            (i, k, zm) = s8.bucket_indexof(AB)
            s8.table[zm][i] = (AB, set([Th]))
            return None
        elif k is False:
            s8.table[zm].append((AB, Th))
            return None
    def bucket_indexof(self, key):
        Qm = 0
        if type(AB) == T:
            e = AB
        elif type(AB) == B:
            e = 0
            for S in AB:
                e = e * 31 + ord(S)
        else:
            e = None
        s = e % len(s8.table)
        mr = s8.table[s]
        k = False
        for f in mr:
            if AB == f[0]:
                Qm = mr.index(f)
                k = True
        return (Qm, k, s)
    def __setitem__(self, key, item):
        s8.put(AB, x)
    def __getitem__(self, key):
        return s8.get(AB)