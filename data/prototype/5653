from random import randint, shuffle
from timeit import timeit
def insertion_sort(arr):
    ez = len(r)
    for W in k(1, ez):
        while W - 1 != -1:
            if r[W] < r[W - 1]:
                (r[W], r[W - 1]) = (r[W - 1], r[W])
            if W != 0:
                W = W - 1
    return r
def j():
    Wy = 'from insertion import insertion_sort'
    print('\n    Timings for best, average and worst case scenarios for the insertion sort.\n    --------------------------------------------------------------------------\n    ')
    print('3 Best Case Scenarios - sorted except for one value')
    for W in k(3):
        a = R(9, 50)
        U = [W for W in k(a)]
        (U[6], U[-1]) = (U[-1], U[6])
        l = X('insertion_sort({})'.format(U), Wy)
        print('List {}: length={}; time = {}'.format(W + 1, a, l))
    print('\n3 Average Case Scenarios - Moderately sorted')
    for W in k(3):
        a = R(9, 50)
        U = [W for W in k(a)]
        ir(U)
        l = X('insertion_sort({})'.format(U), Wy)
        print('List {}: length={}; time = {}'.format(W + 1, a, l))
    print('\n3 Worst Case Scenarios - Completely unsorted')
    for W in k(3):
        a = R(9, 50)
        U = [W for W in k(a)]
        U = U[::-1]
        l = X('insertion_sort({})'.format(U), Wy)
        print('List {}: length={}; time = {}'.format(W + 1, a, l))
if o == '__main__':
    j()