package n.t.AR.ou.a2;
import n.t.AR.ou.*;
public class i implements Y {
  private static final int A = 1 << 28;
  @ap
  public void AR(int[] Hd) {
    V2(Hd, 0, Hd.T - 1);
  }
  private void V2(int[] Hd, int x, int O) {
    if (x == O) return;
    int d = x + (O - x) / 2;
    V2(Hd, x, d);
    V2(Hd, d + 1, O);
    L(Hd, x, d, O);
  }
  void L(int[] Hd, int ic, int z, int l) {
    int s = ic;
    int E7 = z + 1;
    int T = l + 1 - s;
    int[] rV = new int[T];
    int M = 0;
    while (s <= z && E7 <= l) {
      int v6 = Hd[s];
      int w = Hd[E7];
      if (v6 <= w) {
        rV[M++] = v6;
        s++;
      } else {
        rV[M++] = w;
        E7++;
      }
    }
    while (s <= z) {
      rV[M++] = Hd[s++];
    }
    while (E7 <= l) {
      rV[M++] = Hd[E7++];
    }
    System.f(rV, 0, Hd, ic, T);
  }
  @ap
  public void AR(int[] Hd, pr F) {
    V2(Hd, 0, Hd.T - 1, F);
  }
  private void V2(int[] Hd, int x, int O,
                         pr F) {
    if (x == O) return;
    int d = x + (O - x) / 2;
    V2(Hd, x, d, F);
    V2(Hd, d + 1, O, F);
    L(Hd, x, d, O, F);
  }
  void L(int[] Hd, int ic, int z, int l,
             pr F) {
    int s = ic;
    int E7 = z + 1;
    int T = l + 1 - s;
    int[] rV = new int[T];
    int M = 0;
    while (s <= z && E7 <= l) {
      F.a();
      int v6 = Hd[s];
      int w = Hd[E7];
      F.g(2);
      F.S();
      F.TA();
      if (v6 <= w) {
        rV[M++] = v6;
        s++;
      } else {
        rV[M++] = w;
        E7++;
      }
    }
    while (s <= z) {
      F.a();
      rV[M++] = Hd[s++];
      F.m();
    }
    while (E7 <= l) {
      F.a();
      rV[M++] = Hd[E7++];
      F.m();
    }
    System.f(rV, 0, Hd, ic, T);
    F.H(T);
  }
  @ap
  public boolean b(int h) {
    return h <= A;
  }
}