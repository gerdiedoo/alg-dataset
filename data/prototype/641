exports.heapSort = ({ list }, { compare, swap }) => {
  const getParentIndex = (childIndex) => (
    Math.floor((childIndex - 1) / 2)
  );
  const getLeftChildIndex = (parentIndex) => (
    (parentIndex * 2) + 1
  );
  const getRightChildIndex = (parentIndex) => (
    (parentIndex * 2) + 2
  );
  const shouldSwap = (i, j) => (
    i >= 0 && j >= 0
    && i < list.length
    && j < list.length
    && compare(list[j], list[i]) > 0
  );
  const heapifyUp = (i) => {
    let childIndex = i;
    let parentIndex = getParentIndex(childIndex);
    while (shouldSwap(parentIndex, childIndex)) {
      swap(parentIndex, childIndex);
      childIndex = parentIndex;
      parentIndex = getParentIndex(childIndex);
    }
  };
  const heapify = () => {
    for (let i = 0; i < list.length; i += 1) {
      heapifyUp(i);
    }
    return list;
  };
  const compareChildrenBefore = (i, leftIndex, rightIndex) => {
    if (shouldSwap(leftIndex, rightIndex) && rightIndex < i) {
      return rightIndex;
    }
    return leftIndex;
  };
  const heapifyDownUntil = (i) => {
    let parentIndex = 0;
    let leftIndex = 1;
    let rightIndex = 2;
    let childIndex;
    while (leftIndex < i) {
      childIndex = compareChildrenBefore(i, leftIndex, rightIndex);
      if (shouldSwap(parentIndex, childIndex)) {
        swap(parentIndex, childIndex);
      }
      parentIndex = childIndex;
      leftIndex = getLeftChildIndex(parentIndex);
      rightIndex = getRightChildIndex(parentIndex);
    }
  };
  heapify();
  for (let i = list.length - 1; i > 0; i -= 1) {
    swap(0, i);
    heapifyDownUntil(i);
  }
  return list;
};