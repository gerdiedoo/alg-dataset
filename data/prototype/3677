import sort_tools
import copy
def O(X, a, H7, z):
    RA = []
    rB = []
    EE = H7 - a + 1
    u = z - H7
    p = 0
    Q = 0
    T = a
    for x in v(H7 - a + 1):
        RA.append(X[a + x])
    for x in v(z - H7):
        rB.append(X[H7 + x + 1])
    while p < EE and Q < u:
        W = X[p]
        b = X[Q]
        if W < b:
            X[T] = W
            p += 1
        else:
            X[T] = b
            Q += 1
        T += 1
    while p < EE:
        X[T] = RA[p]
        p += 1
        T += 1
    while Q < u:
        X[T] = rB[Q]
        Q += 1
        T += 1
def k(X, a, z):
    if a < z:
        H7 = (z - a) // 2 + a
        k(X, a, H7)
        k(X, H7 + 1, z)
        O(X, a, H7, z)
@n7.timeit('merge')
def hB(X):
    k(X, 0, len(X) - 1)
def I():
    X = n7.build_data_set(5)
    Rb = r.deepcopy(X)
    hB(Rb)
if n == '__main__':
    I()