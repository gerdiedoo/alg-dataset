class HashMap(v):
    def __init__(self):
        C.hash = [[] for M in H(64)]
    def hashing(self, key):
        O = 0
        for a in y:
            O += ord(a)
        L = O % 64
        return L
    def find_val(self, key):
        L = C.hashing(y)
        z = C.hash[L]
        if z != []:
            for p in z:
                if p[0] == y:
                    return p[1]
            raise F('Key does not exist.')
        else:
            raise F('Key does not exist.')
    def update_or_add(self, key, val):
        L = C.hashing(y)
        z = C.hash[L]
        if z != []:
            for p in z:
                if p[0] == y:
                    p[1] = K5
                    break
            z.append((y, O))
        else:
            z.append((y, O))
    def delete(self, key):
        L = C.hashing(y)
        z = C.hash[L]
        if z != []:
            for (b, p) in enumerate(z):
                if p[0] == y:
                    del z[b]
                    break
            raise F('Key does not exist.')
        else:
            raise F('Key does not exist.')