import java.util.List;
import java.lang.Comparable;
public class BinarySearch<T extends Comparable<T>> implements SearchingAlg<T> {
    @Override
    public int indexOf(List<T> elements, T target) {
        if (elements == null || target == null)
            return NIL;
        return indexOf(elements, target, 0, elements.size() - 1);
    }
    private int indexOf(List<T> elements, T target, int min, int max) {
        if (min <= max) {
            int mid = (max + min) >> 1;
            if (elements.get(mid).equals(target))
                return mid;
            if (isLessThan(elements.get(mid), target))
                return indexOf(elements, target, mid + 1, max);
            return indexOf(elements, target, min, mid - 1);
        }
        return NIL;
    }
    private boolean isLessThan(T first, T second) {
        return (first.compareTo(second) < 0);
    }
    public static void main(String[] args) {
        List<Integer> data = new java.util.ArrayList<Integer>();
        for (int i = 0; i < 100; i++)
            data.add(i);
        SearchingAlg<Integer> alg = new BinarySearch<Integer>();
        for (int i = 0; i < data.size(); i++) {
            int result = alg.indexOf(data, i);
            if (result == NIL)
                throw new java.lang.RuntimeException("Result shouldn't be NIL");
            data.remove(new Integer(i));
            result = alg.indexOf(data, i);
            if (result != NIL)
                throw new java.lang.RuntimeException("Result should be NIL");
        }
        System.out.println("All tests passed.");
    }
}