class Node {
	constructor (data) {
		this.data = data;
		this.next = null;
	}
}
class LinkedList {
	constructor (size = 0) {
		this.head = null;
		this.length = size;
	}
	add (value, index) {
		let temp = this.head;
		if (index === 0) {
			let n = new Node(value);
			n.next = this.head;
			this.head = n;
		} else if (index < 0 || index >= this.length) {
			throw new Error('Index Out of Bound');
		} else {
			for (let i = 0; i < index - 1; i++) {
				temp = temp.next;
			}
			let n = new Node(value);
			n.next = temp.next;
			temp.next = n;
		}
		this.length++;
	}
	addFirst (value) {
		return this.add(value, 0);
	}
	addLast (value) {
		if (this.head === null) {
			this.addFirst(value);
		} else {
			let temp = this.head;
			while (temp.next !== null) {
				temp = temp.next;
			}
			let n = new Node(value);
			temp.next = n;
			this.length++;
		}
	}
	remove (index) {
		if (this.isEmpty()) {
			throw new Error('List is Empty');
		} else if (index < 0 || index >= this.length) {
			throw new Error('Index out of Bound');
		} else if (index === 0) {
			this.head = this.head.next;
		} else {
			let temp = this.head;
			if (temp.next == null) {
				this.head = null;
			} else {
				for (let i = 0; i < index - 1; i++) {
					temp = temp.next;
				}
				temp.next = temp.next.next;
			}
		}
		this.length--;
	}
	removeFront () {
		this.remove(0);
	}
	removeLast () {
		this.remove(this.length - 1);
	}
	removeByValue (value) {
		this.remove(this.findFirst(value));
	}
	search (input) {
		let head = this.head;
		for (let i = 0; i < this.length; i++) {
			if (head.data === input) {
				return i;
			} else {
				head = head.next;
			}
		}
		throw new Error('Value not found');
	}
	findFirst (input) {
		return this.search(input);
	}
	findLast (input) {
		let newList = new LinkedList();
		newList = this.clone();
		newList.reverse();
		return this.length - newList.search(input) - 1;
	}
	setData (input, index) {
		if (index >= this.length) {
			this.add(input, index);
		} else {
			let head = this.head;
			for (let i = 0; i < this.length; i++) {
				if (i === index) {
					head.data = input;
				}
				head = head.next;
			}
		}
	}
	clone () {
		let newList = new LinkedList();
		let temp = this.head;
		while (temp.next) {
			newList.addLast(temp.data);
			temp = temp.next;
		}
		newList.addLast(temp.data);
		return newList;
	}
	reverse () {
		let prev = null;
		let current = this.head;
		while (current) {
			let next = current.next;
			current.next = prev;
			prev = current;
			current = next;
		}
		this.head = prev;
	}
	isEmpty () {
		return (this.length === 0);
	}
	clear () {
		this.head = null;
		this.length = 0;
	}
	show () {
		let list = [];
		let head = this.head;
		while (head) {
			list.push(head.data);
			head = head.next;
		}
		return list;
	}
}