package r;
public class da<jd extends H<jd>> extends u<jd> {
    protected jd[] CW;
    protected void O(jd[] Xe, int iU, int n, int Q) {
        int g = iU, X = n + 1;
        for (int RI = iU; RI <= Q; RI++) {
            CW[RI] = Xe[RI];
        }
        for (int RI = iU; RI <= Q; RI++) {
            if (g > n) {
                Xe[RI] = CW[X++];
            } else if (X > Q) {
                Xe[RI] = CW[g++];
            } else if (CW[g].D(CW[X]) <= 0) {
                Xe[RI] = CW[g++];  
            } else {
                Xe[RI] = CW[X++];
            }
        }
    }
    @I
    public void t(jd[] Xe) {
        CW = (jd[]) new H[Xe.KA];
        t(Xe, 0, Xe.KA - 1);
    }
    private void t(jd[] Xe, int iU, int Q) {
        if (Q <= iU) {
            return;
        }
        int E = iU + (Q - iU) / 2;
        t(Xe, iU, E);
        t(Xe, E + 1, Q);
        O(Xe, iU, E, Q);
    }
    public static void main(String[] args) {
        zN[] Xe = new zN[]{3, 5, 1, 2, 4};
        new da<zN>().t(Xe);
    }
}