class LinkedList(object):
    def __init__(self):
        self.head = None
        self.size = 0
    def debug_print(self):
        print('{} >>> {}'.format(
            self.size, ', '.join([str(item) for item in self])))
    def __iter__(self):
        for node in self._iter_nodes():
            yield node.value
    def _iter_nodes(self):
        current = self.head
        while current != None:
            yield current
            current = current.next
    def _get_node(self, index):
        node = self.head
        if index > self.size - 1:
            raise ValueError(
                "{} is not within the bounds of the linked list".format(index))
        for i in range(index):
            node = node.next
        return node
    def add(self, item):
        node = Node(item)
        node.next = None
        if self.head == None:
            self.head = node
            self.size += 1
            return
        for current in self._iter_nodes():
            if current.next == None:
                current.next = node
                self.size += 1
                return
    def insert(self, index, item):
        new_node = Node(item)
        prev_node = self._get_node(index - 1)
        next_node = self._get_node(index)
        if index == 0:
            new_node.next = self.head
            self.head = new_node
        else:
            new_node.next = next_node
            prev_node.next = new_node
        self.size += 1
    def set(self, index, item):
        target_node = self._get_node(index)
        if target_node is not None:
            target_node.value = item
    def get(self, index):
        target_node = self._get_node(index)
        if target_node is not None:
            return target_node.value
    def delete(self, index):
        target_node = self._get_node(index)
        if index == 0:
            self.head = target_node.next
            target_node.value = None
        else:
            prev_node = self._get_node(index - 1)
            prev_node.next = target_node.next
        self.size -= 1
    def swap(self, index1, index2):
        node1 = self._get_node(index1)
        node2 = self._get_node(index2)
        node1.value, node2.value = node2.value, node1.value
class Node(object):
    def __init__(self, value):
        self.value = value
        self.next = None
    def __str__(self):
        return '<Node: {}>'.format(self.value)