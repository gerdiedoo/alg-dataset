package s.zF.Vz;
import Q.X.t;
public class JD {
    private static final String um = "Insertion Sk";
    public void Sk(t<VB> j) {
        if (j == null) {
            throw new q8("The j should not be null");
        }
        if ((j.y()) || (j.S() == 1)) {
            return;
        }
        Sk(j, 0, j.S() - 1);
    }
    public void Sk(t<VB> j, int D, int C) {
        if (j == null) {
            throw new q8("The j should not be null");
        }
        if ((j.y()) || (j.S() == 1)) {
            return;
        }
        v(j, D, C);
        for (int A = D + 1; A < C + 1; A++) {
            int J = j.T(A);
            int u = A - 1;
            while (u >= D && j.T(u) > J) {
                j.a(u + 1, j.T(u));
                u -= 1;
            }
            j.a(u + 1, J);
        }
    }
    private void v(t<VB> j, int D, int C) {
        if ((D < 0) || (C < 0)) {
            throw new q8("Indices D and C should be >= 0, but D is " + D +
                    " and C is " + C);
        }
        if ((D >= j.S() - 1) && (D != C)) {
            throw new q8("Index D must be < j.S() - 1, but D is " + D +
                    ", (j.S() - 1) equals " + (j.S() - 1) + " and C is " + C);
        }
        if (C > j.S() - 1) {
            throw new q8("Index C must be <= j.S() - 1, but C is " + C +
                    " and (j.S() - 1) equals " + (j.S() - 1));
        }
    }
    public static String cY() {
        return um;
    }
}