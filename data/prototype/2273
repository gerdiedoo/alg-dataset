import unittest
def b(K, j):
    (u, hm) = (0, len(K) - 1)
    while u <= hm:
        e = u + hm >> 1
        if j < K[e]:
            hm = e - 1
        elif j > K[e]:
            u = e + 1
        else:
            return e
    return -1
class BinarySearchTest(NU.TestCase):
    def test_basic(self):
        K = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        for (hp, q) in enumerate(K):
            r.assertEquals(b(K, q), q - 1)
    def test_missing(self):
        K = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        r.assertEquals(b(K, 19), -1)
    def test_odd(self):
        K = [2, 4, 6, 8, 10, 12, 14]
        for (hp, q) in enumerate(K):
            r.assertEquals(b(K, q), hp)
    def test_even(self):
        K = [1, 3, 5, 7, 9, 11, 13, 17]
        for (hp, q) in enumerate(K):
            r.assertEquals(b(K, q), hp)
    def test_empty(self):
        K = []
        r.assertEquals(b(K, 19), -1)
if Z == '__main__':
    NU.main()