package DataStructures.Lists;
public class SinglyLinkedList {
    private Node head;
    public void insertHead(int x) {
        Node newNode = new Node(x);
        newNode.next = head;
        head = newNode;
    }
    public void insertNth(int data, int position) {
        if (position < 0 || position > getSize()) {
            throw new RuntimeException("position less than zero or position more than the count of list");
        } else if (position == 0)
            insertHead(data);
        else {
            Node cur = head;
            Node node = new Node(data);
            for (int i = 1; i < position; ++i) {
                cur = cur.next;
            }
            node.next = cur.next;
            cur.next = node;
        }
    }
    public void deleteHead() {
        if (isEmpty()) {
            throw new RuntimeException("The list is empty!");
        }
        head = head.next;
    }
    public void deleteNth(int position) {
        if (position < 0 || position >= getSize()) {
            throw new RuntimeException("position less than zero or position more than the count of list");
        } else if (position == 0)
            deleteHead();
        else {
            Node cur = head;
            for (int i = 1; i < position; ++i) {
                cur = cur.next;
            }
            cur.next = cur.next.next;
        }
    }
    public boolean isEmpty() {
        return getSize() == 0;
    }
    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.value + " ");
            current = current.next;
        }
        System.out.println();
    }
    public int getSize() {
        if (head == null)
            return 0;
        else {
            Node current = head;
            int size = 1;
            while (current.next != null) {
                current = current.next;
                size++;
            }
            return size;
        }
    }
    public static void main(String args[]) {
        SinglyLinkedList myList = new SinglyLinkedList();
        assert myList.isEmpty();
        myList.insertHead(5);
        myList.insertHead(7);
        myList.insertHead(10);
        myList.display();  
        myList.deleteHead();
        myList.display();  
        myList.insertNth(11, 2);
        myList.display();  
        myList.deleteNth(1);
        myList.display();  
    }
}
class Node {
    int value;
    Node next;
    Node(int value) {
        this.value = value;
        this.next = null;
    }
}