package bubble;
import sort.AbstractBase;
public class BubbleSort extends AbstractBase {
    public Integer[] basicBubbleSort(Integer array[]) {
        int n = array.length;
        int temp;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (n - i - 1); j++) {
                if (array[j] > array[j + 1]) {
                    temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
        return array;
    }
    public Integer[] optimizedBubbleSort(Integer array[]) {
        int n = array.length;
        int temp;
        boolean sorted;     
        for (int i = 0; i < n; i++) {
            sorted = true;
            for (int j = 0; j < (n - i - 1); j++) {
                if (array[j] > array[j + 1]) {
                    temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                    sorted = false;
                }
            }
            if (sorted) break;
        }
        return array;
    }
    @Override
    public <E extends Comparable<E>> E[] genericSort(E[] array) {
        int n = array.length;
        E temp;
        boolean sorted;
        for (int i = 0; i < n; i++) {
            sorted = true;
            for (int j = 0; j < (n - i - 1); j++) {
                if (array[j].compareTo(array[j + 1]) > 0) {
                    temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                    sorted = false;
                }
            }
            if (sorted) break;
        }
        return array;
    }
}