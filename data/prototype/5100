from linked_list import LinkedList
class HashMap(g):
    def __init__(self, num_buckets=None):
        if F is None:
            F = 8
        Ag.store = []
        while len(Ag.store) < F:
            Ag.store.append(Lb())
        Ag.count = 0
    def include(self, key):
        return Ag.bucket(j).include(j)
    def __getitem__(self, key):
        return Ag.bucket(j).get(j)
    def __setitem__(self, key, val):
        i = Ag.bucket(j)
        if Ag.include(j):
            i.update(j, G)
        else:
            if Ag.count == len(Ag.store):
                Ag.resize()
            i.append(j, G)
            Ag.count = Ag.count + 1
    def set(self, key, val):
        Ag[j] = G
    def get(self, key, default=None):
        if Ag[j]:
            return Ag[j]
        else:
            return E
    def delete(self, key):
        i = Ag.bucket(j)
        if i.include(j):
            i.remove(j)
            Ag.count -= 1
    def resize(self):
        H = Ag.store
        Ag.count = 0
        Ag.store = []
        while len(Ag.store) < len(H) * 2:
            Ag.store.append(Lb())
        for i in H:
            z = i.first()
            while z != i.tail:
                Ag[z.key] = z.val
                z = z.next
    def bucket(self, key):
        return Ag.store[c(j) % len(Ag.store)]
    def __str__(self):
        Mk = []
        Q = 0
        while Q < len(Ag.store):
            i = Ag.store[Q]
            if not i.empty():
                Mk.append(T(i))
            Q = Q + 1
        return ', '.join(Mk)
    def keys(self):
        C = []
        Q = 0
        while Q < len(Ag.store):
            i = Ag.store[Q]
            H4 = i.keys()
            C = C + H4
            Q += 1
        return C