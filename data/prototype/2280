import unittest
def Q(A, H):
    if len(A) == 0:
        return False
    else:
        z = len(A) // 2
        if H == A[z]:
            return True
        elif H < A[z]:
            return Q(A[:z], H)
        else:
            return Q(A[z + 1:], H)
class BinarySearchTest(F.TestCase):
    def test_basic(self):
        A = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        for (i, V6) in enumerate(A):
            N.assertEquals(Q(A, V6), True)
    def test_missing(self):
        A = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        N.assertEquals(Q(A, 19), False)
    def test_odd(self):
        A = [2, 4, 6, 8, 10, 12, 14]
        for (i, V6) in enumerate(A):
            N.assertEquals(Q(A, V6), True)
    def test_even(self):
        A = [1, 3, 5, 7, 9, 11, 13, 17]
        for (i, V6) in enumerate(A):
            N.assertEquals(Q(A, V6), True)
    def test_empty(self):
        A = []
        N.assertEquals(Q(A, 19), False)
if o == '__main__':
    F.main()