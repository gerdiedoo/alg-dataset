from binarytree import *
class HashMap(object):
  def __init__(self, size):
    self.count = 0
    self.size = size
    self.stack = [BinarySearchTree() for i in range(size)]
  def hashme(self, key):
    return key.__hash__() % self.size
  def set(self, key, value):
    hashvalue = self.hashme(key)
    findNode = self.stack[hashvalue].search(key)
    if not findNode is None: 
      findNode.value = value
    else: 
      self.stack[hashvalue].insert(key, value)
      self.count += 1
    return True
  def get(self, key):
    hashvalue = self.hashme(key)
    findNode = self.stack[hashvalue].search(key)
    if not findNode is None:
      return findNode.value
    return None
  def delete(self, key):
    hashvalue = self.hashme(key)
    findNode = self.stack[hashvalue].search(key)
    if not findNode is None:
      retval = self.stack[hashvalue].delete(key)
      self.count -= 1
      return retval.value
    return None
  def load(self):
    if (self.count + self.size == 0): 
      return 0
    return self.count / float(self.size)
  def __getitem__(self, key):
    return self.get(key)
  def __setitem__(self, key, value):
    return self.set(key, value)
  def __repr__(self):
    return "<HashMap, style:chaining-bst, size:%d>" % self.size 