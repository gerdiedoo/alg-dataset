class HashMap(object):
  def __init__(self, size):
    self.count = 0
    self.size = size
    self.keys = [[] for i in range(size)]
    self.items = [[] for i in range(size)]
  def hashme(self, key):
    return key.__hash__() % self.size
  def set(self, key, value):
    hashvalue = self.hashme(key)
    if key in self.keys[hashvalue]: 
      index = self.keys[hashvalue].index(key)
      self.items[hashvalue][index] = value 
    else: 
      self.keys[hashvalue].append(key)
      self.items[hashvalue].append(value)
      self.count += 1
    return True
  def get(self, key):
    hashvalue = self.hashme(key)
    myitem = None
    if key in self.keys[hashvalue]:
      index = self.keys[hashvalue].index(key)
      myitem = self.items[hashvalue][index]
    return myitem
  def delete(self, key):
    hashvalue = self.hashme(key)
    returnValue = None
    if key in self.keys[hashvalue]:
      index = self.keys[hashvalue].index(key)
      returnValue = self.items[hashvalue][index]
      self.keys[hashvalue].pop(index)
      self.items[hashvalue].pop(index)
      self.count -= 1
    return returnValue
  def load(self):
    if (self.count + self.size == 0): 
      return 0
    return self.count / float(self.size)
  def __getitem__(self, key):
    return self.get(key)
  def __setitem__(self, key, value):
    return self.set(key, value)
  def __repr__(self):
    return "<HashMap, style:chaining-list, size:%d>" % self.size 