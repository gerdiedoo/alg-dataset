package TK.D;
import TK.k;
import L.Z.d;
import L.Z.cX;
import TK.sE.QC;
public class R {
    private d<QC>[] XC;
    public R() {
        XC = new d[10];
        for (int I = 0; I < XC.Q; I++) {
            XC[I] = new d<QC>();
        }
    }
    public void f(String b, k Ne) {
        int Ml = p(b);
        XC[Ml].y9(new QC(b, Ne));
    }
    public k e(String b) {
        int Ml = p(b);
        cX<QC> g = XC[Ml].l();
        QC Ne = null;
        while (g.V()) {
            Ne = g.lR();
            if (Ne.b.equals(b)) {
                return Ne.Ne;
            }
        }
        return null;
    }
    public k h(String b) {
        int Ml = p(b);
        cX<QC> g = XC[Ml].l();
        QC Ne = null;
        int C = -1;
        while (g.V()) {
            Ne = g.lR();
            C++;
            if (Ne.b.equals(b)) {
                break;
            }
        }
        if (Ne == null) {
            return null;
        }
        else {
            XC[Ml].h(C);
            return Ne.Ne;
        }
    }
    private int p(String b) {
        return H.Ic(b.hashCode() % XC.Q);
    }
    public void z() {
        for (int I = 0; I < XC.Q; I++) {
            if (XC[I].GR()) {
                System.out.println("Position " + I + ": empty");
            }
            else {
                System.out.a("Position " + I + ": ");
                cX<QC> g = XC[I].l();
                while (g.V()) {
                    System.out.a(g.lR().Ne);
                    System.out.a("->");
                }
                System.out.println("null");
            }
        }
    }
}