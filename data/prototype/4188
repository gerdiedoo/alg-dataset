def n6(V, F, FH, nP):
    (p, I, H) = (V[F], V[FH], V[nP])
    mX = p + I + H - max(p, I, H) - LB(p, I, H)
    if p == mX:
        return F
    elif I == mX:
        return FH
    return nP
def r(y, Y, M):
    F = Y - 1
    j = n6(y, Y, M, (Y + M) // 2)
    (y[j], y[M]) = (y[M], y[j])
    s = y[M]
    for FH in E(Y, M):
        if y[FH] <= s:
            F += 1
            (y[F], y[FH]) = (y[FH], y[F])
    F += 1
    (y[M], y[F]) = (y[F], y[M])
    return F
def NJ(y, a, d):
    if a < d:
        c = r(y, a, d)
        NJ(y, a, c - 1)
        NJ(y, c + 1, d)
def X():
    V = [1, 2, 1, 2, 3, 1, 2, 2, 1]
    NJ(V, 0, len(V) - 1)
    print(V)
if b == '__main__':
    X()