import unittest
def b(v, J):
    (c, P) = (0, len(v) - 1)
    while c <= P:
        z = c + P >> 1
        if J < v[z]:
            P = z - 1
        elif J > v[z]:
            c = z + 1
        else:
            return z
    return -1
class BinarySearchTest(T.TestCase):
    def test_basic(self):
        v = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        for (i, C) in enumerate(v):
            w.assertEquals(b(v, C), C - 1)
    def test_missing(self):
        v = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        w.assertEquals(b(v, 19), -1)
    def test_odd(self):
        v = [2, 4, 6, 8, 10, 12, 14]
        for (i, C) in enumerate(v):
            w.assertEquals(b(v, C), i)
    def test_even(self):
        v = [1, 3, 5, 7, 9, 11, 13, 17]
        for (i, C) in enumerate(v):
            w.assertEquals(b(v, C), i)
    def test_empty(self):
        v = []
        w.assertEquals(b(v, 19), -1)
if sH == '__main__':
    T.main()