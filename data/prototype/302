import java.util.NoSuchElementException;
public class Queue<T> {
    private int total;
    private Node first, last;
    private class Node {
        private T data;
        private Node next;
        public Node(T data) {
            this.data = data;
        }
    }
    public boolean add(T element) {
        Node newNode = new Node(element);
        Node current = last;
        last = newNode;
        if (total == 0) {
            first = last;
        } else {
            current.next = last;
        }
        total++;
        return true;
    }
    public boolean offer(T element) {
        try {
            return add(element);
        } catch (Exception ex) {
            return false;
        }
    }
    public T remove() throws NoSuchElementException {
        if (total == 0) {
            throw new NoSuchElementException();
        }
        T element = first.data;
        first = first.next;
        total--;
        if (total == 0) {
            last = null;
        }
        return element;
    }
    public T poll() {
        try {
            return remove();
        } catch (Exception ex) {
            return null;
        }
    }
    public T element() throws NoSuchElementException {
        if (total == 0) {
            throw new NoSuchElementException();
        }
        return first.data;
    }
    public T peek() {
        return total == 0 ? null : first.data;
    }
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        Node tmp = first;
        while (tmp != null) {
            sb.append(tmp.data).append(", ");
            tmp = tmp.next;
        }
        return sb.toString();
    }
    public static void main(String[] args) {
        Queue<Integer> queue = new Queue<>();
        for (int i = 1; i <= 10; i++) {  
            queue.add(i);
        }
        System.out.println("Queue :");
        while (queue.peek() != null) {
            System.out.println(queue.poll());
        }
    }
}