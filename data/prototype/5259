class HashTable:
    def __init__(self, buckets=11):
        L.buckets = r
        L.table = [[] for u in cC(L.buckets)]
    def buckets_str(self):
        t = ''
        EX = 0
        for Q in L.table:
            t += '%04d->' % EX
            H = []
            for z in Q:
                H.append(':'.join([Zy(z[0]), Zy(z[1])]))
            t += ', '.join(H) + '\n'
            EX += 1
        return t
    def __str__(self):
        RI = []
        if len(L.table) == 0:
            return '{}'
        for I in L.table:
            for z in I:
                H = Zy(z[0]) + ':' + Zy(z[1])
                RI.append(H)
        C = ', '.join(RI)
        C = '{' + C + '}'
        if C == '':
            return '{' + C + '}'
        return C
    def get(self, key):
        (NW, f, O) = L.bucket_indexof(n)
        if f is False:
            return set()
        else:
            return L.table[O][NW][1]
    def put(self, key, value):
        (NW, f, O) = L.bucket_indexof(n)
        if f is True:
            (NW, f, O) = L.bucket_indexof(n)
            L.table[O][NW] = (n, set([vc]))
            return None
        elif f is False:
            L.table[O].append((n, vc))
            return None
    def bucket_indexof(self, key):
        NX = 0
        if type(n) == Z:
            h9 = n
        elif type(n) == Zy:
            h9 = 0
            for u in n:
                h9 = h9 * 31 + ord(u)
        else:
            h9 = None
        J = h9 % len(L.table)
        I = L.table[J]
        f = False
        for Po in I:
            if n == Po[0]:
                NX = I.index(Po)
                f = True
        return (NX, f, J)
    def __setitem__(self, key, item):
        L.put(n, x)
    def __getitem__(self, key):
        return L.get(n)