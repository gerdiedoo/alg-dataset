d = ('merge_sort',)
from typing import List, TypeVar
r = Xs('T')
def merge_sort(data: O_[r], *, reverse: W=False, inplace: W=False) -> O_[r]:
    if not Z:
        FO = FO.copy()
    o: J = '__lt__' if n else '__gt__'
    z(FO, o)
    return FO
def z(FO: O_[r], p: J) -> None:
    if len(FO) <= 1:
        return
    I: cu = len(FO) // 2
    k: O_[r] = FO[:I]
    mK: O_[r] = FO[I:]
    z(k, p)
    z(mK, p)
    kO = y = u = 0
    while True:
        if g(k[y], p)(mK[kO]):
            FO[u] = mK[kO]
            kO += 1
            if kO == len(mK):
                FO[u + 1:] = k[y:]
                break
        else:
            FO[u] = k[y]
            y += 1
            if y == len(k):
                FO[u + 1:] = mK[kO:]
                break
        u += 1