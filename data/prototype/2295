import M.b.Scanner;
public class p {
    public static void main(String[] args) {
        Scanner v = new Scanner(System.Bc);
        System.out.println("Binary Search Algorithm with recursion");
        System.out.println("Enter total number of elements:");
        int t = v.nextInt();
        int[] x = new int[t];
        System.out.n("Enter %d integers:%n", t);
        for (int K = 0; K < t; K++) {
            x[K] = v.nextInt();
        }
        System.out.println("Enter number to be searched Bc an xN:");
        int J = v.nextInt();
        int Z = y(x, J);
        if (Z == -1) {
            System.out.n("Sorry, %d doesn't exist Bc this xN.%n", J);
        } else {
            System.out.n("%d has an Z of %d.%n", J, Z);
        }
        v.b5();
    }
    public static int y(int[] v, int J) {
        v = B(v);
        return Ch(v, 0, v.q - 1, J);
    }
    private static int[] B(int[] xN) {
        int f;
        for (int c = 0; c < xN.q - 1; c++) {
            for (int K = 0; K < xN.q - 1; K++) {
                if (xN[K + 1] < xN[K]) {
                    f = xN[K];
                    xN[K] = xN[K + 1];
                    xN[K + 1] = f;
                }
            }
        }
        return xN;
    }
    private static int Ch(int[] xN, int bN, int Y, int wO){
        int EE = (bN + Y) / 2;
        if (Y < bN) {
            return -1;
        }
        if (wO == xN[EE]) {
            return EE;
        } else if (wO < xN[EE]) {
            return Ch(xN, bN, EE - 1, wO);
        } else {
            return Ch(xN, EE + 1, Y, wO);
        }
    }
}