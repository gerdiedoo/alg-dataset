public class HashtableOpen<K extends Comparable<K>,V extends Comparable<V>> implements KWHashMap<K,V> {
    private Entry<K, V>[] table;
    private static final int START_CAPACITY = 101;
    private double LOAD_THRESHOLD = 0.75;
    private int numKeys;
    private int numDeletes;
    private final Entry<K, V> DELETED = new Entry<>(null, null);
    public HashtableOpen() {
        table = new Entry[START_CAPACITY];
    }
    private int find(Object key) {
        int index = key.hashCode() % table.length;
        if (index < 0)
            index += table.length;  
        while ((table[index] != null)
                && (!key.equals(table[index].getKey()))) {
            index++;
            if (index >= table.length)
                index = 0;  
        }
        return index;
    }
    @Override
    public V get(Object key) {
        int index = find(key);
        if (table[index] != null)
            return table[index].getValue();
        else
            return null;  
    }
    @Override
    public boolean isEmpty() {
        return numKeys == 0;
    }
    @Override
    public V put(K key, V value) {
        int index = find(key);
        if (table[index] == null) {
            table[index] = new Entry<>(key, value);
            numKeys++;
            double loadFactor =
                    (double) (numKeys + numDeletes) / table.length;
            if (loadFactor > LOAD_THRESHOLD)
                rehash();
            return null;
        }
        V oldVal = table[index].getValue();
        table[index].setValue(value);
        return oldVal;
    }
    private void rehash() {
        Entry<K, V>[] oldTable = table;
        table = new Entry[2 * oldTable.length + 1];
        numKeys = 0;
        numDeletes = 0;
        for (int i = 0; i < oldTable.length; i++) {
            if ((oldTable[i] != null) && (oldTable[i] != DELETED)) {
                put(oldTable[i].getKey(), oldTable[i].getValue());
            }
        }
    }
    @Override
    public V remove(Object key) {
        int index = find(key);
        if(table[index] == null){
            return null;
        }
        V temp = table[index].getValue();
        table[index] = DELETED;
        numDeletes++;
        numKeys--;
        return temp;
    }
    @Override
    public int size() {
        return numKeys;
    }
    static class Entry<K extends Comparable<K>,V extends Comparable<V>> implements Comparable<Entry<K,V>>  {
        private final K key;
        private V value;
        public boolean inTable;
        public boolean isInTable() {
            return inTable;
        }
        public K getKey() {
            return key;
        }
        public V getValue() {
            return value;
        }
        public void setValue(V value) {
            this.value = value;
        }
        public Entry(K key , V value){
            this.key = key;
            this.value = value;
            inTable = true;
        }
        @Override
        public int compareTo(Entry<K, V> o) {
            return this.key.compareTo(o.getKey());
        }
    }
}