from typing import List
def G(b: FO[X], H: X, Eb: X, O: X) -> None:
    Q4 = Eb + 1
    if b[Eb] <= b[Q4]:
        return
    while H <= Eb and Q4 <= O:
        if b[H] <= b[Q4]:
            H += 1
        else:
            T = b[Q4]
            C = Q4
            while C != H:
                b[C] = b[C - 1]
                C -= 1
            b[H] = T
            H += 1
            Eb += 1
            Q4 += 1
def Q(b: FO[X], *u: FO[X]) -> None:
    if len(u) == 2:
        (x, rQ) = u
    else:
        (x, rQ) = (0, len(b) - 1)
    if rQ > x:
        w = x + (rQ - x) // 2
        Q(b, x, w)
        Q(b, w + 1, rQ)
        G(b, x, w, rQ)
if s == '__main__':
    try:
        from utils import randomSequence
    except L:
        import os, sys
        R = f.path.dirname(f.path.realpath(Xm))
        S = f.path.abspath(f.path.join(R, f.pardir))
        D.path.insert(0, S)
        from utils import randomSequence
    print('MERGE SORT')
    TS = [7, 3, 6, 9, 4, 8, 1, 0, 5, 2]
    print(TS, '\n')
    Q(TS)
    print(TS)